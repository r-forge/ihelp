\input texinfo
@c %**start of header
@setfilename R-admin.info
@settitle R Installation and Administration in Korean (한국어판, ver.0.5.1_20130827)
@setchapternewpage on
@defcodeindex en
@c %**end of header

@syncodeindex fn vr

@dircategory Programming
@direntry
* R Administration: (R-admin).      R Installation and Administration.
@end direntry

@finalout

@include R-defs.texi
@include version.texi

@ifinfo
@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore

@end ifinfo

@titlepage
@title R Installation and Administration
@subtitle Version @value{VERSION}
@author R Core Team
@page
@vskip 0pt plus 1filll
@permission{}

@Rcopyright{2001}

@value{ISBN-admin}
@end titlepage

@c @ifnothtml
@contents
@c @end ifnothtml

@ifnottex
@node Top, Obtaining R, (dir), (dir)
@top R Installation and Administration

@c This is a guide to installation and administration for R.
이 문서는 R의 설치와 관리에 대한 안내서입니다.

@c The current version of this document is @value{VERSION}.
이 문서의 현재 버전은 @value{VERSION}입니다.

@value{ISBN-admin}

@Rcopyright{2001}

@permission{}
@c ---------- ^- read that


본 한국어 문서는 @strong{R Development Translation Teams} (@url{http://developer.r-project.org/TranslationTeams.html}) @strong{Korean} 섹션에서 진행하는 프로젝트의 일환으로 제공되어집니다.  
본 문서의 역자는 아래와 같습니다.
@itemize @bullet
@item Chel Hee Lee (이철희), University of Saskatchewan, Saskatoon, Saskatchewan, Canada, @email{gnustats@@gmail.com}, 2009 -- 2013, 
@item Eugene Jung, (정우준), Hongik University, Seoul, Korea, @email{muoe78@@gmail.com}, 2010--2013.
@end itemize 

@c 또한, 우리의 이러한 활동에 많은 관심과 아낌없는 지원을 해주는 Prof. Friedrich Leisch (Austria), Prof. Duncan Murdoch (Canada), Prof. Mikelis Bickis (Canada)에 깊은 감사의 뜻을 표현합니다.  

아래와 같은 분들께서 주요 역자들에게 조언과 제안사항을 보내주셨습니다 (의도적인 것은 아니지만 관리상의 실수로 인하여 이 문서에 기여하셨던 분의 성함이 빠져 있을 수도 있습니다.  이 경우 @email{gnustats@@korea.gnu.org}로 꼭 알려주시길 부탁드립니다).
@itemize @bullet
@item Heather Kim, University of Manitoba, Winnipeg, Manitoba, Canada, 2010-2011
@item Edward Kang, Austrailia, 2013
@end itemize

본 문서는 언급된 전문용어들에 대한 추가적인 해석, 오역교정, 그리고 이해를 돕기 위한 내용을 추가함으로서, 새로운 R의 배포에 맞추어 지속적으로 관리되어 질 것입니다.
본 문서에 대한 참여 및 제안은 @email{ihelp-translators@@ihelp.r-forge.r-project.org}으로 보내주신다면 감사하겠습니다. 


@end ifnottex

@menu
* Obtaining R::                 
* Installing R under Unix-alikes::  
* Installing R under Windows::  
* Installing R under (Mac) OS X::  
* Running R::                   
* Add-on packages::             
* Internationalization::        
* Choosing between 32- and 64-bit builds::  
* The standalone Rmath library::  
* Essential and useful other programs under a Unix-alike::  
* Configuration on a Unix-alike::  
* Platform notes::              
* The Windows toolset::         
* Function and variable index::  
* Concept index::               
* Environment variable index::  
@end menu

@node Obtaining R, Installing R under Unix-alikes, Top, Top
@chapter Obtaining R
@cindex Obtaining R

@c Sources, binaries and documentation for @R{} can be obtained via
@c @acronym{CRAN}, the ``Comprehensive R Archive Network'' whose current
@c members are listed at @uref{http://CRAN.R-project.org/@/mirrors.html}.
@R{}의 소스, 바이너리 그리고 문서는 @acronym{CRAN} ``Comprehensive R Archive Network''을 통해 얻을 수 있으며, CRAN 미러들의 목록을 @uref{http://CRAN.R-project.org/@/mirrors.html}에서 확인할 수 있습니다.

@menu
* Getting and unpacking the sources::  
* Getting patched and development versions::  
@end menu

@node Getting and unpacking the sources, Getting patched and development versions, Obtaining R, Obtaining R
@c @section Getting and unpacking the sources
@section 소스를 얻고 압축풀기
@cindex Sources for R

@c The simplest way is to download the most recent
@c @file{R-@var{x}.@var{y}.@var{z}.tar.gz} file, and unpack it with
가장 간단한 방법은 가장 최신 버전의 @file{R-@var{x}.@var{y}.@var{z}.tar.gz} 파일을 다운로드 받은 뒤 아래의 명령어를 이용하여 압축을 푸는 것입니다. 
이를 위해서는 적정한 버전@footnote{예를 들어, @: @acronym{GNU} @command{tar} 버전 1.15 이상 또는 @samp{libarchive}(OS 10.[67]에 사용된 것처럼) 또는 `Heirloom Toolchest' 배포}의 @command{tar}가 설치되어 있어야 합니다. 

@example
tar -xf R-@var{x}.@var{y}.@var{z}.tar.gz
@end example

@noindent
@c on systems that have a suitable@footnote{e.g.@: @acronym{GNU}
@c @command{tar} version 1.15 or later, or that from the @samp{libarchive}
@c (as used on OS 10.[67]) or `Heirloom Toolchest' distributions.}
@c @command{tar} installed.  On other systems you need to have the
@c @command{gzip} program installed, when you can use
다른 시스템에서 다음과 같은 명령어를 사용하기 위해서는 @command{gzip}이라는 프로그램이 설치되어야 합니다.

@example
gzip -dc R-@var{x}.@var{y}.@var{z}.tar.gz | tar -xf -
@end example

@c The pathname of the directory into which the sources are unpacked should
@c not contain spaces, as most @command{make} programs (and specifically
@c @acronym{GNU} @command{make}) do not expect spaces.
대부분의 @command{make} 프로그램 (특히 @acronym{GNU} @command{make})들이 공백을 허용하지 않는 것과 같이 소스의 압축이 어디에 풀리게 될지를 지정하는 디렉토리의 경로명은 공백이 있으면 안됩니다.

@c If you want the build to be usable by a group of users, set @code{umask}
@c before unpacking so that the files will be readable by the target group
@c (e.g.,@: @code{umask 022} to be usable by all users).  Keep this
@c setting of @code{umask} whilst building and installing.
만약 여러명의 사용자들이 사용할 수 있도록 빌드하기 원한다면, 압축을 풀기 전에 @code{umask}를 설정하는 것은 파일들이 다른 대상 그룹(target group)에 의하여 읽혀질 수 있게 해줍니다. 
(예를들어, @: @code{umask 022}라고 하는 것은 모든 사용자가 사용할 수 있게 합니다).
빌드와 설치 중에 @code{umask} 설정을 유지하도록 하십시오.

@c If you use a recent GNU version of @command{tar} and do this as a root
@c account (which on Windows includes accounts with administrator
@c privileges) you may see many warnings about changing ownership.  In
@c which case you can use
만약 GNU 버전의 최신 @command{tar}를 사용하며, 이러한 작업을 루트계정 (Windows에서는 관리자 권한을 가지고 있는 계정)을 통하여 하게 된다면, 소유권의 변경에 대해서 많은 경고를 보게 될 것입니다. 
이런 경우에는 다음과 같이 해 볼 수 있습니다.

@example
tar --no-same-owner -xf R-@var{x}.@var{y}.@var{z}.tar.gz
@end example

@noindent
@c and perhaps also include the option @option{--no-same-permissions}.
@enindex TAR_OPTIONS
@c (These options can also be set in the @env{TAR_OPTIONS} environment
@c variable: if more than one option is included they should be separated
@c by spaces.)
그리고 또한 옵션 @option{--no-same-permissions}을 사용할 수도 있습니다. 
(이런 옵션들은 @env{TAR_OPTIONS} 환경변수 내에서 설정될 수 있습니다: 만약 하나 이상의 옵션이 포함되면 그것들은 하나의 공백(space)으로 구분되어야 합니다.)

@node Getting patched and development versions,  , Getting and unpacking the sources, Obtaining R
@c @section Getting patched and development versions
@section 패치된 버전과 개발 버전을 얻기

@c A patched version of the current release, @samp{r-patched}, and the
@c current development version, @samp{r-devel}, are available as daily
@c tarballs and via access to the R Subversion repository.  (For the two
@c weeks prior to the release of a minor (2.x.0) version, @samp{r-patched}
@c tarballs may refer to beta/release candidates of the upcoming release,
@c the patched version of the current release being available via
@c Subversion.)
현재 공개된 버전의 패치 버전인 @samp{r-patched}와 현재 개발 중인 버전인 @samp{r-devel}은 일간 tarballs이나 R Subversion repository 에 접속함으로써 사용 가능합니다(2.x.0 같은 낮은 버전의 공개 2주전 동안 @samp{r-patched} tarballs는 곧 공개될 버전의 베타/공개후보로 불리고 현재 공개된 패치 버전은 Subversion을 통해 얻을 수 있었습니다).

@c The tarballs are available from
@c @uref{ftp://ftp.stat.math.ethz.ch/@/pub/@/Software/R/}.  Download
@c @file{R-patched.tar.gz} or @file{R-devel.tar.gz} (or the @file{.tar.bz2}
@c versions) and unpack as described in the previous section.  They are
@c built in exactly the same way as distributions of R releases.
tarballs는 @uref{ftp://ftp.stat.math.ethz.ch/@/pub/@/Software/R/} 얻을 수 있습니다. @file{R-patched.tar.gz} 이나 @file{R-devel.tar.gz} (또는  @file{.tar.bz2} versions)를 다운로드 하고 앞에서 설명한 바와 같이 압축을 해제합니다. 그것들은 R 이 공개되어 배포되는 것과 정확히 같은 방법으로 설치됩니다.

@menu
* Using Subversion and rsync::  
@end menu

@node Using Subversion and rsync,  , Getting patched and development versions, Getting patched and development versions
@c @subsection Using Subversion and rsync
@subsection 서브버전과 rsync 이용하기
@cindex Subversion

@c Sources are also available via @uref{https://svn.R-project.org/R/}, the
@c R Subversion repository.  If you have a Subversion client (see
@c @uref{http://subversion.apache.org/}), you can check out and update the
@c current @samp{r-devel} from
@c @uref{https://svn.r-project.org/@/R/@/trunk/} and the current
@c @samp{r-patched} from
@c @samp{https://svn.r-project.org/@/R/@/branches/@/R-@var{x}-@var{y}-branch/}
@c (where @var{x} and @var{y} are the major and minor number of the current
@c released version of R).  E.g., use
소스들은 R 서브버전 저장소인 @uref{https://svn.R-project.org/R/}에서 얻을 수 있습니다. 
만약 서브버전 클라이언트를 가지고 있다면(@uref{http://subversion.apache.org/}를 참고하십시오), @uref{http://svn.r-project.org/@/R/@/trunk/}로부터 현재의 @samp{r-devel}과 (@var{x}와 @var{y}는 현재 릴리즈되어 있는 R의 메이저와 마이너 버전의 숫자입니다) @samp{https://svn.r-project.org/@/R/@/branches/@/R-@var{x}-@var{y}-branch/}로부터 @samp{r-patched}를 체크아웃하고 업데이트를 할 수 있습니다. 
예를들면, 아래와 같이 사용하는 것은 (만약 필요하다면 새로이 생성될 수 있는) 디렉토리 @var{path}에 @samp{r-devel}를 체크아웃하는 것입니다.

@example
svn checkout https://svn.r-project.org/R/trunk/ @var{path}
@end example

@noindent
@c to check out @samp{r-devel} into directory @var{path} (which will be
@c created if necessary).  The alpha, beta and RC versions of an upcoming
@c @var{x.y.0} release are available from
@c @samp{https://svn.r-project.org/R/branches/R-@var{x}-@var{y}-branch/} in
@c the four-week period prior to the release.
다음배포를 위한 개발단계 @var{x.y.0} 릴리즈의 알파, 베타 그리고 RC 버전은 릴리즈 4주전에 @samp{https://svn.r-project.org/R/branches/R-@var{x}-@var{y}-branch/}으로부터 얻을 수 있습니다.

@c Note that @samp{https:} is required@footnote{for some Subversion clients
@c @samp{http:} may appear to work, but requires continual redirection.},
@c and that the SSL certificate for the Subversion server of the R project
@c should be recognized as from a trusted source.
@samp{https:}이 요구되어 지며@footnote{어떤 서브버전 클라이언트들에 대해서는 @samp{http:}로 나타날 수 있으나, 지속적인 리디렉션이 요구됩니다.}, R project의 서브버전 서버에 대한 SSL 증명이 신뢰된 소스로서 인식되어야 합니다.

@c Note that retrieving the sources by e.g.@: @command{wget -r} or
@c @command{svn export} from that URL will not work: the Subversion
@c information is needed to build @R{}.
해당 URL로부터 @command{wget -r} 또는 @command{svn export}을 이용하여 소스를 가져오지 못할 수 있습니다.
@R{}을 빌드하기 위해서 서브버전 정보가 필요하기 때문입니다.

@c The Subversion repository does not contain the current sources for the
@c recommended packages, which can be obtained by @command{rsync} or
@c downloaded from @acronym{CRAN}.  To use @code{rsync} to install the
@c appropriate sources for the recommended packages, run
@c @code{./tools/rsync-recommended} from the top-level of the @R{} sources.
서브버전 저장소는 추천 패키지들에 대한 현재 소스를 담고 있지 않으며, 이것들은 @command{rsync}을 이용하여 얻거나 @acronym{CRAN}에서 다운로드 받아야 합니다.
추천 패키지의 올바른 소스를 설치하기 위해 @code{rsync}를 이용하는 것은  @R{} 소스의 최상위 레벨에서 @code{./tools/rsync-recommended}를 실행하는 것입니다.

@c If downloading manually from @acronym{CRAN}, do ensure that you have the
@c correct versions of the recommended packages: if the number in the file
@c @file{VERSION} is @samp{@var{x}.@var{y}.@var{z}} you need to download
@c the contents of @samp{http://CRAN.R-project.org/src/contrib/@var{dir}},
@c where @var{dir} is @samp{@var{x}.@var{y}.@var{z}/Recommended} for
@c r-devel or @file{@var{x}.@var{y}-patched/Recommended} for r-patched,
@c respectively, to directory @file{src/library/Recommended} in the sources
@c you have unpacked.  After downloading manually you need to execute
@c @command{tools/link-recommended} from the top level of the sources to
@c make the requisite links in @file{src/library/Recommended}.  A suitable
@c incantation from the top level of the R sources using @command{wget}
@c might be (for the correct value of @file{@var{dir}})

@acronym{CRAN}에서 수동으로(manually) 내려받는 경우, 추천 패키지의 정확한 버전을 확인해야 합니다.
만약 @file{VERSION} 파일 내에 있는 숫자가 @samp{@var{x}.@var{y}.@var{z}}이라면, @samp{http://CRAN.R-project.org/src/contrib/@var{dir}} 내에 있느느 내용을 다운받아야 합니다. 
여기에서 @var{dir}은 r-devel인 경우 @samp{@var{x}.@var{y}.@var{z}/Recommended}를, r-patched 인 경우에는 @file{@var{x}.@var{y}-patched/Recommended}를 다운 받아 @file{src/library/Recommended}에 압축을 풀어야 합니다. 
수동으로 다운로드를 한 뒤에는 @file{src/library/Recommended} 내에 필요한 링크들을 만들기 위하여 소스의 최상위 레벨에서 @command{tools/link-recommended} 명령어를 실행해야 합니다. 
@command{wget}을 이용하여 R 소스의 최상위레벨로부터 필요한 명령은 아래와 같을 것입니다.
여기에서  @file{@var{dir}} 파일의 정확한 값입니다.

@example
wget -r -l1 --no-parent -A\*.gz -nd -P src/library/Recommended \
  http://CRAN.R-project.org/src/contrib/@var{dir}
./tools/link-recommended
@end example



@node Installing R under Unix-alikes, Installing R under Windows, Obtaining R, Top
@c @chapter Installing R under Unix-alikes
@chapter 유닉스와 같은 환경에 R 설치하기
@cindex Installing under Unix-alikes

@c @R{} will configure and build under most common Unix and Unix-alike
@c platforms including @samp{@var{cpu}-*-linux-gnu} for the
@c @cputype{alpha}, @cputype{arm}, @cputype{hppa}, @cputype{ix86},
@c @cputype{ia64}, @cputype{m68k}, @cputype{mips}, @cputype{mipsel},
@c @cputype{powerpc}, @cputype{s390}, @cputype{sparc}, and @cputype{x86_64}
@c @acronym{CPU}s,
@c @c (see e.g.@:  @uref{http://buildd.debian.org/build.php?&pkg=r-base}),
@c @c Actually, see http://packages.debian.org/unstable/math/r-base-core as
@c @c the build daemon is not used for all platforms; note also that Debian
@c @c has x86_64 <=> amd, ix86 <=> i386.
@c @samp{i386-@/apple-@/darwin}, @samp{x86_64-@/apple-@/darwin},
@c @samp{i386-@/sun-@/solaris}, @samp{sparc-@/sun-@/solaris},
@c @samp{x86_64-@/*-@/freebsd}, and @samp{powerpc-@/ibm-@/aix6*} as well as
@c perhaps (it is tested less frequently on these platforms)
@c @samp{i386-@/*-@/freebsd}, @samp{i386-@/*-@/netbsd} and
@c @samp{i386-@/*-@/openbsd}.

@R{}은 @samp{@var{cpu}-*-linux-gnu}를 포함하여 
@cputype{alpha}, @cputype{arm}, @cputype{hppa}, @cputype{ix86},
@cputype{ia64}, @cputype{m68k}, @cputype{mips}, @cputype{mipsel},
@cputype{powerpc}, @cputype{s390}, @cputype{sparc}, 그리고 @cputype{x86_64}
@acronym{CPU},
@c (see e.g.@:  @uref{http://buildd.debian.org/build.php?&pkg=r-base}),
@c Actually, see http://packages.debian.org/unstable/math/r-base-core as
@c the build daemon is not used for all platforms; note also that Debian
@c has x86_64 <=> amd, ix86 <=> i386.
@samp{i386-@/apple-@/darwin}, @samp{x86_64-@/apple-@/darwin},
@samp{i386-@/sun-@/solaris}, @samp{sparc-@/sun-@/solaris},
@samp{x86_64-@/*-@/freebsd}, 그리고 @samp{powerpc-@/ibm-@/aix6*}와 같은 유닉스 또는 유닉스와 비슷한 플랫폼 위에 구성될 수 있습니다.
아마도 @samp{i386-@/*-@/freebsd}, @samp{i386-@/*-@/netbsd} 그리고
@samp{i386-@/*-@/openbsd} 에서도 가능할 것입니다 (이 플랫폼들 위에서는 많은 테스트를 거치지 않았습니다).

@cindex Linux
@cindex OS X
@c In addition, binary distributions are available for some common Linux
@c distributions and for OS X (formerly Mac OS).  See the @acronym{FAQ} for
@c current details.  These are installed in platform-specific ways, so for
@c the rest of this chapter we consider only building from the sources.
또한, 일부 많이 쓰이는 리눅스 배포들과 OS X (이전의 Mac OS)를 위한 바이너리 배포들이 있습니다.
더 자세한 사항은 @acronym{FAQ}를 살펴보세요.
이들은 플랫폼에 맞춘 특정한 방식으로 설치됩니다.
이 챕터의 나머지 부분에서는 소스로부터 직접 구축하는 것에 대해서만 알아볼 것입니다.

@menu
* Simple compilation::          
* Help options::                
* Making the manuals::          
* Installation::                
* Uninstallation::              
* Sub-architectures::           
* Other Options::               
* Testing a Unix-alike Installation::  
@end menu

@node Simple compilation, Help options, Installing R under Unix-alikes, Installing R under Unix-alikes
@c @section Simple compilation
@section 간단한 컴파일하기

@c First review the essential and useful tools and libraries in
@c @ref{Essential and useful other programs under a Unix-alike}, and install
@c those you
@enindex TMPDIR
@c want or need.  Ensure that the environment variable @env{TMPDIR} is
@c either unset (and @file{/tmp} exists and can be written in and scripts
@c can be executed from) or points to a valid temporary directory (one from
@c which execution of scripts is allowed).
먼저 @ref{Essential and useful other programs under a Unix-alike}에 나열한 필수적이고 유용한 도구들과 라이브러리들에 대해서 알아보고, 당신이 원하거나 필요한 것들을 설치하도록 합니다. 
@enindex TMPDIR
먼저 환경변수 @env{TMPDIR}가 지정되어 있지 않는지 (그리고 @file{/tmp}가 존재하며 쓰기 권한이 주어져 있고 스크립트가 이곳으로부터 실행이 가능한지를 확인하고) 또는 (스크립트의 실행이 가능한) 유효한 임시디렉토리를 지정하고 있는지 확인합니다.

@findex R_HOME
@c Choose a place to install the @R{} tree (@R{} is not just a binary, but
@c has additional data sets, help files, font metrics etc).  Let us call
@c this place @var{R_HOME}.  Untar the source code.  This should create
@c directories @file{src}, @file{doc}, and several more under a top-level
@c directory: change to that top-level directory (At this point North
@c American readers should consult @ref{Setting paper size}.)  Issue the
@c following commands:
@R{} 트리가 설치될 장소를 선택하세요 (@R{}은 단순한 바이너리가 아닌 추가적인 데이터셋, 도움말 파일, 그리고 글꼴 모양에 대한 정보를 가집니다). 
이 장소를 @var{R_HOME}이라고 부르도록 합니다.
소스코드의 압축으르 풉니다.
이 과정은 @file{src}, @file{doc}, 그리고 최상위 레벨 디렉토리 아래에 몇 가지 디렉토리를 더 생성할 것입니다. 
(여기에서 북미지역의 독자들은 반드시 @ref{Setting paper size}를 살펴보길 바랍니다.)
다음의 명령을 실행합니다:

@findex configure

@example
./configure
make
@end example

@noindent
@c (See @ref{Using make} if your make is not called @samp{make}.)  Users of
@c Debian-based 64-bit systems@footnote{which use @file{lib} rather than
@c @file{lib64} for their primary 64-bit library directories.} may need
(만약 당신이 사용하는 make가 @samp{make}가 아니라면 @ref{Using make}를 살펴보시길 바랍니다.)
64 비트 기반의 데비안 사용자은 아마도 아래와 같이 명령을 실행해야 할 수도 있습니다.
@footnote{which use @file{lib} rather than @file{lib64} for their primary 64-bit library directories.}


@example
./configure LIBnn=lib
make
@end example

@c Then check the built system works correctly by
그리고 난 뒤 다음의 명령어를 이용하여 구축한 시스템이 올바르게 작동하는지를 확인합니다. 

@example
make check
@end example

@noindent
@c Failures are not necessarily problems as they might be caused by missing
@c functionality,@footnote{for example, if you configured @R{} with
@c @option{--without-recommended}.} but you should look carefully at any
@c reported discrepancies.  (Some non-fatal errors are expected in locales
@c that do not support Latin-1, in particular in true @code{C} locales and
@c non-UTF-8 non-Western-European locales.)  A failure in
@c @file{tests/ok-errors.R} may indicate inadequate resource limits
@c (@pxref{Running R}).
설치의 실패는 관련 기능이 설치되어 있지 않아 발생하는 경우가 많지만, 
@footnote{예를들어, 만약에 @option{--without-recommended}이라는 옵션과 함께 @R{}의 환경을 확인해보지 않았다면}
어떤 부분이 이를 야기시키는지에 대해서 보고된 내용을 주의깊게 읽어보시길 바랍니다.
(일부 치명적이지 않은 에러가 Latin-1을 지원하지 않는 로케일에서 발생할 것입니다.
더 정확하게 말하면 @code{C} 로케일 그리고 UTF-8이 아니거나 Western-European 로케일이 않닌 로케일입니다).
파일 @file{tests/ok-errors.R} 내에서의 실패는 아마도 부족한 자원의 한계를 의미할 것입니다 (@pxref{Running R}).

@c More comprehensive testing can be done by
좀 더 심도있는 테스트를 위하여 다음의 명령어를 이용해 볼 수 있습니다.

@example
make check-devel
@end example

@noindent
@c or
또는 

@example
make check-all
@end example

@noindent
@c see file @file{tests/README}.
파일 @file{tests/README}을 읽어보시길 바랍니다.

@c If the command @command{configure} and @command{make} commands execute
@c successfully, a shell-script front-end called @file{R} will be created
@c and copied to @file{@var{R_HOME}/bin}.  You can copy this script to a
@c place where users can invoke it, for example to @file{/usr/local/bin/R}.
@c You could also copy the man page @file{R.1} to a place where your
@c @command{man} reader finds it, such as @file{/usr/local/man/man1}.  If
@c you want to install the complete @R{} tree to, e.g.,
@c @file{/usr/local/lib/R}, see @ref{Installation}.  Note: you do not
@c @emph{need} to install @R{}: you can run it from where it was built.
만약 @command{configure}과 @command{make}이라는 명령어들이 성공적으로 사용되었다면, 쉘스크립트로 작성된 @file{R}이라는 파일이 생길 것이고 이는 @file{@var{R_HOME}/bin}에 복사될 것입니다. 
이 스크립트를 복사하여 사용자가 이를 실행시키고자 하는 곳에 붙여넣을 수 있습니다.
예를들어, @file{/usr/local/bin/R}에 복사할 수 있습니다.
또한 @file{R.1}이라는 도움말 페이지를 복사하여 사용자의 @command{man} 리더(reader)가 이를 찾을 수 있는 곳으로 복사할 수 있습니다.
예를들면, @file{/usr/local/man/man1}이라는 곳입니다.
만약, 완전한 @R{} 트리를 @file{/usr/local/lib/R}에 설치하고 싶다면 @ref{Installation}를 살펴보세요.
노트: 실제로는 @R{}을 꼭 설치할 필요는 없습니다.
그 이유는 이것이 구축된 곳으로부터 실행할 수 있기 때문입니다.

@c You do not necessarily have to build @R{} in the top-level source
@c directory (say, @file{@var{TOP_SRCDIR}}).  To build in
@c @file{@var{BUILDDIR}}, run
@R{}을 꼭 최상위 소스 디렉토리 (이를 편의상 @file{@var{TOP_SRCDIR}}이라고 해봅니다) 내에서 빌드할 필요는 없습니다.
@file{@var{BUILDDIR}} 내에서 빌드해보고자 한다면 아래와 같이 할 수 있습니다.

@findex configure

@example
cd @var{BUILDDIR}
@var{TOP_SRCDIR}/configure
make
@end example

@noindent
@c and so on, as described further below.  This has the advantage of always
@c keeping your source tree clean and is particularly recommended when you
@c work with a version of @R{} from Subversion.  (You may need
@c @acronym{GNU} @command{make} to allow this, and you will need no spaces
@c in the path to the build directory.)
이렇게 하는 것은 소스트리를 깔끔하게 유지할 수 있다는 장점이 있으며 만약 당신 서브버전으로부터 얻은 @R{}의 버전과 함께 작업을 할 때 권장되어집니다 (이를 위해서는 @acronym{GNU} @command{make}가 필요할 것입니다).

@c @c For those obtaining @R{} @emph{via} Subversion, one additional step is
@c @c necessary:
@c @c @cindex Vignettes
@c @c @cindex Subversion

@c @c @example
@c @c make vignettes
@c @c @end example

@c @c @noindent
@c @c which makes the @pkg{grid} vignettes (which are contained in the
@c @c tarballs): it make take several minutes.

@c Now @code{rehash} if necessary, type @kbd{R}, and read the @R{} manuals
@c and the @R{} @acronym{FAQ} (files @file{FAQ} or
@c @file{doc/manual/R-FAQ.html}, or
@c @uref{http://CRAN.R-project.org/@/doc/@/FAQ/@/R-FAQ.html} which always
@c has the version for the latest release of @R{}).
만약 필요하다면, @code{rehash}를 수행한 뒤에 @kbd{R}이라고 입력하고 @R{} 매뉴얼들과 @R{} @acronym{FAQ} (가장 최근에 릴리즈된 @R{}과 함께 제공되는 @file{FAQ} 또는 @file{doc/manual/R-FAQ.html}, 또는 @uref{http://CRAN.R-project.org/@/doc/@/FAQ/@/R-FAQ.html}의 파일들)을 읽어보세요.


@node Help options, Making the manuals, Simple compilation, Installing R under Unix-alikes
@c @section Help options
@section 도움말 옵션

@c By default @HTML{} help pages are created when needed rather than being
@c built at install time.
기본적으로 @HTML{} 도움말 페이지는 설치될 때에 구축되는 것이 아니라 필요할 때 생성됩니다. 

@c If you need to disable the server and want HTML help, there is the
@c option to build @HTML{} pages when packages are installed
@c (including those installed with @R{}).  This is enabled by the
@c @command{configure} option @option{--enable-prebuilt-html}.  Whether
@c @command{R CMD INSTALL} (and hence @code{install.packages}) pre-builds
@c @HTML{} pages is determined by looking at the @R{} installation and is
@c reported by @command{R CMD INSTALL --help}: it can be overridden by
@c specifying one of the @command{INSTALL} options @option{--html} or
@c @option{--no-html}.
만약 서버가 비활성화 된 상태에서 HTML 도움말을 사용하기를 원한다면, 패키지들이 설치될 때 (R과 함께 설치되는 것들도 포함) HTML페이지들을 빌드하도록 하는 옵션이 제공됩니다.
이는 @command{configure} 사용시 @option{--enable-prebuilt-html} 이라는 옵션을 통해서 이루어지게 됩니다.
@command{R CMD INSTALL} (즉, @code{install.packages})이라는 명령이 @HTML{} 페이지들의 설치준비를 하는 것은 @R{} 설치를 살펴봄으로서 알수 있고 @command{R INSTALL --help}에 의하여 보고 되어집니다.
이것은 @command{INSTALL}과 함께 쓰이는 @option{--html} 또는 @option{--no-html}이라는 옵션을 통하여 조절될 수 있습니다.

@c The server is disabled by setting the environment variable
@enindex R_DISABLE_HTTPD
@c @env{R_DISABLE_HTTPD} to a non-empty value, either before @R{} is
@c started or within the @R{} session before @HTML{} help (including
@c @code{help.start}) is used.  It is also possible that system security
@c measures will prevent the server from being started, for example if the
@c loopback interface has been disabled.  See
@c @code{?tools::startDynamicHelp} for more details.
서버는 @R{}이 시작되기 전 또는 HTML 도움말 (@code{help.start}의 사용을 포함함)이 사용되기 전의 @R{} 세션 내에서 환경 변수 @env{R_DISABLE_HTTPD}에 비어있지 않은 값으로 설정함으로서 비활성화 될 수 있습니다. 
또한, 만약 loopback 인터페이스가 비활성화된 경우와 같이 시스템 보안과 관련된 사항들은 서버의 시작을 방해할 수도 있습니다. 
더 자세한 내용은 @code{?tool::startDynamicHelp}를 살펴보시길 바랍니다.

@node Making the manuals, Installation, Help options, Installing R under Unix-alikes
@c @section Making the manuals
@section 매뉴얼 생성하기
@cindex Manuals

@c There is a set of manuals that can be built from the sources,
소스로부터 빌드될 수 있는 매뉴얼들이 있습니다. 

@table @samp
@item fullrefman
@c Printed versions of all the help pages for base and recommended packages
@c (over 3300 pages).
베이스(base)와 추천(recommended) 패키지들에 대한 모든 도움말 페이지들이 프린트된 버전입니다 (대략 3300 페이지 분량입니다).
@item refman
@c Printed versions of the help pages for selected base packages (over 1900 pages)
선택되어진 일부 base 패키지들에 대한 도움말 페이지들이 프린트된 버전입니다 (1900 페이지가 넘습니다). 
@item R-FAQ
R @acronym{FAQ}
@item R-intro
``An Introduction to R'' (입문서).
@item R-data
``R Data Import/Export'' (데이터 입출력).
@item R-admin
``R Installation and Administration'' (설치 및 관리문서).
@item R-exts
``Writing R Extensions'' (익스텐션 작성하기).
@item R-lang
``The R Language Definition'' (랭귀지 정의서).
@end table

@noindent
@c To make these (with @samp{fullrefman} rather than @samp{refman}), use
@samp{refman} 보다 @samp{fullrefman}와 함께 이 문서들을 생성하기 위해서는 다음의 명령어를 이용하면 됩니다. 

@c @example
@c make pdf      @r{to create PDF versions}
@c make info     @r{to create info files (not @samp{refman} nor @samp{fullrefman}).}
@c @end example

@example
make pdf      @r{PDF 버전 생성}
make info     @r{ @samp{refman}도 아니고 @samp{fullrefman}도 아닌 info 파일 생성.}
@end example

@c You will not be able to build any of these unless you have
@c @command{makeinfo} version 4.7 or later installed, and for PDF you must
@c have @command{texi2dvi} and @file{texinfo.tex} installed (which are part
@c of the @acronym{GNU} @pkg{texinfo} distribution but are, especially
@c @file{texinfo.tex}, often made part of the @TeX{} package in
@c re-distributions).
만약 @command{makeinfo} 버전 4.7 또는 그 이후버전이 설치되어 있지 않다면 이러한 문서들을 생성할 수 없으며, PDF 문서를 생성하기 위해서는 반드시 @command{texi2dvi}와 @acronym{GNU} @pkg{texinfo} 배포의 일부분인 @file{texinfo.tex}가 설치되어 있어야 합니다.

@c The PDF versions can be viewed using any recent PDF viewer: they have
@c hyperlinks that can be followed.  The info files are suitable for
@c reading online with Emacs or the standalone @acronym{GNU} @command{info}
@c program.  The PDF versions will be created using the paper size selected
@c at configuration (default ISO a4): this can be overridden by setting
@c @env{R_PAPERSIZE}
@enindex R_PAPERSIZE
@c on the @command{make} command line, or setting @env{R_PAPERSIZE} in the
@c environment and using @command{make -e}.  (If re-making the manuals for
@c a different paper size, you should first delete the file
@c @file{doc/manual/version.texi}.  The usual value for North America would
@c be @samp{letter}.)
PDF 버전의 문서는 최근에 나온 어떠한 종류의 PDF 뷰어를 이용하여 볼 수 있으며, 하이퍼링크 기능이 지원됩니다.
info 파일들은 이맥스 (Emacs) 또는 독립적인 @acronym{GNU} @command{info} 프로그램에서 사용되는데 적합합니다.
PDF 버전들은 ISO 표준인 a4 용지의 크기에 맞추어 생성되지만, 이는 @command{make} 명령어 라인에서 @env{R_PAPERSIZE}를 조절하거나 @command{make -e}를 이용하여 변경할 수 있습니다.
(만약 용지의 크기를 다르게 하여 매뉴얼을 재생성하고 싶다면 @file{doc/manual/version.texi}를 먼저 삭제해야 합니다. 
북미에서는 기본값이 @samp{letter} 사이즈로 되어 있습니다).

@c There are some issues with making the PDF reference manual,
@c @file{refman.pdf} or @file{fullrefman.pdf}.  The help files contain both
@c ISO Latin1 characters (e.g.@: in @file{text.Rd}) and upright quotes,
@c neither of which are contained in the standard @LaTeX{} Computer Modern
@c fonts.  We have provided four alternatives:
PDF 형식의 레퍼런스 매뉴얼, @file{refman.pdf} 또는 @file{fullrefman.pdf}을 생성하는데는 몇가지 이슈들이 있습니다.
도움말 파일들은 표준 @LaTeX{} Computer Modern 글꼴에는 포함되어 있지 않은 ISO Latin1 문자들 (즉, @: @file{text.Rd})와 오른쪽 큰 따옴표를 포함하고 있습니다. 
우리는 다음과 같은 네가지 대안을 제공하고 있습니다. 

@table @code
@item times
@c (The default.) Using standard PostScript fonts, Times Roman, Helvetica
@c and Courier.  This works well both for on-screen viewing and for
@c printing.  One disadvantage is that the Usage and Examples sections may
@c come out rather wide: this can be overcome by using @emph{in addition}
@c either of the options @code{beramono} or @code{inconsolata} (which is
@c part of the current default), which replace the Courier monospaced font
@c by Bera Sans mono or Inconsolata respectively.  (You will need the
@c appropriate @LaTeX{} package @pkg{bera} or @pkg{inconsolata}
@c installed.@footnote{Debian/Ubuntu use a rather old version of TeXLive
@c and so need Debian package @samp{texlive-fonts-extra} installed.  Fedora
@c prior to 18 used an even older version of TeXLive: the best option is to
@c update to TeXLive 2012, from the sources or see
@c @uref{http://fedoraproject.org/wiki/Features/TeXLive}.})
기본적으로 제공되는 방법은 표준 포스트스크립트(postscript) 글꼴, Times Roman, Helvertica와 Courier 글꼴을 이용합니다.
이것은 화면상으로 보거나 출력하는데 있어서 모두 잘 작동합니다.
한가지 단점은 Usage(사용법)과 Examples(예제들) 섹션들이 다소 본래의 크기보다 넓게 출력될 수 있습니다. 
이것은 @code{beramono} 또는 @code{inconsolata} 옵션들 중 하나를 이용하여 해결할 수 있습니다. 
이 옵션은 Courier monospaced 글꼴을 Bera Sans mono 또는 Iconsolata 로 각각 대체합니다.
(@pkg{bera} 또는 @pkg{inconsolata}라는 적절한 @LaTeX{} 패키지들이 설치되어 있어야 할 것입니다).
@footnote{Debian/Ubuntu은 다소 오래된 버전의 TeXLive를 이용하므로 @samp{texlive-fonts-extra}이라는 Debian 패키지가 설치되어야 합니다.
Fedora 18이전의 버전들은 더 오래된 버전의 TeXLive를 사용하는데, 가장 좋은 방법은 소스로부터 TeXLive 2012로 업데이트 하거나 
@uref{http://fedoraproject.org/wiki/Features/TeXLive}를 살펴보시길 바랍니다.})

@c Note that in most @LaTeX{} installations this will not actually use the
@c standard fonts for PDF, but rather embed the URW clones NimbusRom,
@c NimbusSans and (for Courier, if used) NimbusMon.
대부분의  @LaTeX{} 설치에 있어서 이것은 실제로 PDF를 위한 표준 글꼴을 사용하는 것이 아니며, URW clones NimbusRom, NimbusSans, 그리고 MimbusMon을 끼워넣는 것입니다. 

@item lm
@c Using the @emph{Latin Modern} fonts.  These are not often installed as
@c part of a @TeX{} distribution, but can obtained from
@c @uref{http://www.ctan.org/@/tex-archive/@/fonts/@/ps-type1/@/lm/} and
@c mirrors.  This uses fonts rather similar to Computer Modern, but is not
@c so good on-screen as @code{times}.
@emph{Latin Modern} 글꼴들을 이용하는 것입니다. 
이것들은 @TeX{} 배포의 일부분이기 때문에 종종 설치되지 않지만, @uref{http://www.ctan.org/@/tex-archive/@/fonts/@/ps-type1/@/lm/}과 이것의 미러들로부터 얻을 수 있습니다.
이것은 Computer Modern과 다소 유사한 글꼴들을 사용하지만 @code{times}와 같이 스크린상에서 보기 좋은 글꼴은 아닙니다.

@item cm-super
@c Using type-1 versions of the Computer Modern fonts by Vladimir Volovich.
@c This is a large installation, obtainable from
@c @uref{http://www.ctan.org/@/tex-archive/@/fonts/@/ps-type1/@/cm-super/}
@c and its mirrors.  These type-1 fonts have poor hinting and so are
@c nowhere near so readable on-screen as the other three options.
Vladimir Volovich에 의해서 만들어진 Computer Modern 글꼴의 type-1 버전들을 이용하는 것입니다. 
이것은 @uref{http://www.ctan.org/@/tex-archive/@/fonts/@/ps-type1/@/cm-super/}과 이것의 미러들로부터 얻을 수 있는데, 매우 방대한 설치입니다.
이러한 type-1 글꼴은 좋지 않은 질을 가지고 있어  다른 세가지 옵션처럼 스크린상에서만 읽을 수 있을 것입니다.

@item ae
@c A package to use composites of Computer Modern fonts.  This works well
@c most of the time, and its PDF is more readable on-screen than the
@c previous two options.  There are three fonts for which it will need to
@c use bitmapped fonts, @file{tctt0900.600pk}, @file{tctt1000.600pk} and
@c @file{tcrm1000.600pk}.  Unfortunately, if those files are not available,
@c Acrobat Reader will substitute completely incorrect glyphs so you need
@c to examine the logs carefully.
Computer Modern 글꼴의 복합체를 이용하는 패키지입니다. 
이것은 대부분의 경우에 잘 작동하며 이것의 PDF 버전은 이전의 두가지 옵션들보다 더욱 읽기에 좋은 질을 가집니다. 
비트맵된 글꼴, @file{tctt0900.600pk}, @file{tctt1000.600pk} 그리고, @file{tcrm1000.600pk} 을 이용해야하는 세가지 글꼴들이 있습니다.
아쉽게도 이러한 파일들을 이용할 수 없다면, 아크로뱃 리더는 잘못된 상형문자로 대체하게 될 것입니다.
따라서, 로그를 주의깊게 살펴보아야 합니다.  
@end table

@c The default can be overridden by setting the environment variable
@enindex R_RD4PDF
@c @env{R_RD4PDF}.  (On Unix-alikes, this will be picked up at install time
@c and stored in @file{etc/Renviron}, but can still be overridden when the
@c manuals are built.)  The default value for @env{R_RD4PDF} is
@c @samp{times,inconsolata,hyper}: omit @samp{hyper} if you do not want
@c hyperlinks (e.g.@: for printing the manual) or do not have @LaTeX{}
@c package @pkg{hyperref}, and omit @samp{inconsolata} if you do not have
@c @LaTeX{} package @pkg{inconsolata} installed.
기본값들은 @env{R_RD4PDF}이라는 환경변수를 조절함으로서 변경될 수 있습니다.
(유닉스와 같은 환경에서는 이것은 설치하는 도중 조정되고 이는 @file{etc/Renviron} 파일에 저장될 것입니다).
@env{R_RD4PDF}에 대한 기본값은 @samp{times,inconsolata,hyper}입니다.
만약 하이퍼링크를 원하지 않거나 @LaTeX{} 패키지 @pkg{hyperref}를 가지고 있지 않다면 @samp{hyper}를 지워버리세요 (즉, @: 매뉴얼을 프린트할 경우입니다). 
또한 만약에 @LaTeX{} 패키지 @pkg{inconsolata}가 설치되어 있지 않다면 @samp{inconsolata}를 삭제하세요.


@node Installation, Uninstallation, Making the manuals, Installing R under Unix-alikes
@c @section Installation
@section 설치
@cindex Installation

@c To ensure that the installed tree is usable by the right group of users,
@c set @code{umask} appropriately (perhaps to @samp{022}) before unpacking
@c the sources and throughout the build process.
설치된 트리가 올바른 그룹내의 사용자들에 의해서 사용될 수 있게 하기 위해서는 소스의 압축을 풀기 전에 @code{umask}가 올바르게 설정되어야 하고, 빌드과정 동안 유지되어야 합니다.

@c After
설치를 위해서는 다음과 같은 명령어를 입력합니다.

@findex configure
@example
./configure
make
make check
@end example

@noindent
@c (or, when building outside the source,
@c @code{@var{TOP_SRCDIR}/configure}, etc) have been completed
@c successfully, you can install the complete @R{} tree to your system by
@c typing
(소스 밖에서 빌드할때에는 @code{@var{TOP_SRCDIR}/configure}라고 합니다).
위의 명령어가 성공적으로 수행되었다면, 완전한 @R{} 트리를 시스템에 다음의 명령어를 이용하여 설치할 수 있습니다.

@example
make install
@end example

@noindent
@c A parallel make can be used (but run @command{make all} first).
make를 병렬식으로 사용할 수도 있습니다 (그러나 @command{make all}을 먼저 수행하세요).

@c This will install to the following directories:
위의 명령어는 다음과 같은 디렉토리에 설치를 진행할 것입니다. 

@table @asis
@item @file{@var{prefix}/bin} or @file{@var{bindir}}
@c the front-end shell script and other scripts and executables
사용자가 사용할 수 있는 쉘 스크립트와 다른 스크립트들, 그리고 실행가능한 것들
@item @file{@var{prefix}/man/man1} or @file{@var{mandir}/man1}
@c the man page
도움말 페이지 
@item @file{@var{prefix}/@var{LIBnn}/R} or @file{@var{libdir}/R}
@c all the rest (libraries, on-line help system, @dots{}).  Here
@c @var{LIBnn} is usually @samp{lib}, but may be @samp{lib64} on some
@c 64-bit Linux systems.  This is known as the @R{} home directory.
위의 것을 제외한 모든 것 (즉, 라이브러리들, 온라인 도움말 시스템, @dots{}).
여기에서 @var{LIBnn}은 일반적으로 @samp{lib}이지만, 일부 64-비트 리눅스 시스템에서는 @samp{lib64}입니다.
이곳은 @R{} 홈 디렉토리라고 알려져 있습니다. 
@end table

@noindent
@c where @var{prefix} is determined during configuration (typically
@c @file{/usr/local}) and can be set by running @command{configure} with
@c the option @option{--prefix}, as in
여기에서 @var{prefix}는 설정을 하는동안 결정되게 되며 (일반적으로는 @file{/usr/local}입니다) @command{configure} 명령어를 @option{--prefix} 옵션을 아래와 같이 사용함으로서 설정될 수 있습니다. 

@findex configure
@example
./configure --prefix=/where/you/want/R/to/go
@end example

@noindent
@c This causes @command{make install} to install the @R{} script to
@c @file{/where/you/want/R/to/go/bin}, and so on.  The prefix of the
@c installation directories can be seen in the status message that is
@c displayed at the end of @command{configure}.  You can install into
@c another directory tree by using
이것은  @command{make install}를 실행시 @R{} 스크립트가 @file{/where/you/want/R/to/go/bin}이라는 곳에 설치하도록 해줍니다.
설치디렉토리에 대한 prefix 는  @command{configure} 명령어를 사용한 맨 마지막에 보여지는 상태관련 메시지에서 확인이 가능합니다. 
만약 다른 디렉토리 트리에 설치하고 싶다면 최소한  @acronym{GNU} @command{make}가 설치된 상태에서 다음의 명령어를 이용하면 됩니다 (그리고 현재 솔라리스와 FreeBSD @command{make}도 괜찮지만, 일부 오래된 버전의 유닉스 makes는 아닙니다). 

@example
make prefix=/path/to/here install
@end example

@noindent
@c at least with @acronym{GNU} @command{make} (and current Solaris and
@c FreeBSD @command{make}, but not some older Unix makes).


@c More precise control is available at configure time via options: see
@c @command{configure --help} for details.  (However, most of the `Fine
@c tuning of the installation directories' options are not used by @R{}.)
좀 더 정교한 조정은 환경설정시에 옵션들을 통하여 이루어질 수 있습니다.
더 자세한 내용은 @command{configure --help}를 살펴보세요.
(그러나, 대부분의 'Fine tuning of the installation directories' 옵션들은 @R{}에 의하여 사용되는 것이 아닙니다).

@c Configure options @option{--bindir} and @option{--mandir} are supported
@c and govern where a copy of the @command{R} script and the @command{man}
@c page are installed.
@command{R} 스크립트의 복사를 만들고 @command{man} 페이지의 설치를 조정할 수 있는 환경설정 옵션들 @option{--bindir}과 @option{--mandir}이 지원됩니다.

@c The configure option @option{--libdir} controls where the main @R{}
@c files are installed: the default is @samp{@var{eprefix}/@var{LIBnn}},
@c where @var{eprefix} is the prefix used for installing
@c architecture-dependent files, defaults to @var{prefix}, and can be set
@c via the configure option @option{--exec-prefix}.
@option{--libdir} 옵션은 주 @R{} 파일들이 어디에 설치되어야 하는지를 조정합니다.
기본값은 @samp{@var{eprefix}/@var{LIBn}}인데, @var{eprefix}는 아키텍쳐-의존 파일들을 설치하는데 사용되는 prefix 이며, @var{prefix}에 대한 기본값입니다. 
그리고 환경설정 옵션 @option{--exec-prefix}를 통하여 설정될 수 있습니다. 

@c Each of @code{bindir}, @code{mandir} and @code{libdir} can also be
@c specified on the @command{make install} command line (at least for
@c @acronym{GNU} @command{make}).
@code{bindir}, @code{mandir} 그리고 @code{libdir}은 또한 @command{make install} 명령어 라인에서 설정될 수 있습니다. 

@c The @command{configure} or @command{make} variables @code{rdocdir} and
@c @code{rsharedir} can be used to install the system-independent
@c @file{doc} and @file{share} directories to somewhere other than
@c @code{libdir}.  The C header files can be installed to the value of
@c @code{rincludedir}: note that as the headers are not installed into a
@c subdirectory you probably want something like
@c @code{rincludedir=/usr/local/include/R-@value{VERSIONno}}.
@command{configure} 또는 @command{make} 변수 @code{rdocdir}과 @code{rsharedir}는 시스템-독립적으로 @file{doc}과 @file{share} 디렉토리들을 @code{libdir}이 아닌 다른곳에 설치하게 할 수 있습니다. 
C 헤더파일들은  @code{rincludedir}의 값에 설치되어질 수 있습니다.
헤더들은 하위디렉토리에 설치되지 않기 때문에 아마도  @code{rincludedir=/usr/local/include/R-@value{VERSIONno}} 와 같은 것을 원할 수 있습니다. 

@c If you want the @R{} home to be something other than
@c @file{@var{libdir}/R}, use @option{rhome}: for example
만약 @R{} 홈이 @file{@var{libdir}/R}이 아닌 다른 곳으로 설정하기 원하다면 @option{rhome} 옵션을 이용하세요.
예를들면, 다음과 같습니다. 

@example
make install rhome=/usr/local/lib64/R-2.15.0
@end example

@noindent
@c will use a version-specific @R{} home on a Linux 64-bit system.
위의 명령어는 리눅스 64 비트 시스템에서 버전별 @R{} 홈디렉토리를 이용하는 것입니다. 

@c If you have made @R{} as a shared/dynamic library you can install it in
@c your system's library directory by
만약  @R{}을 shared/dynamic 라이브러리로서 만들고 싶다면 시스템의 라이브러리 디렉토리내에 이것들을 아래와 같은 방법으로 설치할 수 있습니다.

@example
make prefix=/path/to/here install-libR
@end example

@noindent
@c where @code{prefix} is optional, and @code{libdir} will give more
@c precise control.
여기에서 @code{prefix}는 선택사항이며, @code{libdir}은 좀 더 정교한 조절을 하게 됩니다.

@example
make install-strip
@end example

@noindent
@c will install stripped executables, and on platforms where this is
@c supported, stripped libraries in directories @file{lib} and
@c @file{modules} and in the standard packages.
위의 명령어 사용은 stripped executables을 설치할 것이고 이것이 지원이되는 플랫폼들에서 @file{lib} 디렉토리내의 라이브러리들과 표준 패키지들의 @file{modules}들을  stripped 합니다.

@c Note that installing @R{} into a directory whose path contains spaces is
@c not supported, and at least some aspects (such as installing source
@c packages) will not work.
@c @c The main problem is the Makefile include in etc/Makeconf
@R{}은 공백이 존재하는 경로명에는 설치되지 않으며, 최소한 (소스 패키지들을 설치하는 것과 같은) 일부 기능들은 작동하지 않을 것입니다.

@cindex Manuals, installing

@c To install info and PDF versions of the manuals, use one or more of
info와 PDF 버전의 매뉴얼들을 설치하기 위해서는 아래의 명령들 중 하나를 이용합니다. 

@example
make install-info
make install-pdf
@end example

@noindent
@c Once again, it is optional to specify @code{prefix}, @code{libdir} or
@c @code{rhome} (the PDF manuals are installed under the @R{} home
@c directory).  (@command{make install-info} needs Perl installed if there
@c is no command @command{install-info} on the system.)
다시 언급하건데, @code{prefix}, @code{libdir} 또는 @code{rhome}을 지정하는 것은 선택사항입니다 (PDF 매뉴얼들은 @R{} 홈디렉토리에 설치됩니다). 
(@command{make install-info}는 만약 @command{install-info} 명령이 시스템에 없다면 Perl 이 설치되어 있어야 합니다)

@c More precise control is possible.  For info, the setting used is that of
@c @code{infodir} (default @file{@var{prefix}/info}, set by configure
@c option @option{--infodir}).  The PDF files are installed into the @R{}
@c @file{doc} tree, set by the @command{make} variable @code{rdocdir}.
좀 더 정교한 조절이 가능합니다.
info의 경우에 사용된 설정은 @code{infodir}의 값입니다 (기본값은 환경설정 옵션 @option{--infodir}에 의하여 조정되는 @file{@var{prefix}/info}입니다).
PDF 파일들은 @R{} @file{doc} 트리에 설치되며, @command{make} 변수 @code{rdocdir}에 의해서 조정됩니다. 

@c A staged installation is possible, that it is installing @R{} into a
@c temporary directory in order to move the installed tree to its final
@c destination.  In this case @code{prefix} (and so on) should reflect the
@enindex DESTDIR
@c final destination, and @env{DESTDIR} should be used: see
@c @uref{http://www.gnu.org/@/prep/@/standards/@/html_node/@/DESTDIR.html}.
스테이지된 설치 또한 가능합니다. 
즉, 최종목적에 설치된 트리를 옮기기 위해서 @R{}을 임시디렉토리에 설치하는 것입니다. 
이 경우에는 @code{prefix}는 최종목적지를 반드시 지정해야 하며, @env{DESTDIR}이 사용되어야 합니다. 
이에 대해서는 @uref{http://www.gnu.org/@/prep/@/standards/@/html_node/@/DESTDIR.html}를 살펴보세요.

@c You can optionally install the run-time tests that are part of
@c @command{make check-all} by
@command{make check-all}의 일부분인 런타임 테스트를 선택적으로 설치를 아래의 명령어로 수행할 수 있습니다.
이는 @file{tests} 디렉토리를 설치시 추가적으로 생성합니다.

@example
make install-tests
@end example

@noindent
@c which populates a @file{tests} directory in the installation.


@node Uninstallation, Sub-architectures, Installation, Installing R under Unix-alikes
@c @section Uninstallation
@section 제거

@c You can uninstall @R{} by
다음과 같은 방법으로 @R{}을 제거할 수있습니다. 

@example
make uninstall
@end example

@noindent
@c optionally specifying @code{prefix} etc in the same way as specified for
@c installation.
설치에서 지정했던 것과 같은 방법으로  @code{prefix}와 그 밖의 것들을 선택적으로 지정할 수 있습니다. 

@c This will also uninstall any installed manuals.  There are specific
@c targets to uninstall info and PDF manuals in file
@c @file{doc/manual/Makefile}.
이것은 또한 설치된 어떠한 매뉴얼들도 함께 삭제합니다.
@file{doc/manual/Makefile} 파일내에 info와 PDF 매뉴얼들을 삭제해야할 정확한 대상들이 있습니다.

@c Target @code{uninstall-tests} will uninstall any installed tests, as
@c well as removing the directory @file{tests} containing the test results.
@code{uninstall-tests} 대상들은 마치 테스트 결과들을 가지고 있는 @file{tests} 디렉토리를 제거하는 것과 같이 설치된 테스트들을 삭제할 것입니다.

@node Sub-architectures, Other Options, Uninstallation, Installing R under Unix-alikes
@c @section Sub-architectures
@section 서브-아키텍쳐

@c Some platforms can support closely related builds of @R{} which can
@c share all but the executables and dynamic objects.  Examples include
@c builds under Solaris for different chips (in particular, 32- and 64-bit
@c builds), 64- and 32- bit builds on @cputype{x86_64} Linux and different
@c @acronym{CPU}s (e.g.@: @cputype{i386} and @cputype{x86_64}) under (Mac)
@c OS X.
@R{}은 일부 플랫폼들은 실행가능한 파일들과 동적 객체들을 제외한 나머지들을 공유할 수 있는 연동형 빌드를 지원합니다.
예를들면 솔라리스에서 서로 다른 칩들에 대한 빌드 (특히, 32와 64비트 빌드), @cputype{x86_64} 리눅스에서의 64와 32비트 빌드, 그리고 (Mac) OS X에서 서로 다른 @acronym{CPU}들(즉, @: @cputype{i386}과  @cputype{x86_64})에 빌드와 같은 것입니다.

@c @R{} supports the idea of architecture-specific builds, specified by
@c adding @samp{r_arch=@var{name}} to the @command{configure} line.  Here
@c @var{name} can be anything non-empty, and is used to name subdirectories
@c of @file{lib}, @file{etc}, @file{include} and the package @file{libs}
@c subdirectories.  Example names from other systems are the use of
@c @file{sparcv9} on Sparc Solaris and @file{32} by @command{gcc} on
@c @cputype{x86_64} Linux.
@R{}은 아키텍쳐에 맞춘 빌드가 가능하게 지원하며, 이는 @samp{r_arch=@var{name}}을 @command{configure} 라인에 추가함으로서 이루어집니다.
여기에서  @var{name}은 비어있지 않게 그 어떠한 것도 될 것도 될 수 있으며, @file{lib}, @file{etc}, @file{include}들의 서브디렉토리들과 패키지 @file{libs} 서브디렉토리들을 명명하는데 이용됩니다.
Sparc Solaris에서 @file{sparcv9}이라는 이름의 사용과 @cputype{x86_64} 리눅스에서 @command{GCC}에 의한 @file{32}의 사용이 대표적인 예입니다.

@c If you have two or more such builds you can install them over each other
@c (and for 32/64-bit builds on one architecture, one build can be done
@c without @samp{r_arch}).  The space savings can be considerable: on
@c @cputype{x86_64} Linux a basic install (without debugging symbols) took
@c 63Mb, and adding a 32-bit build added 6Mb.  If you have installed
@c multiple builds you can select which build to run by
만약 그러한 빌드들을 두 개 이상 가지고 있다면 이들간에 서로 사용이 가능하도록 설치할 수 있습니다 (그리고 하나의 아키텍쳐에 32/64 비트 빌드의 경우에는 @samp{r_arch}없이 가능합니다).
공간활용이 상당하게 됩니다.
@cputype{x86_64} 리눅스에서는 (디버깅 심볼이 없는) 기본설치는 63Mb를 차지하고 32비트 빌드는 6Mb를 더하게 됩니다. 
만약 다중 빌드를 설치했다면 , 당신은 어떤 빌드를 선택할 것인지 아래와 같이 실행할 수 있습니다.
@example
R --arch=@var{name}
@end example

@noindent
@c and just running @samp{R} will run the last build that was installed.
@samp{R}이라고만 실행하는 것은 마지막에 설치한 빌드를 실행하는 것입니다.

@c @code{R CMD INSTALL} will detect if more than one build is installed and
@c try to install packages with the appropriate library objects for each.
@c This will not be done if the package has an executable @code{configure}
@c script or a @file{src/Makefile} file.  In such cases you can install for
@c extra builds by
@code{R CMD INSTALL}은 하나 이상의 빌드가 설치되어 있는지와 각각에 대해서 적합한 라이브러리 객체들과 함께 패키지를 설치하고자 하는 것인지를 파악하게 됩니다.
이것은 패키지가 실행가능한 @code{configure} 스크립트 또는 @file{src/Makefile} 파일을 가지고 있지 않다면 이루어지지 않습니다.
이러한 경우에는 추가적인 빌드는 아래와 같이 수행될 수 있습니다. 

@example
R --arch=@var{name} CMD INSTALL --libs-only @var{pkg1} @var{pkg2} @dots{}
@end example

@c If you want to mix sub-architectures compiled on different platforms
@c (for example @cputype{x86_64} Linux and @cputype{i686} Linux), it is
@c wise to use explicit names for each, and you may also need to set
@c @option{libdir} to ensure that they install into the same place.
만약 다른 플랫폼들 (예를들어 @cputype{x86_64} 리눅스와 @cputype{i686} 리눅스)에서 컴파일된 서브-아키텍쳐들을 혼용하고자 한다면, 각각의 이름들을 분명히 기재하여 사용하는것이 좋은 방법입니다. 
그리고 또한 그들이 같은 위에서 설치가 되는지 확인하는 @option{libdir}를 지정하는 것이 필요할 수 있습니다. 

@c When sub-architectures are used the version of @command{Rscript} in
@c e.g.@: @file{/usr/bin} will be the last installed, but
@c architecture-specific versions will be available in e.g.@:
@c @file{/usr/lib64/R/bin/exec$@{@var{R_ARCH}@}}.  Normally all installed
@c architectures will run on the platform so the architecture of
@c @command{Rscript} itself does not matter.  The executable
@c @command{Rscript} will run the @command{R} script, and at that time the
@enindex R_ARCH
@c setting of the @env{R_ARCH} environment variable determines the
@c architecture which is run.
서브-아키텍쳐들이 사용될때에는 @file{/usr/bin/}내에 있는 파일 @command{Rscript}의 버전이 마지막에 설치된 것이지만, 아키텍쳐에 맞춘 버전들은 @file{srlib64/R/bin/exec$@{@var{R_ARCH}@}}에서 찾아볼 수 있습니다.
일반적으로 설치된 모든 아키텍쳐들은 플랫폼에서 실행되며, @command{Rscript} 자체의 아키텍쳐는 문제가 되지 않습니다.
실행이 가능한 @command{Rscript}는 @command{R} 스크립트를 실행시킬때 @env{R_ARCH}이라는 환경변수에 어떤 아키텍쳐인지를 결정하게 됩니다. 

@c When running post-install tests with sub-architectures, use
서브-아키텍쳐들과 함께 설치후 테스트는 아래와 같이 수행될 수 있습니다. 

@example
R --arch=@var{name} CMD make check[-devel|all]
@end example

@noindent
@c to select a sub-architecture to check.

@c Sub-architectures are also used on Windows, but by selecting executables
@c within the appropriate @file{bin} directory,
@c @file{@var{R_HOME}/bin/i386} or @file{@var{R_HOME}/bin/x64}.  For
@c backwards compatibility with @R{} < 2.12.0, there are executables
@c @file{@var{R_HOME}/bin/R.exe} or @file{@var{R_HOME}/bin/Rscript.exe}:
@c these will run an executable from one of the subdirectories, which one
@c being taken first from the
@enindex R_ARCH
@c @env{R_ARCH} environment variable, then from the
@c @option{--arch} command-line option@footnote{with possible values
@c @samp{i386}, @samp{x64}, @samp{32} and @samp{64}.} and finally from the
@c installation default (which is 32-bit for a combined 32/64 bit @R{}
@c installation).
서브-아키텍쳐는 윈도우즈에서 또한 사용되어지지만 적합한 @file{bin} 디렉토리, @file{@var{R_HOME}/bin/i386} 또는 @file{@var{R_HOME}/bin/x64} 내에서 실행가능한 파일들을 선택하게 됩니다. 
2.12.0 이하의 @R{}이 가지는 하위호환성(backwards compatibility)에 대해서는 @file{@var{R_HOME}/bin/R.exe} 또는 @file{@var{R_HOME}/bin/Rscript.exe}내에 실행파일들이 있습니다.
이들은 @env{R_ARCH} 환경변수에서 처음으로 취해진 서브디렉토리들중 하나로부터 실행 한뒤 @option{--arch} 커맨드라인 옵션@footnote{아마도 가능한 값들은 @samp{i386}, @samp{x64}, @samp{32}, 그리고 @samp{64}일 것입니다}으로부터 수행한 뒤 설치 기본설정으로부터 수행하게 됩니다.
 
@menu
* Multilib::                    
@end menu

@node Multilib,  , Sub-architectures, Sub-architectures
@c @subsection Multilib
@subsection Multilib

@c On Linux@footnote{mainly on RedHat and Fedora, whose layout is described
@c here.}, there is an alternative mechanism for mixing 32-bit and 64-bit
@c libraries known as @emph{multilib}. If a Linux distribution supports
@c multilib, then parallel builds of @R{} may be installed in the
@c sub-directories @file{lib} (32-bit) and @file{lib64} (64-bit).  The
@c build to be run may then be chosen using the @command{setarch}
@c command. For example, a 32-bit build may be chosen by
리눅스@footnote{여기에서는 주로 RedHat과 Fedora를 위주로 설명합니다} 상에서는 32비트와 64비트 라이브러리들을 혼용하기 위하여 @emph{multilib}이라고 알려진 라이브러리라는 대체 메카니즘이 있습니다.
만약 리눅스 배포가 multilib를 지원한다면 @R{}의 병렬빌드는 아마도 @file{lib}(32비트)와 @file{lib64}(64비트) 서브디렉토리내에 설치되어질 것입니다.
그러면, 실행될 빌드는 아마도 @command{setarch} 명령어를 이용하여 선택되어질 수 있습니다.
예를들면, 32비트 빌드는 아래와 같이 선택되어 질 수 있습니다. 

@example
setarch i686 R
@end example

@c The @command{setarch} command is only operational if both 32-bit and
@c 64-bit builds are installed. If there is only one installation of @R{},
@c then this will always be run regardless of the architecture specified
@c by the @command{setarch} command.
만약 32비트와 64비트 빌드가 모두 설치되어 있다면, @command{setarch} 명령어는 오로지 선택적 사항입니다.
만약 이들 중 하나만 설치되었다면, @command{setarch} 명령어에 의하여 지정된 아키텍쳐와 관계없이 항상 이것이 수행될 것입니다.

@c There can be problems with installing packages on the non-native
@c architecture.  It is a good idea to run e.g.@: @code{setarch i686 R} for
@c sessions in which packages are to be installed, even if that is the only
@c version of @R{} installed (since this tells the package installation
@c code the architecture needed).
non-native 아키텍쳐위에 패키지들을 설치하는데 문제가 있을 수 있습니다.
만약 설치된 @R{} 버전에 대한 선택사항이 없다면, 어떤 패키지가 설치될 세션에서 @code{setarch i686 R}을 수행하는 것은 좋은 생각입니다.
그 이유는 이것이 패키지 설치 코드에 필요한 아키텍쳐가 무엇인지 말해주기 때문입니다)

@c At present there is a potential problem with packages using Java, as
@c the post-install for a @cputype{i386} RPM on @cputype{x86_64} Linux
@c reconfigures Java and will find the @cputype{x86_64} Java.  If you know
@c where a 32-bit Java is installed you may be able to run (as root)
현재 Java를 이용한 패키지들에는 잠재적인 문제가 있습니다. 
그 이유는 @cputype{x86_64} 리눅스에서 @cputype{i386} RPM에 대한 설치후에 자바의 환경설정을 변경하고 @cputype{x86_64} Java를 찾을 것이기 때문입니다. 
만약 32비트 Jave가 설치된 곳을 알고 있다면 (루트 권한으로서) 올바른 환경설정을 위해서는 아래와 같은 명령어를 수행해야 할 것입니다.

@example
export JAVA_HOME=<path to jre directory of 32-bit Java>
setarch i686 R CMD javareconf
@end example

@noindent
@c to get a suitable setting.

@c When this mechanism is used, the version of @command{Rscript} in
@c e.g.@: @file{/usr/bin} will be the last installed, but an
@c architecture-specific version will be available in
@c e.g.@: @file{/usr/lib64/R/bin}.  Normally all installed architectures
@c will run on the platform so the architecture of @command{Rscript} does
@c not matter.
이러한 메카니즘이 사용될 때 @file{/usr/bin}내에 있는 @command{Rscript}의 버전은 설치된 마지막것이 될 것입니다. 그러나 아키텍처에 맞춘 버전은  @file{/usr/lib64/R/bin}에서 확인할 수 있습니다. 
일반적으로 설치된 모든 아키텍쳐들은 플랫폼에서 실행될 것이기 때문에 @command{Rscript}의 아키텍쳐는 문제가 되지 않습니다.

@node Other Options, Testing a Unix-alike Installation, Sub-architectures, Installing R under Unix-alikes
@c @section Other Options
@section 다른 옵션들

@c There are many other installation options, most of which are listed by
@c @command{configure --help}.  Almost all of those not listed elsewhere in
@c this manual are either standard @command{autoconf} options not relevant
@c to @R{} or intended for specialist uses by the @R{} developers.
다양한 종류의 설치 옵션들이 있습니다. 이들중 대부분은 @command{configure --help}에 의하여 나열됩니다.
이 문서의 다른곳에 나열되지 않은 옵션들의 대부분은 표준 @command{autoconf} 옵션들이거나 @R{}과는 관계가 특별히 없거나 @R{} 개발자들에 의하여 특수한 목적으로 사용되기 때문일 수 있습니다. 

@c One that may be useful when working on @R{} itself is the option
@c @option{--disable-byte-compiled-packages}, which ensures that the base
@c and recommended packages are lazyloaded but not byte-compiled.
@c (Alternatively the (make or environment) variable
@c @env{R_NO_BASE_COMPILE} can be set to a non-empty value for the duration
@c of the build.)
@R{}에서 작업을 할 때 유용할 수 있는 것은 @option{--disable-by-compiled-packages} 옵션입니다. 
이는 베이스와 추천 패키지들이 바이트컴파일 되지 앟고 레이지로드가 되었을음 확인하는 것입니다. 
(다른 방법으로는 make 또는 환경변수 @env{R_NO_BASE_COMPILE}은 빌드하는 도중에 비어있지 않은 값으로 설정될 수 있습니다).

@node Testing a Unix-alike Installation,  , Other Options, Installing R under Unix-alikes
@c @section Testing an Installation
@section  설치 확인하기

@c Full testing is possible only if the test files have been installed with
만약 아래의 명령어를 이용해서 테스트 파일들을이 설치되었더라면, 풀테스팅이 가능합니다.

@example
make install-tests
@end example

@noindent
@c which populates a @file{tests} directory in the installation.
이 명령어의 사용은 설치시 @file{tests} 디렉토리가 추가적으로 생성됩니다.

@c If this has been done, two testing routes are available.
@c The first is to move to the home directory of the @R{} installation
@c (as given by @code{R.home()}) and run
만약 이것이 사용되었었다면, 두가지 테스팅 방법이 가능합니다.
하나는 @R{} 설치 (@code{R.home()}에서 보이는 것과 같이) 홈 디렉토리 로 옮겨가서 아래의 명령어들을 수행합니다.

@example
cd tests
## followed by one of
../bin/R CMD make check
../bin/R CMD make check-devel
../bin/R CMD make check-all
@end example

@noindent
@c and other useful targets are @code{test-BasePackages} and
@c @code{test-Recommended} to the run tests of the standard and
@c recommended packages (if installed) respectively.
그리고 표준과 (만약 설치가 되어 있다면) 추천 패키지들의 테스트를 수행하기 위한 @code{test-BasePackages}와 @code{test-Recommended}는 유용합니다. 

@c This re-runs all the tests relevant to the installed @R{} (including for
@c example code in the package vignettes), but not for example the ones
@c checking the example code in the manuals nor making the standalone Rmath
@c library.  This can occasionally be useful when the operating environment
@c has been changed, for example by OS updates or by substituting the
@c @acronym{BLAS} (@pxref{Shared BLAS}).
이것은 (패키지 비그네트에 있는 예제들을 포함하여) 설치된 @R{}과 관계된 모든 테스트들을 재수행합니다. 
그러나, 독립적인 Rmath 라이브러리를 만드는 것과 매뉴얼안에 있는 예제 코드를 확인하지 않습니다. 
이것은 운영체제가 업데이트 되었거나 @acronym{BALS}가 대체된 경우와 같이 운영환경이 변경되었을때 매우 유용합니다. 

@c Alternatively, the installed @R{} can be run, preferably with
@c @option{--vanilla}.  Then
또 다른 방법으로는 설치된 @R{}을 @option{--vanilla}과 같이 수행한뒤 다음의 명령어를 이용하는 것입니다.

@example
library("tools")
testInstalledBasic("both")
testInstalledPackages(scope = "base")
testInstalledPackages(scope = "recommended")
@end example

@noindent
@c runs the basic tests and then all the tests on the standard and
@c recommended packages.  These tests can be run from anywhere: the basic
@c tests write their results in the @file{tests} folder of the @R{} home
@c directory and run slightly fewer tests than the first approach: in
@c particular they do not test Internet access.
위의 명령어는 기본 테스트를 수행하고 표준과 추천 패키지들안에 있는 모든 테스트를 수행합니다. 
이러한 테스트들은 어느곳에서든지 수행될 수 있습니다.
기본 테스트는 @R{} 홈디렉토리에 @file{tests}라는 폴더에 그 결과를 기록하고 첫번째 테스팅 방법보다 다소 적은 양의 테스트를 수행합니다.
특히 인터넷 엑세스와 같은 테스트를 하지 않습니다. 

@c These tests work best if @command{diff} (in @file{Rtools*.exe} for
@c Windows users) is in the path, and on some systems need the collation
@c locale set manually (the @R{} code tries to do so but it may not be
@c possible to reset it): so if needed try setting the environment variable
@c @env{LC_COLLATE} to @samp{C} before starting @R{}.
@enindex LC_COLLATE
이러한 테스트들은 @command{diff} (Windows 사용자에게는 @file{Rtools*.exe}내에 있습니다)이 경로상에 위치하고 있을때 가장 잘 수행되며, 일부 시스템에서는 collation 로케일 셋을 직접 조정해야 할 필요가 있습니다 (@R{} 코드가 이를 시도하지만 아마도 리셋하는것은 불가능할 것입니다).
만약 이러한 경우가 필요하다면 @R{}을 시작하기 전에 환경변수 @env{LC_COLLATE}의 값을 @samp{C}로 조정해보시길 바랍니다.

@c It is possible to test the installed packages (but not the
@c package-specific tests) by @code{testInstalledPackages} even if
@c @command{make install-tests} was not run.
@command{make install-tests}가 수행되지 않았을지라도 설치된 패키지들을 테스트 하는 것도 @code{testInstalledPackages}에 의하여 가능합니다.

@c Note that the results may depend on the language set for times and
@c messages: for maximal similarity to reference results you may want to
@c try setting
시간과 메시지들과 연관된 결과들은 언어설정에 따라 달라집니다. 
가장 비슷하게 결과를 비교할 수 있는 설정은 다음과 같습니다. 

@example
LANGUAGE=en LC_TIME=C
@end example


@node Installing R under Windows, Installing R under (Mac) OS X, Installing R under Unix-alikes, Top
@c @chapter Installing R under Windows
@chapter 윈도우즈에서 R설치하기
@cindex Installing under Windows

@c The @file{bin/windows} directory of a @acronym{CRAN} site contains
@c binaries for a base distribution and a large number of add-on packages
@c from @acronym{CRAN} to run on Windows XP or later on ix86
@c @acronym{CPU}s (including AMD64/Intel64@footnote{formerly known as
@c EM64T.} chips and Windows x64).

@acronym{CRAN} 사이트의 @file{bin/windows} 디렉토리에는 윈도우즈 XP나 그후에 나온 ix86 @acronym{CPU}s (AMD64/Intel64@footnote{이전 명칭으로 EM64T.} 칩스와 윈도우즈 x64 포함)에서 사용할수있는 기본 배포(base distribution)용 바이너리와 많은 양의 @acronym{CRAN}용 add-on 팩키지들이 포함되어있습니다. 

@c Your file system must allow long file names (as is likely except
@c perhaps for some network-mounted systems).

사용자의 파일 시스템(file system)은 긴 파일명도 수용할수있어야 합니다 (혹시 있을수있는 네트워크에 연결된 몇몇의 시스템을 제외하고 보통 다 가능함).

@c Installation is @emph{via} the installer
@c @file{@value{RWVERSION}-win.exe}.  Just double-click on the icon and
@c follow the instructions.  When installing on a 64-bit version of Windows
@c the options will include 32- or 64-bit versions of R (and the default is
@c to install both).  You can uninstall @R{} from the Control Panel.

@file{@value{RWVERSION}-win.exe} 라는 설치 프로그램을 @emph{통해서} 설치하십시요. 아이콘을 더블 클릭하신후 나오는 설명서를 참조하시면 됩니다. 64-bit 윈도우즈에 설치하실때는 32-와 64-bit 두가지 버젼의 R이 옵션에 있습니다 (기본은 두가지 버젼을 모두 설치하는 것입니다). 컨트럴 패널 (Control Panel) 안에서 @R{}을 제거할수도 있습니다, 

@c Note that you will be asked to choose a language for installation, and
@c that choice applies to both installation and un-installation but not to
@c running @R{} itself.

참고하실것은 설치 실행시 언어를 선택하게 되어있습니다, 그리고 선택하신 언어는 설치와 제거 실행시 모두 적용되지만 @R{} 자체를 실행할때는 적용이 않됩니다.

@c See the @uref{http://CRAN.R-project.org/@/bin/@/windows/@/base/@/rw-FAQ.html, R
@c Windows @acronym{FAQ}} for more details on the binary installer.

바이너리 설치 프로그램에 관한 더욱 자세한 내용은 @uref{http://CRAN.R-project.org/@/bin/@/windows/@/base/@/rw-FAQ.html, R Windows @acronym{FAQ}} 을 참고하십시요.

@menu
* Building from source::   
* Testing a Windows Installation::  
@end menu
@c Note from Chel Hee Lee on 2013-AUG-23
@c @menu 와 @end menu 사이는 번역하지 말아주세요. 
@c * 근본 출처를 이용해서 만들기::
@c * 윈도우즈용 설치 상태 시험하기::

@node Building from source, Testing a Windows Installation, Installing R under Windows, Installing R under Windows
@c @section Building from source
@section 소스로부터 빌드하기

@c @R{} can be built as either a 32-bit or 64-bit application on Windows:
@c to build the 64-bit application you need a 64-bit edition of Windows:
@c such an OS can also be used to build 32-bit @R{}.
윈도우즈상에서 @R{}은 32- 또는 64-bit 어플리케이션으로 만들어질수있습니다: 64-bit 어플리케이션을 만들려면 윈도우즈역시 64-bit 발행판이어야 합니다: 그러한 운영체제 (OS) 안에서 32-bit @R{}을 만드는것도 가능합니다. 

@c The standard installer combines 32-bit and 64-bit builds into a single
@c executable which can then be installed into the same location and share
@c all the files except the @file{.exe} and @file{.dll} files and some
@c configuration files in the @file{etc} directory.
기본 설치 프로그램은 32-bit과 64-bit을 합쳐서 한장소에 설치되며 @file{.exe}과 @file{.dll} 그리고 @file{etc} 디렉토리에 있는 몇몇의 형상파일들을 제외한 모든 파일들을 공유할수있도록 하나의 실행파일로 만들어졌다.  

@menu
* Getting the tools:: 
* Getting the source files::   
* Building the core files::   
* Building the bitmap files::  
* Building the cairo devices files::  
* Checking the build::          
* Building the manuals::        
* Building the Inno Setup installer::  
* Building the MSI installer::  
* Cross-building on Linux::   
* 64-bit Windows builds::   
@end menu

@c * 도구 얻기::
@c * 출처파일 (source files) 얻기::
@c * 주체파일(core files) 만들기::
@c * 비트맵파일 (bitmap files) 만들기:: 
@c * 카이로 디바이스 파일(cairo devices files) 만들기::
@c * 만든것 확인하기::
@c * 메뉴얼 만들기::
@c * Inno Setup 설치기 만들기::
@c * MSI 설치기 만들기::
@c * 리눅스(Linux)에 걸쳐만들기(cross-building).
@c * 64-bit 윈도우즈에서 만들기::

@node Getting the tools, Getting the source files, Building from source, Building from source
@c @subsection Getting the tools
@subsection 필요한 도구얻기

@c If you want to build @R{} from the sources, you will first need to
@c collect, install and test an extensive set of tools.  See @ref{The Windows toolset} (and perhaps updates in
@c @uref{http://CRAN.R-project.org/bin/@/windows/@/Rtools/}) for details.
소스로부터 @R{}을 빌드하기 원한다면 제일 먼저 필요한 도구들을 수집, 설치, 그리고 테스트를 해 보아야 합니다. 
자세한 사항은 @ref{The Windows toolset}을 살펴보세요 (그리고 아마도 다음 페이지 @uref{http://CRAN.R-project.org/bin/@/windows/@/Rtools/}에 있는 업데이트되는 내용을 살펴보셔야 합니다).

@c The @file{Rtools*.exe} executable installer described in @ref{The 
@c Windows toolset} also includes some source files in addition to the @R{}
@c source as noted below.  You should run it first, to obtain a working
@c @code{tar} and other necessities.  Choose a ``Full installation'', and
@c install the extra files into your intended @R{} source directory, e.g.@:
@c @file{C:/R}. The directory name @emph{should not contain spaces}. We
@c will call this directory @file{@var{R_HOME}} below.
@ref{The Windows toolset}에 설며되어 있는 @file{Rtools*.exe}이라는 실행가능한 인스톨러는 또한 아래 설명된 것과 같이 @R{} 소스외에도 추가적인 몇가지 소스파일들이 포함되어 있습니다.
올바른 @code{tar} 파일과 그외에 필요한 것들을 얻기 위하여 이를 제일 먼저 실행해야 합니다. 
그리고 ``Full installation''을 선택하고 나머지 파일들을 @file{C:/R}과 같이 설치하고자 하는 위치에 추가적인 파일들을 설치하세요. 
디렉토리 이름에는 띄어쓰기를 포함하면 안됩니다.
우리는 이 디렉토리를 @file{@var{R_HOME}} 이라고 부를 것입니다.


@node Getting the source files, Building the core files, Getting the tools, Building from source
@c @subsection Getting the source files
@subsection 소스파일로부터 얻기

@c You need to collect the following sets of files:
다음과 같은 파일들을 얻어야 할 필요가 있습니다:

@itemize

@item
@c Get the @R{} source code tarball @file{R-@value{VERSIONno}.tar.gz} from
@c @acronym{CRAN}.  Open a command window (or another shell) at directory
@c @var{R_HOME}, and run
@acronym{CRAN}으로부터 먼저 타르볼 형식으로 된 @R{} 소스코드 파일 @file{R-@value{VERSIONno}.tar.gz}을 얻어야 합니다.
@var{R_HOME} 디렉토리에서 명령어 윈도우 (또는 다른 쉘)을 열고 다음과 같이 실행합니다. 

@example
tar -xf R-@value{VERSIONno}.tar.gz
@end example

@noindent
@c to create the source tree in @var{R_HOME}.  @strong{Beware}: do use
@c @command{tar} to extract the sources rather than tools such as WinZip
@c that do not understand symbolic links.  If you are using an account with
@c administrative privileges you may get a lot of messages which can be
@c suppressed by
@strong{주의:} 소스들을 압축으로부터 풀어내기 위하여 WinZip과 같이 심볼릭 링크를 이해하지 못하는 도구보다는 @command{tar}를 이용하길 바랍니다.
만약 관리자 권한을 가지고 있다면, 많은 메시지들을 받아 볼 수 있는데 이는 다음을 통해서 보이지 않게 할 수 있습니다.

@example
tar --no-same-owner -xf R-@value{VERSIONno}.tar.gz
@end example

@noindent
@enindex TAR_OPTIONS
@c or perhaps better, set the environment variable @env{TAR_OPTIONS} to the
@c value @samp{--no-same-owner --no-same-permissions}.
또한, 환경변수 @env{TAR_OPTIONS}의 값을 @samp{--no-same-owner --no-same-permissions}으로 지정하는 것이 더 편리할 수도 있습니다.

@c It is also possible to obtain the source code using Subversion; see 
@c @ref{Obtaining R} for details.
또한 서브버전을 이용하여 소스코드를 얻을 수도 있습니다.
더 자세한 사항은 @ref{Obtaining R}을 살펴보세요.

@item
@c If you are not using a tarball you need to obtain copies of the
@c recommended packages from @acronym{CRAN}.  Put the @file{.tar.gz} files
@c in @file{@var{R_HOME}/src/library/Recommended} and run @code{make
@c link-recommended}.  If you have an Internet connection, you can do this
automatically by running in @file{@var{R_HOME}/src/gnuwin32}
만약 타르볼을 사용하지 않는다면, @acronym{CRAN}에서 추천 패키지들의 복사본을 얻어야 합니다.
@file{@var{R_HOME}/src/library/Recommended} 에 @file{.tar.gz} 파일들을 넣고 @code{make link-recommended}를 실행하십시오. 
만약 인터넷이 연결되어 있다면, 다음과 같이 이를 자동으로 할 수 있습니다.

@example
make rsync-recommended
@end example

@end itemize

@c The following additional items are normally installed by
@c @file{Rtools30.exe}.  If instead you choose to do a completely manual
@c build you will also need
다음의 추가적인 아이템들은 @file{Rtools30.exe}에 의해 보통 설치됩니다. 
만약에 완전 수동으로 설치를 원한다면 다음이 요구됩니다.
@itemize

@item
@c The Tcl/Tk support files are contained in @file{Rtools30.exe} and
@c available as @file{.zip}s from
@c @uref{http://www.stats.ox.ac.uk/pub/Rtools}.  Please make sure you
@c install the right version: there is a 32-bit version and a 64-bit
@c version.
@file{Rtools30.exe}내에 포함되어 있는 Tcl/Tk 지원 파일들이 필요하며 이들은  @uref{http://www.stats.ox.ac.uk/pub/Rtools}에서 @file{.zip}의 형식으로 얻을 수 있습니다. 
올바른 버전을 설치하고 있는지에 대해서 반드시 확인하시길 바랍니다: 32 비트 버전과 64 비트 버전이 있습니다. 

@item
@c You need @code{libpng}, @code{jpeg} and @code{libtiff} sources
@c (available, e.g., from @uref{http://www.libpng.org/},
@c @uref{http://www.ijg.org} and
@c @uref{http://download.osgeo.org/@/libtiff/}.  The earliest versions that
@c have been tested are @file{libpng-1.5.4.tar.gz},
@c @file{jpegsrc.v8c.tar.gz} and @file{tiff-3.9.1.tar.gz}, but current
@c versions are recommended.  It is also possible to use
@c @samp{libjpeg-turbo} from
@c @uref{http://sourceforge.net/@/projects/@/libjpeg-turbo/@/files/}.
@code{libpng}, @code{jpeg} 그리고 @code{libtiff} 소스들 (@uref{http://www.libpng.org/}, @uref{http://www.ijg.org} 그리고 @uref{http://download.osgeo.org/@/libtiff/}에서 얻을 수 있습니다)이 필요할 것입니다.
이미 테스트가 된 이전 버전들은 @file{libpng-1.5.4.tar.gz}, @file{jpegsrc.v8c.tar.gz} 그리고 @file{tiff-3.9.1.tar.gz}이지만 가장 최근의 버전들을 이용하시길 바랍니다. 
@uref{http://sourceforge.net/@/projects/@/libjpeg-turbo/@/files/}으로부터 얻을 수 있는 @samp{libjpeg-turbo}를 이용하는 것도 가능합니다.

@c Working in the directory @file{@var{R_HOME}/src/gnuwin32/bitmap},
@c install the @code{libpng} and @code{jpeg} sources in sub-directories.
@c The @code{jpeg} sub-directory for version 9 is named @file{jpeg-9}; if
@c you use a different version (e.g.@: @file{jpeg-8d} or
@c @file{libjpeg-turbo}), copy file @file{src/gnuwin32/MkRules.dist} to
@c @file{src/gnuwin32/MkRules.local} and edit the definition of
@c @code{JPEGDIR}: the names of the @file{libpng} and @file{libtiff}
@c directories can also be set there.

디렉토리 @file{@var{R_HOME}/src/gnuwin32/bitmap}에서 작업하기 위해서는 서브디렉토리에 @code{libpng}와 @code{jpeg} 소스들으르 설치해야 합니다.
버전 9를 위한 @code{jpeg} 서브디렉토리는 @file{jpeg-9}으로 이름을 짓습니다.
만약 다른 버전을 이용하고자 한다면 (예를들면, @: @file{jpeg-8d} 또는 @file{libjpeg-turbo}), 파일 @file{src/gnuwin32/MkRules.dist}을 @file{src/gnuwin32/MkRules.local}에 복사하고 @code{JPEGDIR}의 정의를 편집해야 합니다.
@file{libpng}과 @file{libtiff} 디렉토리들의 이름 또한 그곳에서 지정될 수 있습니다.

@c Example:
예시:

@example
> tar -zxf libpng-1.5.12.tar.gz
> mv libpng-1.5.12 libpng
> tar -zxf jpegsrc.v9.tar.gz
> tar -zxf tiff-4.0.3.tar.gz
> mv tiff-4.0.3/libtiff .
> rm -rf tiff-4.0.3
@end example

@noindent
@c (and see the comment above about @option{--no-same-owner}).
@option{--no-same-owner}에 대한 옵션도 살펴보시길 바랍니다.
@end itemize

@node Building the core files, Building the bitmap files, Getting the source files, Building from source
@c @subsection Building the core files
@subsection 코어파일 빌드하기

@enindex TMPDIR
@c Set the environment variable @env{TMPDIR} to point to a writable
@c directory, with a path specified with forward slashes and no spaces.
@c (The default is @file{/tmp}, which may not be useful on Windows.)
환경 변수인 @env{TMPDIR}을 띄어쓰기없이 포워드 슬래시 (forward slash)를 사용하여 지정한 path를 사용하여  쓰기 가능한 디렉토리로 가리키도록 설정하십시요. (기본 설정은 @file{/tmp}인데, 윈도우즈에서는 유용하지 않을수도 있습니다.)

@c You may need to compile under a case-honouring file system: we found
@c that a @command{samba}-mounted file system (which maps all file names to
@c lower case) did not work.
어쩌면 대소문자를 기리는 파일 시스템안에서 compile하는게 필요할수도 있습니다: 우리가 알아낸 바로는 @command{samba}가 장착된 파일 시스템 (모든 파일명을 소문자로 바꾸는 시스템) 에서는 작동되지 않습니다.

@c Open a command window at @file{@var{R_HOME}/src/gnuwin32}.  Look at
@c @file{MkRules.dist} and if settings need to be altered, copy it to
@c @file{MkRules.local} and edit the settings there.  In particular, this
@c is where a 64-bit build is selected.  Then run
@file{@var{R_HOME}/src/gnuwin32} 명령어창을 열어주세요.
@file{MkRules.dist}를 확인하시고 만약 설정을 바꾸어야 한다면, @file{MkRules.local}로 복사하시고 설정을 그곳에서 편집하십시요. 
특히 여기가 64비트 빌드가 선택된곳 입니다. 그후에 아래를 실행하십시요.

@example
make all recommended
@end example

@noindent
@c and sit back and wait while the basic compile takes place.
그리고 기본 compile이 실행될동안 편안히 기다리시면 됩니다.

@c Notes:
주목할점:

@itemize

@item
@c We have had reports that earlier versions of anti-virus software locking
@c up the machine, but not for several years.  However, aggressive
@c anti-virus checking such as the on-access scanning of Sophos can slow
@c the build down several-fold.
예전 버전의 안티바이러스 소프트웨어가 컴퓨터를 잠가버린다는 보고를 받은적이 있습니다, 그러나 최근 몇년동안은 그런보고가 없었습니다. 
하지만 Sophos의 on-access 스캐닝같이 과도한 안티바이러스 검사는 빌드를 몇배나 느리게 만들수있습니다. 

@item
@c By default Doug Lea's @code{malloc} in the file
@c @file{@var{R_HOME}/src/gnuwin32/malloc.c} is used for R's internal
@c memory allocations.  You can opt out of this by setting
@c @code{LEA_MALLOC=NO} in @file{MkRules.dist}, in which case the @code{malloc}
@c in @file{msvcrt.dll} is used.  This does impose a considerable
@c performance penalty and has not been tested recently.

기본으로 @file{@var{R_HOME}/src/gnuwin32/malloc.c}파일 안에 있는 Doug Lea의 @code{malloc}는 R의 내장 메모리를 배정할때 쓰여집니다. @file{MkRules.dist}안에서 @code{LEA_MALLOC=NO}로 설정하면 기본 설정을 기피할수있습니다. 그럴경우 @file{msvcrt.dll}안에있는 @code{malloc}이 사용됩니다. 이 방법은 성능에 상당한 불이익이 부과되며 최근에는 시험된적이 없습니다.

@item
@c You can run a parallel make by e.g.

parallel make를 아래의 예처럼 실행할수있습니다

@example
make -j4 all
make -j4 recommended
@end example

@noindent
@c but this is only likely to be worthwhile on a multi-core machine with
@c ample memory, and is not 100% reliable.

하지만 이방법은 메모리가 충분한 multi-core 기계에서나 사용할 가치가있으며 100% 신뢰할수는 없습니다. 

@item 
@c It is possible (mainly for those working on @R{} itself) to set the
@c (make or environment) variable @env{R_NO_BASE_COMPILE} to a non-empty
@c value, which inhibits the byte-compilation of the base and recommended
@c packages.

(make나 environment)변수인 @env{R_NO_BASE_COMPILE}을 비공의 값으로 설정하는것도 가능합니다 (대부분 @R{} 자체에서 작업을 하는경우). 이럴경우 베이스나 추천된 팩키지들의 byte-compilation이 억제됩니다.

@end itemize

@node Building the bitmap files, Building the cairo devices files, Building the core files, Building from source
@c @subsection Building the bitmap files
@subsection 비트맵 파일을 빌드하기
@cindex Rbitmap.dll

@c The file
@c @file{@var{R_HOME}/library/grDevices/libs/@{i386,x64@}Rbitmap.dll} is
@c not built automatically.
@file{@var{R_HOME}/library/grDevices/libs/@{i386,x64@}Rbitmap.dll} 파일은 자동적으로 빌드되지 않습니다.

@c Running @code{make} in @file{@var{R_HOME}/src/gnuwin32/bitmap} or
@c @code{make bitmapdll} in @file{@var{R_HOME}/@/src/gnuwin32} should build
@c @file{Rbitmap.dll} and install it under
@c @file{@var{R_HOME}/library/grDevices/libs}.
@file{@var{R_HOME}/src/gnuwin32/bitmap} 내에서 @code{make} 또는 @file{@var{R_HOME}/@/src/gnuwin32} 내에서 @code{make bitmapdll} 하는 것은 @file{Rbitmap.dll}을 설치하고 이를 @file{@var{R_HOME}/library/grDevices/libs}에서 설치해야 합니다.


@node Building the cairo devices files, Checking the build, Building the bitmap files, Building from source
@c @subsection Building the cairo devices
@subsection cairo 장치를 빌드하기 
@cindex winCairo.dll

@c The devices based on cairographics (@code{svg}, @code{cairo_pdf},
@c @code{cairo_ps} and the @code{type = "cairo"} versions of @code{png},
@c @code{jpeg}, @code{tiff} and @code{bmp}) are implemented in a separate
@c DLL @file{winCairo.dll} which is loaded when one of these devices is
@c first used.  It is not built by default, and needs to be built after
@c @file{Rbitmap.dll}, by @command{make cairodevices}.
Cairographics에 기초한 장치들 (@code{svg}, @code{cairo_pdf}, @code{cairo_ps} 그리고 @code{type = "cairo"}버전의 @code{png}, @code{jpeg}, @code{tiff} 그리고 @code{bmp})은 이들 장치들 중 하나가 처음으로 사용될 때 로드된 서로 다른 DLL winCairo.dll에서 시행됩니다. 
이는 기본적으로 빌드되지 않고, @command{make cairodevices}에 의해 @file{Rbitmap.dll} 뒤에 빌드되어져야만 합니다. 

@c To enable the building of these devices you need to install the static
@c cairographics libraries built by Simon Urbanek at
@c @uref{http://www.rforge.net/Cairo/files/cairo-current-win.tar.gz}.  Set
@c the macro @samp{CAIRO_HOME} in @file{MkRules.local}.  (Note that this
@c tarball unpacks with a top-level directory @file{src/}:
@c @samp{CAIRO_HOME} needs to include that directory in its path.)
이러한 장치들이 빌드되게 하기 위해서는 Simon Urbanek에 의해 빌드 되어진 static cairographics 라이브러리들을 @uref{http://www.rforge.net/Cairo/files/cairo-current-win.tar.gz}으로부터 받아 설치해야만 합니다. 
@file{MkRules.local}에 있는 @samp{CAIRO_HOME} 매크로를 설정해주세요.
(이 타르볼은 최상위 디렉토리 @file{scr/}에서 압축해제가 되어야 합니다. 
@samp{CAIRO_HOME}은 그 경로를 포함해야 할 필요가 있습니다).


@node Checking the build, Building the manuals, Building the cairo devices files, Building from source
@c @subsection Checking the build
@subsection 빌드 확인하기 

@c You can test a build by running
다음을 실행함으로서 빌드를 테스트 할 수 있습니다. 
@example
make check
@end example

@noindent
@c The recommended packages can be checked by
추천 패키지들은 다음을 통해 확인해 볼 수 있습니다.

@example
make check-recommended
@end example

@noindent
@c Other levels of checking are
다음을 이용하여 더 철저한 @R{}의 기능들을 검사할 수 있습니다.

@example
make check-devel
@end example

@noindent
@c for a more thorough check of the @R{} functionality, and

다음은 @code{check-devel}과 @code{check-recommended}를 모두 수행합니다.

@example
make check-all
@end example

@noindent
@c for @code{check-devel} and @code{check-recommended}.

@c If a test fails, there will almost always be a @file{/Rout.fail} file in
@c the directory being checked (often @file{tests/Examples} or
@c @file{tests}): examine the file to help pinpoint the problem.
만약 테스트가 실패한다면, 체크된 디렉토리 안에 @file{/Rout.fail} 파일이 거의 항상 있을 것 입니다 (종종 @file{tests/Examples} 혹은 @file{tests}): 문제점을 정확하게 보기위하여 파일을 검토하십시오.

@node Building the manuals, Building the Inno Setup installer, Checking the build, Building from source
@c @subsection Building the manuals
@subsection 매뉴얼 구축하기 

@c The PDF manuals can be made by
PDF 매뉴얼들은 아래에 의해서 만들어 질 수 있습니다. 
@example
make manuals
@end example

@noindent
@c If you want to make the info versions (not including the Reference
@c Manual), use
만약에 info 버전을 (레퍼런스 매뉴얼을 제외한 나머지) 생성하고자 한다면, 다음을 이용하세요. 

@example
cd ../../doc/manual
make -f Makefile.win info
@end example

@noindent
@c (all assuming you have @command{pdftex}/@command{pdflatex} installed and
@c in your path).
(이러한 모든 것은 @command{pdftex}/@command{pdflatex}가 경로상에 설치되어있음을 가정합니다).

@c See the @ref{Making the manuals} section in the Unix-alike section for setting
@c options such as the paper size and the fonts used.
페이퍼 사이즈 및 글꼴과 관계된 옵션들을 조정하는 것은 유닉스와 같은 환경에서 @ref{Making the manuals}을 참고하세요.

@node Building the Inno Setup installer, Building the MSI installer, Building the manuals, Building from source
@subsection Building the Inno Setup installer

@c You need to have the files for a complete R build, including bitmap and
@c Tcl/Tk support and the manuals, as well as the recommended packages and
@c Inno Setup (@pxref{The Inno Setup installer}).
완전한 R을 구축하기 위해서는 bitmap과 Tcl/Tk의 지원, 매뉴얼을 포함하여 추천된 패키지들과 Inno Setup (@pxref{The Inno Setup installer})들이 필요합니다. 
@c Once everything is set up
모든 것들이 준비되었을때, 다음을 실행하는 것은 모든 조작들과 인스톨러를 생성할 것이고, 이들은 @file{gnuwin32/cran} 서브디렉토리에 놓이게 된 후 빌드를 확인할 것입니다.

@example
make distribution
make check-all
@end example

@noindent
@c will make all the pieces and the installers and put them in the
@c @file{gnuwin32/cran} subdirectory, then check the build.  This works by
@c building all the parts in the sequence:
이는 모든 파트들을 다음과 같은 순서대로 빌드함에 의해 작동합니다:

@example
rbuild @r{(the executables, the @acronym{FAQ} docs etc.)}
rpackages @r{(the base packages)}
htmldocs @r{(the HTML documentation)}
bitmapdll @r{(the bitmap support files)}
cairodevices @r{(the cairo-based graphics devices)}
recommended @r{(the recommended packages)}
vignettes @r{(the vignettes in package @strong{grid}:}
	  @r{ only needed if building from an svn checkout)}
manuals @r{(the PDF manuals)}
rinstaller @r{(the install program)}
crandir @r{(the @acronym{CRAN} distribution directory, only for 64-bit builds)}
@end example

@c The parts can be made individually if a full build is not needed, but
@c earlier parts must be built before later ones.  (The @file{Makefile}
@c doesn't enforce this dependency---some build targets force a lot of
@c computation even if all files are up to date.)  The first four targets
@c are the default build if just @command{make} (or @command{make all}) is
@c run.
전체 빌드가 필요하지 않을 경우에는 개별적으로 파트들이 만들어 질 수도 있지만, 초기 파드들은 나중 것들보다 먼저 빌드되어져야만 합니다. 
(@file{Makefile}은 이러한 의존성을 요구하지 않으나 몇몇의 빌드 타겟들은 모든 파일들이 최신임에도 불구하고 많은 연산을 필요로합니다).
처음 네가지 타겟들은 만약 @command{make}만이 (혹은 @command{make all}) 실행되었다면 기본 빌드입니다. 

@c If you want to customize the installation by adding extra packages,
@c replace @code{make rinstaller} by something like
만약 여러분이 여분의 패키지들을 추가함으로 사용자 설치를 하고 싶다면, @code{make rinstaller}를 다음과 같은 것으로 대체하십시오.

@example
make rinstaller EXTRA_PKGS='pkg1 pkg2 pkg3'
@end example

@c An alternative way to customize the installer starting with a binary
@c distribution is to first make an installation of R from the standard
@c installer, then add packages and make other customizations to that
@c installation.  Then (after having customized file @file{MkRules},
@c possibly @emph{via} @file{MkRules.local}, and having made R in the
@c source tree) in @file{src/gnuwin32/installer} run
바이너리 배포와 함께 시작하는 인스톨러를 조정하기 위한 다른 방법은 표준 인스톨러로부터 R의 설치를 제일 먼저 만든 후에 패키지들을 추가하고 설치에 다른 커스터마이제이션을 만드는 것입니다.
그러고 난 후 (어쩌면  @file{MkRules.local}를 통해 커스터마이즈된 @file{MkRules}를 이용하여 소스트리에 R을 만들고 난 뒤) @file{src/gnuwin32/installer}에서 다음을 실행하십시오.

@example
make myR IMAGEDIR=rootdir
@end example

@noindent
@c where @file{rootdir} is the path to the root of the customized
@c installation (in double quotes if it contains spaces or backslashes).
이는 @file{rootdir}이 사용자 설치의 루트로의 경로입니다 (띄어쓰기나 백슬래쉬등이 있다면 큰 따옴표 내에 써야 합니다).

@c Both methods create an executable with a standard name such as
@c @file{@value{RWVERSION}-win.exe}, so please rename it to indicate that
@c it is customized.  If you intend to @emph{distribute} a customized
@c installer please do check that license requirements are met -- note that
@c the installer will state that the contents are distributed under GPL-2
@c and this has a requirement for @emph{you} to supply the complete sources
@c (including the R sources even if you started with a binary distribution
@c of R, and also the sources of any extra packages (including their
@c external software) which are included).
위의 두 가지 방법들 모두 @file{@value{RWVERSION}-win.exe}와 같은 표준이름과 함께 실행가능한 파일을 생성하기 때문에 커스터마이즈 되었다는 것을 나타내는 이름으로 변경하세요.
만약 커스터마이즈된 인스톨러를 배포하고 싶다면 라이센스 요구사항이 충족되는지 확인하시길 바랍니다.
인스톨러는 GPL-2에 의거하여 배포되고 완전한 소스들(R의 바이너리배포를 시작하더라도 소스를 포함해야하며, (외부 소프트웨어를 포함된) 포함된 어떠한 추가적인 패키지들의 소스들도 포함)을 제공하는 것이 요구된다고 명시할 것입니다. 


@c The defaults for the startup parameters may also be customized.  For example
스타트업 파라미터들을 위한 기본값들 또한 조정될 수 있습니다.

@example
make myR IMAGEDIR=rootdir MDISDI=1
@end example

@noindent
@c will create an installer that defaults to installing @R{} to run in SDI
@c mode.  See @file{src/@/gnuwin32/installer/Makefile} for the names and
@c values that can be set.
이는 기본값을 SDI 모드에서 @R{} 설치가 실행되도록 하는 인스톨러를 생성할 것입니다. 
지정될 수 있는 이름들과 값에 대해서는 @file{src/gnuwin32/installer/Makefile}를 참조하십시오

@c The standard CRAN distribution of a 32/64-bit installer is made by first
@c building 32-bit R (just
32/64 비트 인스톨러의 표준 CRAN 배포는 첫 번째로 32 비트 R을 빌드 함으로 만들어 집니다 (다음만이 필요합니다)
@example
make 32-bit
@end example

@noindent
@c is needed), and then building 64-bit R with the macro @code{HOME32} set
@c in file @file{MkRules.local} to the top-level directory of the 32-bit
@c build.  Then the @command{make rinstaller} step copies the files that
@c differ between architectures from the 32-bit build as it builds the
@c installer image.
그리고 나서 32 비트 빌드의 최상위 디렉토리에 @file{MkRules.local} 파일에 매크로 @code{HOME32}를 가진 64 비트 R을 빌드합니다. 
그 후에 @command{make rinstaller} 단계는 아키텍쳐별로 다르게 이미지를 빌드하는 것 처럼 32 비트 빌드에서부터 파일들을 복사합니다

@node Building the MSI installer, Cross-building on Linux, Building the Inno Setup installer, Building from source
@c @subsection Building the MSI installer
@subsection MSI 인스톨러 구축하기

@c It is also possible to build an installer for use with Microsoft
@c Installer.  This is intended for use by sysadmins doing automated
@c installs, and is not recommended for casual use.
Microsoft Installer와 함께 사용하기위한 인스톨러를 빌드하는 것 또한 가능합니다. 
이는 자동 설치를 필요로 하는 시스템 관리자를 위해 만들어졌으므로, 일반적 사용으로는 추천되지 않습니다. 

@c It makes use of the Windows Installer XML (WiX) toolkit @emph{version
@c 3.0 or 3.5} available from @uref{http://wix.sourceforge.net/}.  Once WiX
@c is installed, set the path to its home directory in
@c @file{MkRules.local}.
이는 @uref{http://wix.sourceforge.net/}에서 사용가능한 Windows Installer XML (WiX) toolkit version 3.0 or 3.5을 사용합니다. 
WiX가 설치되면, @file{MkRules.local}에 홈 디렉토리로 경로를 지정하십시오. 

@c You need to have the files for a complete R build, including bitmap and
@c Tcl/Tk support and the manuals, as well as the recommended packages.
@c There is no option in the installer to customize startup options, so
@c edit @file{etc/Rconsole} and @file{etc/Rprofile.site} to set these as
@c required.  Then
비트맵과 Tcl/Tk 지원과 매뉴얼, 그리고 추천 패키지들을 포함한 완전한 R 빌드를 위한 파일들을 가지고 있어야 합니다. 
사용자 지정 스타트업 옵션을 지정하는 옵션이 인스톨러에는 없기때문에, 설정이 필요한 경우에 @file{etc/Rconsole}와 @file{etc/Rprofile.site}를 수정해야 합니다. 
그러고 나서 아래를 사용하십시오.

@example
cd installer
make msi
@end example

@noindent
@c which will result in a file with a name like
@c @file{@value{RWVERSION}-win32.msi}.  This can be double-clicked to be
@c installed, but those who need it will know what to do with it (usually
@c by running @command{msiexec /i} with additional options).  Properties
@c that users might want to set from the @command{msiexec} command line
@c include @samp{ALLUSERS}, @samp{INSTALLDIR} (something like
@c @file{c:\Program Files\R\@value{RWVERSION}}) and @samp{RMENU} (the path
@c to the @samp{R} folder on the start menu) and @samp{STARTDIR} (the
@c starting directory for @R{} shortcuts, defaulting to something like
@c @file{c:\Users\name\Documents\R}).
이는 @file{@value{RWVERSION}-win32.msi} 와 같은 이름을 가진 파일을 생성할 것입니다.
더블-클릭이 가능하지만, 이를 필요로 하는 사람들은 무엇을 해야 할 지 알것입니다 (일반적으로 추가적인 옵션들과 함께 @command{msiexec /i}를 실행함).
사용자가 @command{msiexec} 명령줄에서 부터 지정하고자 하는 속성들은 @samp{ALLUSERS}, (@file{c:\Program Files\R\R-devel}와 같은)  @samp{INSTALLDIR} 그리고 (시작 메뉴에 있는 R 폴더로의 경로인) @samp{RMENU}, 그리고 (@file{c:\Users\name\Documents\R} 와 같은 것이 기본값인, R shortcut을 위한 시작 디렉토리) @samp{STARTDIR}를 포함합니다. 

@c The MSI installer can be built both from a 32-bit build of @R{}
@c (@file{@value{RWVERSION}-win32.msi}) and from a 64-bit build of @R{}
@c (@file{@value{RWVERSION}-win64.msi}, optionally including 32-bit files
@c by setting the macro @code{HOME32}, when the name is
@c @file{@value{RWVERSION}-win.msi}).  Unlike the main installer, a 64-bit
@c MSI installer can only be run on 64-bit Windows.
MSI installer는 R 의 32 비트 빌드 (@file{@value{RWVERSION}-win32.msi})와 R의 64 비트 빌드 (@file{@value{RWVERSION}-win64.msi}, 선택적으로 이름이 @file{@value{RWVERSION}-win.msi}일 때, macro @code{HOME32}를 지정함으로써 32 비트 파일들을 포함합니다), 두 가지 모두에서 빌드될 수 있습니다. 주요 installer와 다르게, 64 비트 MSI installer는 64 비트 윈도우에서만 실행할 수 있습니다. 

@c Thanks to David del Campo (Dept of Statistics, University of Oxford)
@c for suggesting WiX and building a prototype installer.
WiX 을 제안해 주시고 prototype installer를 빌드해주신 David del Campo (Dept of Statistics, University of Oxford)에 감사의 말씀을 전합니다. 

@node Cross-building on Linux, 64-bit Windows builds, Building the MSI installer, Building from source
@c @subsection Cross-building on Linux
@subsection 리눅스에서 크로스빌딩하기

@c Support for cross-building was withdrawn at @R{} 2.9.0.
크로스 빌딩에 대한 지원은 @R{} 2.9.0 에서 빠지게 되었습니다.

@node 64-bit Windows builds,  , Cross-building on Linux, Building from source
@c @subsection 64-bit Windows builds
@subsection 64-bit Windows 빌드

@c To build a 64-bit version of R you need a 64-bit toolchain: the only one
@c discussed here is based on the work of the MinGW-w64 project
@c (@uref{http://sourceforge.net/@/projects/@/mingw-w64/}, but commercial
@c compilers such as those from Intel and PGI could be used (and have been
@c by @R{} redistributors).
R의 64 비트 버전을 구축하기 위해서는 64 비트 toolchain이 필요합니다: 
여기에서는 MinGW-w64 (@uref{http://sourceforge.net/projects/mingw-w64/}) 프로젝트에 기초한 것들만 의논되었으나, Intel과 PGI와 같은 상업용 컴파일러들 역시 사용될 수 있습니다 (그리고 이들은 @R{}의 재배포자들에 의해서 사용되고 있습니다).

@c Support for MinGW-w64 was developed in the R sources over the period
@c 2008--10 and was first released as part of @R{} 2.11.0.  The assistance
@c of Yu Gong at a crucial step in porting R to MinGW-w64 is gratefully
@c acknowledged, as well as help from Kai Tietz, the lead developer of the
@c MinGW-w64 project.
MinGW-w64 에 대한 지원은 2008-10 기간 동안 R 소스에서 개발되었고 처음으로 @R{} 2.11.0의 일부분으로 릴리즈 되었습니다.
R 을 MinGW-w64 로 이식하는 결정적인 단계에서 Yu Gong의 도움과 MinGW-w64의 주 개발자인 Kai Tietz의 도움이 매우컸으며, 이에 대하여 매우 감사드립니다.

@c Windows 64-bit is now completely integrated into the @R{} and package
@c build systems.
윈도우즈 64 비트는 현재 @R{}과 패키지 구축 시스템들에 완전히 융화되었습니다. 


@node Testing a Windows Installation,  , Building from source, Installing R under Windows
@c @section Testing an Installation
@section  설치확인하기 

@c The Windows installer contains a set of test files used when building
@c @R{}.
윈도우즈 인스톨러는 @R{}이 구축될 때 사용된 테스트 파일들의 세트를 포함하고 있습니다. 

@c The @code{Rtools} are not needed to run these tests. but more
@c comprehensive analysis of errors will be given if @command{diff} is in
@c the path (and @code{errorsAreFatal = FALSE} is then not needed below).
@code{Rtools}는 이런 테스트들을 실행하기위해 필요하지는 않지만, 만약 @command{diff}가 경로에 있다면 에러에 대하여 더욱 심도있는 분석이 주어지게 될 것입니다.
(@code{errorsAreFatal = FALSE} 이면 아래가 필요하지 않습니다).  

@c Launch either @code{Rgui} or @code{Rterm}, preferably with
@c @option{--vanilla}.  Then run
가급적이면 @option{--vanilla}와 함께 @code{Rgui}나 @code{Rterm}을 실행한 뒤, 다음을 수행하세요.

@example
library("tools")
testInstalledBasic("both")
testInstalledPackages("base", errorsAreFatal = FALSE)
testInstalledPackages("recommended", errorsAreFatal = FALSE)
@end example

@noindent
@c runs the basic tests and then all the tests on the standard and
@c recommended packages.  These tests can be run from anywhere: they write
@c their results in the @file{tests} folder of the @R{} home directory (as
@c given by @code{R.home()}), and hence may need to be run under the
@c account used to install @R{}.
이들은 기본 테스트들을 실행하고 나서 기본 패키지와 추천 패키지들에 모든 테스트들을 실행합니다. 
이 테스트들은 어디서든지 실행 될 수 있습니다: (@code{R.home()}에 의해 주어진) @R{} home 디렉토리의 @file{test} 폴더에 그들의 결과를 쓰기 때문에, @R{}을 설치할 때 사용한 계정에서 실행해야 할 수도 있습니다. 


@node Installing R under (Mac) OS X, Running R, Installing R under Windows, Top
@c @chapter Installing R under (Mac) OS X
@chapter (Mac) OS X 에서 R 설치하기 
@cindex OS X

@macro Rapp{}
@sc{R.app}
@end macro

@strong{NB:}  Information on OS X is likely to change before release of
@R{} 3.0.0.

@c The @file{bin/macosx} directory of a @acronym{CRAN} site contains
@c binaries for OS X for a base distribution and a large number of add-on
@c packages from @acronym{CRAN} to run on OS X 10.6 and later (Snow
@c Leopard, Lion, Mountain Lion, @dots{}).  This is a @cputype{x86_64}
@c build, and should run on all Macs from mid-2008 on.
@acronym{CRAN} 사이트의 @file{bin/macosx} 디렉토리는 OS X에 설치할 수 있는 베이스 배포와 @acronym{CRAN}으로부터 받아 OS X 10.6 또는 이후 버전 (Snow Leopard, Lion, Mountain Lion, @dots{})에서 사용이 가능한 방대한 양의 애드온 패키지들의 바이너리들을 포함하고 있습니다. 

@c The simplest way is to use @file{R-@value{VERSIONno}.pkg}: just
@c double-click on the icon.  Note that (X11-based) Tcl/Tk needs to be
@c installed separately if needed, from
@c @uref{http://cran.r-project.org/bin/macosx/tools/}, and for Mountain
@c Lion XQuartz will also need to be installed to use Tk.
가장 간단한 방법은 @file{R-@value{VERSIONno}.pkg}를 사용하는 것입니다. 
이는 단순히 아이콘을 더블클릭하면 됩니다.
(X11을 이용하는) Tcl/Tk는 필요하다면 따로 설치되어야 하며 이는 @uref{http://cran.r-project.org/bin/macosx/tools/}에서 얻을 수 있습니다.
Mountain Lion XQuartz 또한 Tk를 이용하여 설치되어야 합니다. 

@c On Mountain Lion with `GateKeeper' active you may need to
@c right/control-click on some of the packages (e.g.@: that for Tcl/Tk) and
@c select @samp{Open}.
`GateKeeper'가 활성화 되어 있는 Mountain Lion에서 일부 패키지들 (즉, @: Tcl/Tk)에 대해서 오른쪽/컨트롤을 이용하여 @samp{Open}을 선택해야 할 것입니다.

@c The binary version of @R{} is provided as an Apple Installer package. If
@c you encounter any problem during the installation, please check the
@c Installer log by clicking on the ``Window'' menu and item ``Installer
@c Log''. The full output (select ``Show All Log'') is useful for tracking
@c down problems.
@R{}의 바이너리 버전이 Apple 인스톨러 패키지로서 제공됩니다.
만약 설치동안에 어떠한 문제를 만나게 된다면 ``Window'' 메뉴에 있는 항목 ``Installer Log''를 클릭함으로서 Installer log를 확인해야 보셔야 합니다. 
문제를 해결함에 있어서 전체출력 (``Show All Log''를 눌러확인)을 살펴보는것은 매우 유용합니다. 

@c For building @R{} from source, see @ref{Mac OS X}.
소스로부터 @R{}을 빌딩하기 위해서는 @ref{Mac OS X}를 살펴보시길 바랍니다.

@menu
* Uninstalling under OS X::     
@end menu

@node Uninstalling under OS X,  , Installing R under (Mac) OS X, Installing R under (Mac) OS X
@c @section Uninstalling under OS X
@section OS X에서 삭제하기 

@c @R{} for Mac OS X consists of two parts: the GUI (@Rapp{}) and the R
@c framework. The un-installation is as simple as removing those folders
@c (e.g.@: by dragging them into the Trash). The typical installation will
@c install the GUI into the @file{/Applications} folder and the R framework
@c in the @file{/Library/Frameworks} folder.
Mac OS X에서 @R{}은 두 부분으로 구성되어 있습니다:  GUI (@Rapp{})와 R 프레임워크입니다.
삭제는 간단히 두 폴더를 제거하면 됩니다 (즉, @: 휴지통으로 이동시킵니다).
전형적인 설치는 GUI 를 @file{/Application} 폴더에 설치하고 R 프레임웤는 @file{/Library/Frameworks} 폴더에 설치됩니다.

@c If you want to get rid of R using a Terminal, simply run (prepend
@c @code{sudo} if needed):
만약 터미널을 이용하여 R을 삭제하고자 한다면 단순히 아래와 같은 명령을 실행하면 됩니다 (만약 필요하다면 @code{sudo}를 하십시요).

@example
rm -rf /Library/Frameworks/R.framework /Applications/R.app /Applications/R64.app 
@end example

@c Note that this does leave some symbolic links in @file{/usr/bin}, some
@c or all of @file{R}, @file{Rscript}, @file{R32} and @file{R64}.
그런데 이는 @file{/usr/bin}내에 있는 일부 심볼릭 링크, @file{R}, @file{Rscript}, @file{R32}, 그리고 @file{R64} 내에 있는 일부 또는 전체를 남겨둘 수 있습니다.

@c An alternative is to use Apple's @code{pkgutil} tools to uninstall R. R
@c consists of three packages: @code{org.r-project.R.Leopard.fw.pkg},
@c @code{org.r-project.R.Leopard.GUI.pkg} and
@c @code{org.r-project.R.Leopard.GUI64.pkg}. You can use @code{pkgutil
@c --unlink} for each of them to remove their files and/or @code{pkgutil
@c --forget} if you want the Apple Installer to forget about the package
@c without deleting its files (useful when installing multiple R versions
@c in parallel).
또 다른 방법으로는 Apple의 @code{pkgutil} 도구를 이용하여 R을 삭제하는 것입니다.
R은 @code{org.r-project.R.Leopard.fw.pkg}, @code{org.r-project.R.Leopard.GUI.pkg}, 그리고, @code{org.r-project.R.Leopard.GUI64.pkg} 패키지로 구성되어 있습니다. 
이들 각각에 대해서 파일들을 제거하기 위해서 @code{pkgutil --unlink}를 사용할 수 있고, 만약 Apple Installer가 패키지에 대해서 파일의 삭제없이 이들을 기억하지 않도록 하기 위해서 @code{pkgutil --forget}을 이용할 수 있습니다 (이렇게 하는 것은 여러개의 R 버전들을 함께 사용할 때 유용합니다).

@node Running R, Add-on packages, Installing R under (Mac) OS X, Top
@c @chapter Running R
@chapter R 실행하기 

@c How to start @R{} and what command-line options are available is discussed
@c in @ref{Invoking R, , Invoking R, R-intro, An Introduction to R}.
어떻게 @R{}을 시작하고 어떤 명령어 라인 옵션들이 사용가능한지는 @ref{Invoking R, , Invoking R, R-intro, An Introduction to R} 에 설명되어 있습니다.

@c You should ensure that the shell has set adequate resource limits: @R{}
@c expects a stack size of at least 8MB and to be able to open at least 256
@c file descriptors.  (Any modern OS will have default limits at least as
@c large as these, but apparently NetBSD does not.  Use the shell command
@c @command{ulimit} (@command{sh}/@command{bash}) or @command{limit}
@c (@command{csh}/@command{tcsh}) to check.)
사용자가 해야할 일은 쉘이 올바르게 자원의 한계를 지정했는지를  확인하는 것입니다.
@R{}은 스택의 크기가 최소 8MB이어야 하며, 최소 256 파일 디스크립터들을 열수 있어야 합니다.
(최근 운영체제들은 이것들에 대하여 가능한 크고 많이 할 수 있도록 기본값을 설정하지만, NetBSD는 그러하지 않은 것 같습니다.
쉘 명령어 @command{ulimit} (@command{sh}/@command{bash}) 또는 @command{limit} (@command{csh}/@command{tcsh})를 이용해보세요).

@c @R{} makes use of a number of environment variables, the default values
@c of many of which are set in file @file{@var{R_HOME}/etc/Renviron} (there
@c are none set by default on Windows and hence no such file).  These are
@c set at @command{configure} time, and you would not normally want to
@enindex R_PAPERSIZE
@c change them -- a possible exception is @env{R_PAPERSIZE} (@pxref{Setting
@c paper size}).  The paper size will be deduced from the @samp{LC_PAPER}
@c locale category if it exists and @env{R_PAPERSIZE} is unset, and this
@c will normally produce the right choice from @samp{a4} and @samp{letter}
@c on modern Unix-alikes (but can always be overridden by setting
@c @env{R_PAPERSIZE}).
@R{}은 여러가지 환경변수들을 사용하는데, 이들의 대다수의 기본값들이 @file{@var{R_HOME}/etc/Renviron} 파일내에 설정되어 있습니다 (Windows에서는 기본적으로 아무것도 설정되지 않으므로 그러한 파일은 없습니다).
이것들은 @command{configure}를 할때 설정되며, 일반적으로 @env{R_PAPERSIZE}는 제외하고는 이들의 값을 변경할 수는 없습니다.
(@pxref{Setting paper size}).
페이퍼 사이즈는 만약 @samp{LC_PAPER} 로케일 카테고리에 지정된 값이 있고 @env{R_PAPERSIZE}가 지정되어 있지 않다면 그 값을 불러옵니다.
이것은 일반적으로 현대 유닉스와 같은 환경에서 @samp{a4}와 @samp{letter}으로부터 올바른 선택을 하도록 해줍니다.
(그러나 @env{R_PAPERSIZE}를 설정함으로서 항상 변경이 가능합니다).

@c Various environment variables can be set to determine where @R{} creates
@c its per-session temporary directory.  The environment variables
@enindex TMPDIR
@enindex TMP
@enindex TEMP
@c @env{TMPDIR}, @env{TMP} and @env{TEMP} are searched in turn and the
@c first one which is set and points to a writable area is used.  If none
@c do, the final default is @file{/tmp} on Unix-alikes and the value of
@enindex R_USER
@c @env{R_USER} on Windows.
다양한 환경변수들은 @R{}이 세션마다 사용하는 임시 디렉토리를 어디에 생성하는지 결정하도록 설정할 수 있습니다. 
환경변수 @env{TMPDIR}, @env{TMP}, @env{TEMP}가 찾아지고 가장 먼저 설정되고 쓰기권한이 부여된 곳에서 사용이 됩니다. 
만약 그렇지 않다면 가장 마지막 선택은 유닉스와 같은 환경에서는 @file{/tmp}가 이용되며 윈도우즈에서는 @env{R_USER}의 값이 됩니다. 

@c Some Unix-alike systems are set up to remove files and directories
@c periodically from @file{/tmp}, for example by a @command{cron} job
@enindex TMPDIR
@c running @command{tmpwatch}.  Set @env{TMPDIR} to another directory
@c before running long-running jobs on such a system.
일부 유닉스와 같은 시스템에서는 @command{cron}에 의해서 실행되는 @command{tmpwatch}와 같이 @file{/tmp}로부터 정기적으로 파일들과 디렉토리들을 삭제하도록 설정되어 있습니다. 
그러한 시스템에서 오랜 작업이 걸리는 것을 실행하기 전에 @env{TMPDIR}를 이용하여 다른 디렉토리를 설정하도록 하세요.

@c Note that @env{TMPDIR} will be used to execute @command{configure}
@c scripts when installing packages, so if @file{/tmp} has been mounted as
@c @samp{noexec}, @env{TMPDIR} needs to be set to a directory from which
@c execution is allowed.
@env{TMPDIR}은 패키지 설치시에 @command{configure} 스크립트를 실행하는데 이용됩니다.
만약 @file{/tmp}가 마운트되었다면 @env{TMPDIR}은 실행권한이 주어져 있는 디렉토리를 지정하는 것이 필요합니다. 

@node Add-on packages, Internationalization, Running R, Top
@c @chapter Add-on packages

@chapter 애드온 패키지들

@cindex Packages
@cindex Libraries

@menu
* Default packages::            
* Managing libraries::          
* Installing packages::         
* Updating packages::           
* Removing packages::           
* Setting up a package repository::  
* Checking installed source packages::  
@end menu

@c It is helpful to use the correct terminology.  A @emph{package} is
@c loaded from a @emph{library} by the function @code{library()}.  Thus a
@c library is a directory containing installed packages; the main library
@c is @file{@var{R_HOME}/library}, but others can be used, for example by
@enindex R_LIBS
@c setting the environment variable @env{R_LIBS} or using the @R{} function
@c @code{.libPaths()}.

정확한 용어를 사용하는것이 도움이 됩니다. 
@emph{팩키지}가 @code{library()}라는 함수를 사용하여 @emph{library}에서 로드됩니다. 
따라서 library란 설치된 팩키지들이 저장되어있는 디렉토리 입니다; 
주된 library는 @file{@var{R_HOME}/library} 입니다, 그러나 다른 곳도 사용할수 있습니다.
예를들어 환경변수를 @env{R_LIBS}으로 설정하던지 @R{}함수인 @code{.libPaths()}를 사용하면 됩니다.  

@node Default packages, Managing libraries, Add-on packages, Add-on packages
@c @section Default packages

@section 기본 패키지

@cindex Packages, default

@c The set of packages loaded on startup is by default
아래의 패키지들은 스타트업시에 자동으로 불러와집니다.

@example
> getOption("defaultPackages")
[1] "datasets"  "utils"     "grDevices" "graphics"  "stats"     "methods"
@end example

@noindent
@c (plus, of course, @pkg{base}) and this can be changed by setting the
@c option in startup code (e.g.@: in @file{~/.Rprofile}).  It is initially
@enindex R_DEFAULT_PACKAGES
@c set to the value of the environment variable @env{R_DEFAULT_PACKAGES} if
@c set (as a comma-separated list).  Setting @env{R_DEFAULT_PACKAGES=NULL}
@c ensures that only package @pkg{base} is loaded.

(물론 @pkg{base}도 포함합니다) 그리고 이것은 startup 코드에있는 옵션을 설정해서 바꿀수도있습니다 (예@: @file{~/.Rprofile} 안에서). 
원래 설정은 환경변수인 @env{R_DEFAULT_PACKAGES}의 값에 맞춰져있습니다.
이는 (컴마로 구분된 리스트인데) 환경변수 @env{R_DEFAULT_PACKAGES=NULL}으로 설정하는것은 @pkg{base} 패키지만 로드될 수 있게 합니다.

@c Changing the set of default packages is normally used to reduce the set
@c for speed when scripting: in particular not using @pkg{methods} will
@c reduce the start-up time by a factor of up to two (and this is done by
@c @command{Rscript}).  But it can also be used to customize @R{}, e.g.@:
@c for class use.
기본패키지들의 설정을 바꾸는 것은 보통 스크립팅을 할때 빠르게 할수있도록 세트의 수를 줄이기위해 사용됩니다: 특히 @pkg{methods}를 사용하지않으면 시작할때 시간을 두배까지 줄여 줄 것입니다 (그리고 이것은 @command{Rscript}을 통하여 이루어집니다).
그러나, 이것은 @R{}을 커스터마이즈 하는데 사용됩니다. 예@: 수업용으로 쓸때. 

@node Managing libraries, Installing packages, Default packages, Add-on packages
@c @section Managing libraries
@section 라이브러리 관리하기
@cindex Libraries, managing

@c @R{} packages are installed into @emph{libraries}, which are
@c directories in the file system containing a subdirectory for each
@c package installed there.
@R{} 패키지들은 라이브러리 안에 설치되는데, 이것은 각 패키들을 위한 서브 디렉토리를 포함한 파일시스탬내의 디렉토리입니다.

@c @R{} comes with a single library, @file{@var{R_HOME}/library} which is
@c the value of the @R{} object @samp{.Library} containing the standard and
@c recommended@footnote{unless they were excluded in the build.}  packages.
@c Both sites and users can create others and make use of them (or not) in
@c an @R{} session.  At the lowest level @samp{.libPaths()} can be used to
@c add paths to the collection of libraries or to report the current
@c collection.
@R{}은 @file{@var{R_HOME}/library}이라는 하나의 라이브러리가 따라오는데, 이는 기본 패키지와 추천 패키지들을 포함한 @samp{.Library} 이라는 R 객체의 값입니다 @footnote{만약 그렇지 않다면 그들은 빌드시에 제외될 것입니다}. 
사이트들과 사용자들 모두는 @R{} 세션에서 다른 것들을 생성하거나 그들을 활용할 (혹은 활용하지 않거나) 수 있습니다. 
가장 낮은 레벨인 @samp{.libPaths()}는 라이브러리의 컬렉션으로나 현재 컬렉션을 리포트 하기위한 경로를 더하도록 사용될 수도 있습니다. 

@cindex Libraries, site
@cindex Site libraries
@c @R{} will automatically make use of a site-specific library
@c @file{@var{R_HOME}/site-library} if this exists (it does not in a
@c vanilla @R{} installation).  This location can be overridden by
@c setting@footnote{its binding is locked once that files has been read, so
@c users cannot easily change it.} @samp{.Library.site} in
@c @file{@var{R_HOME}/etc/Rprofile.site}, or (not recommended) by setting
@c the
@enindex R_LIBS_SITE
@c environment variable @env{R_LIBS_SITE}.  Like @samp{.Library}, the
@c site libraries are always included by @samp{.libPaths()}.
R은 자동으로 site-specific 라이브러리인 @file{@var{R_HOME}/site-library}가 존재한다면 이를 활용할 것입니다 (이것은 a vanilla @R{} 설치내에 존재하는 것이 아닙니다). 
이 위치는 @file{@var{R_HOME}/etc/Rprofile.site}에 @samp{.Library.site}를 설정함으로써 무시할 수 있고, 아니면 (추천하지는 않습니다) 환경값 @env{R_LIBS_SITE}을 설정함으로써도 무시할 수 있습니다. 
@samp{.Library}와 같이, 사이트 라이브러리들은 항상 @samp{.libPaths()}에 의해 포함되어집니다. 


@cindex Libraries, user
@cindex User libraries
@enindex R_LIBS_USER
@c Users can have one or more libraries, normally specified by the
@c environment variable @env{R_LIBS_USER}.  This has a default value (use
@c @samp{Sys.getenv("R_LIBS_USER")} within an @R{} session to see what it
@c is), but only is used if the corresponding directory actually exists
@c (which by default it will not).
사용자들은 하나 이상의 라이브러리들을 가질 수 있고, 보통 환경값  @env{R_LIBS_USER}에 의해 지정됩니다. 
(무엇인지 보기 위해서는 @R{} 세션의 @samp{Sys.getenv("R_LIBS_USER")} 를 사용하십시오).
 이는 기본 값이 있지만, 상응하는 디렉토리가 실제로 존재할 때만 사용됩니다(기본적으로는 존재하지 않습니다). 


@c Both @env{R_LIBS_USER} and @env{R_LIBS_SITE} can specify multiple
@c library paths, separated by colons (semicolons on Windows).
@env{R_LIBS_USER} 과 @env{R_LIBS_SITE} 두 가지 모두 colon들로 분리되어진 (윈도우즈에서는 semicolon들) 여러개의 라이브러리 경로들을 지정할 수 있습니다. 


@node Installing packages, Updating packages, Managing libraries, Add-on packages
@c @section Installing packages
@section 패키지 설치하기
@cindex Packages, installing

@menu
* Windows packages::            
* OS X packages::               
* Customizing package compilation::  
* Multiple sub-architectures::  
* Byte-compilation::            
@end menu


@c Packages may be distributed in source form or compiled binary form.
@c Installing source packages which contain C/C++/Fortran code requires
@c that compilers and related tools be installed.  Binary packages are
@c platform-specific and generally need no special tools to install, but
@c see the documentation for your platform for details.

패키지들은 소스형태 또는 컴파일드된 바이너리 형태로 배포 될 수도 있습니다. 
C/C++/Fortran 코드를 포함하는 소스 패키지들을 설치하는 것은 컴파일러 또는 연관된 도구들이 설치가 되어 있어야 합니다. 
Binary 패키지들은 플랫폼 종속이고 일반적으로 특별한 도구들의 설치가 필요하지 않지만, 자세한 사
항은 여러분의 플랫폼에 관한 문서를 참고하십시오.

@c Note that you may need to specify implicitly or explicitly the library to
@c which the package is to be installed.  This is only an issue if you have
@c more than one library, of course.
만약 하나 이상의 라이브러리가 존재할 때, 그 라이브러리에 어떤 패키지에 설치되는지를 함축적으로나 명시적으로 지정해
야할 수도 있습니다. 


@c If installing packages on a Unix-alike to be used by other users, ensure
@c that the system @code{umask} is set to give sufficient permissions (see
@c also @code{Sys.umask} in @R{}).  (To a large extent this is unnecessary
@c in recent versions of @R{}, which install packages as if @code{umask = 022}.)
만약 유닉스 계열의 설치 패키지가 다른 사용자에 의하여 사용되어지려고 할 때, 
시스템 @code{umask}이 충분한 허가를 주도록 설정되었는지를 확인하십시오
(@R{}의@code{Sys.umask}도 참조하십시오). (이는 일반적으로 @code{umask = 022}처럼 패키지
를 설치하는 최신 버전의 R에는 필요하지 않습니다.)


@c For most users it suffices to call
@c @samp{install.packages(@var{pkgname})} or its GUI equivalent if the
@c intention is to install a @acronym{CRAN} package and internet access is
@c available.@footnote{If a proxy needs to be set, see
@c @command{?download.file}.}  On most systems @samp{install.packages()}
@c will allow packages to be selected from a list box.
대부분의 사용자들에게는 만약 인터넷 사용이 가능하고 @acronym{CRAN} 패키지를 설치
하고자 하는 의도라면 @samp{install.packages(pkgname)}나 그의 GUI에 상응하는
것을 부르는 것으로 충분합니다. 대부분의 시스템들에서
@samp{install.packages()}는 패키지들이 list box에서 선택되도록 허용할 것입니다.

To install packages from source in a Unix-alike use

@example
R CMD INSTALL -l /path/to/library @var{pkg1} @var{pkg2} @dots{}
@end example

@noindent
@c The part @samp{-l /path/to/library} can be omitted, in which case the
@c first library of a normal @R{} session is used (that shown by
@c @code{.libPaths()[1]}).
일반 @R{} 세션의 첫 번째 라이브러리가 사용되었을 경우에는
(@code{.libPaths()[1]}에 의해 보여집니다) @samp{-l /path/to/library} 부분이 생략될
수 있습니다.

@enindex TMPDIR
@c Ensure that the environment variable @env{TMPDIR} is either unset (and
@c @file{/tmp} exists and can be written in and executed from) or points to
@c a valid temporary directory.
@c There are a number of options available: use @code{R CMD INSTALL --help}
@c to see the current list.
반드시 환경값 @env{TMPDIR}이 unset (그리고 '@file{/tmp}'이 존재하여 그 곳에 쓰여지고 실
행될 수 있도록)이거나 유효한 임시 디렉토리로 향하도록 하십시오.
여러가지의 옵션들이 사용가능합니다: 현재 목록을 보기위해서는@code{R CMD INSTALL -–help}를 사용하십시오.

@findex install.packages
@c Alternatively, packages can be downloaded and installed from within
@c @R{}.  First set the option @code{CRAN} to your nearest @acronym{CRAN}
@c mirror using @command{chooseCRANmirror()}.  Then download
@c and install packages @pkg{pkg1} and @pkg{pkg2} by
그렇지 않으면, 패키지들은 @R{}내에서 다운로드되고  설치될 수 있습니다. 첫
번째로, 옵션 @code{CRAN}을 @command{chooseCRANmirror()}을 사용하여 가장 가까운 @acronym{CRAN}
mirror로 설정하십시오. 그리고 나서 다음을 사용하여 @pkg{pkg1}과 @pkg{pkg2} 패키지
들을 다운로드하고 설치하십시오.
@example
> install.packages(c("pkg1", "pkg2"))
@end example

@noindent
@c The essential dependencies of the specified packages will also be fetched.
@c Unless the library is specified (argument @code{lib}) the first library
@c in the library search path is used: if this is not writable, @R{} will
@c ask the user (in an interactive session) if the default user library
@c should be created, and if allowed to will install the packages there.
@c If you want to fetch a package and all those it depends on (in any way)
@c that are not already installed, use e.g.
위의 패키지들의 필수 dependency들 또한 fetch될 것입니다. (인자 @code{lib}로)
라이브러리가 지정되있지 않은 이상 라이브러리 검색 경로이 첫 번째 라이
브러리가 사용됩니다: 만약 쓸 수 없다면, @R{}은 사용자에게 (interactive 세
션에서) 기본 사용자 라이브러리를 생성할 지와, 그 곳에 패키지들을 설치
하는 것이 허용되는지를 물을 것 입니다.
만약 여러분이 (어떤 식으로든) 미리 설치되지 않은 패키지와 그에 종속하
는 모든것들을 fetch하기를 원한다면 다음의 예제를 사용하십시오.
@example
> install.packages("Rcmdr", dependencies = TRUE)
@end example

@c @code{install.packages} can install a source package from a local
@c @file{.tar.gz} file by setting argument @code{repos} to @code{NULL}:
@c this will be selected automatically if the name given is a single
@c @file{.tar.gz} file.
@code{install.packages}는 인자 @code{repos}를 @code{NULL}로 설정함으로써 로컬 '@file{.tar.gz}로 부터
source 패키지를 설치할 수 있습니다: 이는 주어진 이름이 하나의 '@file{.tar.gz} 파일일 경우에 자동으로 선택될 것입니다.

@c @code{install.packages} can look in several repositories, specified as a
@c character vector by the argument @code{repos}: these can include a
@c @acronym{CRAN} mirror, Bioconductor, Omegahat, R-forge, local archives,
@c local files, @dots{}).  Function @code{setRepositories()} can select
@c amongst those repositories that the @R{} installation is aware of.
@code{install.packages}를 사용하여, 인자 @code{repos}로 character vector 처럼 지정
된, 몇몇의 저장소들을 볼 수 있습니다: 이들은 @acronym{CRAN} mirror,
Bioconductor, Omegahat, R-forge, 로컬 archive들, 로컬 파일들 등을 포함
합니다. @code{setRepositories()} 함수는 @R{} 설치가 감지하는 저장소들 중에 선택
을 할 수 있습니다.

@c Naive users sometimes forget that as well as installing a package, they
@c have to use @code{library} to make its functionality available.
어리숙한 사용자들은 패키지의 설치와 함께 그의 기능을 사용하기위해서 @code{library}
를 사용해야 한다는 사실을 가끔 잊습니다.

@node Windows packages, OS X packages, Installing packages, Installing packages
@subsection Windows

@c What @code{install.packages} does by default is different on Unix-alikes
@c (except OS X) and Windows.  On Unix-alikes it consults the list of
@c available @emph{source} packages on @acronym{CRAN} (or other
@c repository/ies), downloads the latest version of the package sources,
@c and installs them (via @code{R CMD INSTALL}).  On Windows it looks (by
@c default) at the list of @emph{binary} versions of packages available for
@c your version of @R{} and downloads the latest versions (if any),
@c although optionally it will also download and install a source package
@c by setting the @code{type} argument.
기본으로 @code{install.packages}가 유닉스 계열 (OS X를 제외한)에서와 윈도우즈
에서 하는 것이 다릅니다. 유닉스 계열에서, 이는 @acronym{CRAN} (혹은 다른 저장소(
들))에서 사용가능한 @emph{source} 패키지들의 리스트를 참고하고, 패키지 source
들의 최신 버전을 다운로드하며, 그들을 (@code{R CMD INSTALL}을 통하여) 설치합
니다. 윈도우즈에서는, (기본적으로) 여러분의 R 버전에서 사용가능한 패키
지의 @emph{binary} 버전들의 리스트를 보고 (만약 있다면) 가장 최신 보전들을 다
운로드 합니다. 선택적으로 이가 또한 @code{type} 인자를 설정함으로써 source 패
키지를 다운로드하고 설치할 수도 있기는 합니다.

@c On Windows @code{install.packages} can also install a binary package
@c from a local @file{zip} file by setting argument @code{repos} to
@c @code{NULL}.   @code{Rgui.exe} has a menu @code{Packages} with a GUI
@c interface to @code{install.packages}, @code{update.packages} and
@c @code{library}.
윈도우즈에서 @code{install.packages}는 인자 @code{repos}를 @code{NULL}. @code{Rgui.exe}로 설정함으로
써 로컬 '@file{zip}'파일에서부터 @code{binary} 패키지도 설치할 수 있습니다. 이는
@code{install.packages},@code{update.packages} 그리고 @code{library}로의  GUI 인터페이스를
가진 메뉴 @code{Packages}를 가지고 있습니다.

@c Windows binary packages for @R{} are nowadays distributed as a single
@c binary containing either or both architectures.
@R{}의 윈도우즈 binary 패키지들은 둘 중 하나 혹은 두 개 모두의
architecture들을 포함하고 있는 하나의 binary로 요즘 배포되고 있습니다.

@c A few of the binary packages need other software to be installed on your
@c system: see for example
몇 몇의 binary 패키지들은 여러분의 시스템에 다른 소프트웨어들이 설치되는
것을 필요로 합니다: 예를 들면

@c @uref{http://CRAN.R-project.org/@/bin/@/windows/@/contrib/@/3.0/@/@@ReadMe}.
@c For 64-bit builds, packages using Gtk+ (@CRANpkg{Cairo}, @CRANpkg{RGtk2},
@c @CRANpkg{cairoDevice} and those that depend on them) need the @file{bin}
@c directory of a bundled distribution from @uref{http://www.gtk.org/@/download-windows-64bit.html} in the @c path: it should work to have both Gtk+ @file{bin} directories in the path on a
@c 64-bit version of @R{}.
@uref{http://CRAN.R-project.org/@/bin/@/windows/@/contrib/@/3.0/@/@@ReadMe}를 참조하세
요. 64 비트 구축을 위해서, Gtk+ (@CRANpkg{Cairo}, @CRANpkg{RGtk2}, @CRANpkg{cairoDevice} 그리고 그들
에 종속된 것들)를 사용하는 패키지들은 경로에서 @uref{http://www.gtk.org/@/download-windows-64bit.html} 에서의 bundled
distribution의 bin 디렉토리를 필요로 합니다: R의 64빝 버전의 경로에서 Gtk+ 와 '@file{bin}' 두 가지 모두를 가지는 것도 괜찮을 것입니다.


@c @command{R CMD INSTALL} works in Windows to install source packages if
@c you have set up the tools needed (see @ref{The Windows toolset}).  No
@c additional tools are needed if the package does not contain compiled
@c code, and @code{install.packages(type="source")} will work for such
@c packages (and for those with compiled code if the tools are in the path).
@command{R CMD INSTALL}은 여러분이 필요한 도구들을 설정해 놓았다면, source 패키
지들을 설치하기위한 용도로 윈도우즈에서 사용됩니다 (@ref{The Windows
toolset}을 참조하세요). 패키지가 compile된 코드를 포함하고 있지 않다면
추가적인 도구들은 필요하지 않고, @code{install.packages(type="source")}는 그
런 패키지들을 위해 (그리고 만약 도구들이 경로에 있다면 compile된 코드
들을 가진 것들) 실행될 것입니다.


@c We have seen occasional permission problems after unpacking source
@c packages on some Vista/Windows 7/Server 2008 systems: these have been
@c circumvented by setting the environment variable @env{R_INSTALL_TAR} to
@c @samp{tar.exe}.
@c @enindex R_INSTALL_TAR
@c If you have only a source package that is known to work with current
@c @R{} and just want a binary Windows build of it, you could make use of
@c the building service offered at
@uref{http://win-builder.r-project.org/}.
우리는 비스타/윈도우즈 7/ Server 2008 시스템들에서 source 패키지들을
unpack한 후에 일어나는 허가 문제를 가끔 보았습니다: 이는 환경값
@env{R_INSTALL_TAR}을 @samp{tar.exe}로 설정함으로써 이를 피해왔습니다. 만약 현재
의 R과 작업을 하는 것으로 알려져 있고 그것으로부터 binary 윈도우즈를
만들기를 원하는 source 패키지 밖에 가지고 있지 않다면,
@uref{http://win-builder.r-project.org/}에서 제공되는 building 서비스를 활용
할 수도 있습니다.

@c For almost all packages @command{R CMD INSTALL} will attempt to install
@c both 32- and 64-bit builds of a package if run from a 32/64-bit install
@c of @R{} on a 64-bit version of Windows.  It will report success if the
@c installation of the architecture of the running @command{R} succeeded,
@c whether or not the other architecture was successfully installed.
거의 대부분의 패키지들에서, 윈도우즈의 64비트 버전에서 R의 32/64 비트
설치를 실행한다면, @command{R CMD INSTALL}는 패키지의 32 비트와 64비트 빌드 두
가지 모두를 시도할 것입니다. 다른 architecture가 성공적으로 설치가 되
었건 되지 않았건, @command{R}을 돌리는 architecture의 설치가 성공한다면, 이는 성
공이라고 리포트를 할 것입니다.


@c The exceptions are packages with a non-empty @file{configure.win} script
@c or which make use of @file{src/Makefile.win}.  If @file{configure.win}
@c does something appropriate to both architectures use@footnote{for a
@c small number of @acronym{CRAN} packages where this is known to be safe
@c and is needed by the autobuilder this is the default.  Look at the
@c source of @file{tools:::.install_packages} for the list. option
@c @option{--force-biarch}: otherwise @command{R CMD INSTALL
@c --merge-multiarch} can be applied to a source tarball to merge separate
@c 32- and 64-bit installs.  (This can only be applied to a tarball, and
@c will only succeed if both installs succeed.)
예외 사항은, 비어있지 않은 '@file{configure.win}' 스크립트를 가진 패키지 혹은
'@file{src/Makefile.win}'를 활용하는 패키지들입니다. 만약 '@file{configure.win}'이 두 가
지 모두의 architecture들에 알맞은 무언가를 한다면 @option{--force-biarch} 옵션을
사용하십시오: 그렇지 않으면 각각의 32-비트와 64-비트 설치를 통합하기위
하여 source 타르볼에 @command{R CMD INSTALL --merge-multiarch}가 적용될 수 있습
니다. (이는 타르볼에만 적용될 수 있고, 두 가지 모두의 설치가 성공할 경
우에만 성공할 것입니다.)


@c If you have a package without compiled code and no Windows-specific
@c help, you can zip up an installation on another OS and install from the
@c that zip file on Windows.  However, such a package can be installed from
@c the sources on Windows without any additional tools.
만약 compile된 코드가 없는 패키지를 가지고 있고 윈도우에 알맞은 도움말
이 없다면, 다른 OS에서의 설치를 중단하고 윈도우즈에서 zip 파일을 설치
하십시오. 하지만, 이런 패키지는 추가의 도구 없이 윈도우즈의 source들에
서 설치될 수 있습니다.

@node OS X packages, Customizing package compilation, Windows packages, Installing packages
@subsection OS X

@c @strong{NB:}  Information on OS X is likely to change before release of
@c @R{} 3.0.0.
@c On OS X @code{install.packages} works as it does on other Unix-alike
@c systems, but there are additional types @code{mac.binary*} (the default
@c in the @acronym{CRAN} distribution) that can be passed to
@c @code{install.packages} in order to download and install binary packages
@c from a suitable repository, and type @code{mac.binary.leopard} is the
@c default for @acronym{CRAN} builds of R.  These OS X binary package files
@c have the extension @samp{tgz}.  The @Rapp{}[ GUI provides for
@c installation of either binary or source packages, from @acronym{CRAN} or
@c local files.
@strong{NB:} OS X에 대한 정보는 R 3.0.0.의 출시되기 전에 바뀔 것이라고 예상됩니다.
OS X에서 @code{install.packages}는 다른 유닉스 계열 시스템들에서처럼 작동하지만,
알맞은 저장소로부터 binary 패키지들을 다운로드하고 설치할 수 있도
록 @code{install.packages} 로 패스되어질 수 있는 @code{mac.binary*} (@acronym{CRAN}
distribution에서 기본값인)와  @R{}의 @acronym{CRAN} 구축을 위한 기본값인
@code{mac.binary.leopard}의 추가적인 타입들이 있습니다. 이런 OS X binary 패키
지 파일들은 확장자 @samp{tgz}을 가지고 있습니다. @Rapp{}[ GUI는 @acronym{CRAN}이나 로컬
파일들로부터 binary나 source 패키지들 중 하나의 설치를 제공합니다.


@c Note that many binary packages including compiled code are tied to a
@c particular series (@R{} 2.15.x or 3.0.x) of @R{}: in any case @R{} 3.0.x
@c cannot use any binary packages built for @R{} 2.15.x.
Compile된 코드를 포함한 많은 binary 패키지들이 @R{}의 특정한 시리즈들 (@R{}
2.15.x 혹은 3.0.x)에 묶여있다는 것을 유의하십시오: 어떠한 경우에도 @R{}
3.0.x는R 2.15.x를 위해 구축된 어떠한 binary 패키지도 사용할 수 없습니다.


@c Installing source packages which do not contain compiled code should
@c work with no additional tools. For others you will need
@c @command{Xcode}@footnote{from the App Store or Apple's developer site
@c depending on the version of OS X, and including the `Command Line Tools'
@c which in recent versions of @command{Xcode} can be downloaded for inside
@c Xcode, under the Preferences.} and compilers which match the ones used
@c to compile @R{}.  These are currently called @command{gcc},
@c @command{g++} and @command{gfortran}, and need to accept the Apple
@c extension of the @option{-arch} flag.  Suitable compilers can be
@c downloaded from @uref{http://r.research.att.com/tools/}.
Compile된 코드를 포함하지 않은 source 패키지를 설치하는 것은 추가적인 도구 없이도 작동해야만 합니다. 다른 것들은, @command{Xcode}와 @R{}을 compile하기위하 여 사용된 것과 맞는 컴파일러들이 필요합니다. 이들은 현재 @command{gcc}, @command{g++}, 그리고 @command{gfortran}이라고 불리우고 @option{-arch} 플래그의 Apple 확장의 허용을 필요로 합니다. 알맞은 컴파일러들은 @uref{http://r.research.att.com/tools/}에서 다운로
드될 수 있습니다.


@c Package @CRANpkg{rJava} and those which depend on it need a Java runtime
@c installed: for Mountain Lion see @ref{Mountain Lion}.
@CRANpkg{rJava} 패키지와 이에 종속된 것들은 Java runtime의 설치가 필요합니다:
Mountian Lion은 @ref{Mountain Lion}을 참조하세요.


@node Customizing package compilation, Multiple sub-architectures, OS X packages, Installing packages
@c @subsection Customizing package compilation
@subsection 패키지 컴파일을 커스터마이즈하기

The R system and package-specific compilation flags can be overridden or
added to by setting the appropriate Make variables in the personal file
@file{@var{HOME}/.R/Makevars-@var{R_PLATFORM}} (but
@file{@var{HOME}/.R/Makevars.win} or @file{@var{HOME}/.R/Makevars.win64}
on Windows), or if that does not exist, @file{@var{HOME}/.R/Makevars},
where @samp{R_PLATFORM} is the platform for which R was built, as
available in the @code{platform} component of the R variable
@code{R.version}.

R 시스템과 패키지 특정 편집 flag들은 개인 파일인
'@file{@var{HOME}/.R/Makevars-@var{R_PLATFORM}}' (하지만 윈도우즈에서는
'@file{@var{HOME}/.R/Makevars.win}' 혹은 '@file{@var{HOME}/.R/Makevars.win64)}'에서 알맞은 Make 값들
을 설정함으로써 무시되거나 더해질 수 있습니다. 혹은 이가 존재하지 않는
다면 @samp{R_PLATFORM}이 R이 구축된 곳의 플랫폼인 경우 HOME/.R/Makevars이 R
variable @code{R.version}의  @code{platform} 구성에서 사용가능합니다.

@c Package developers are encouraged to use this mechanism to enable a
@c reasonable amount of diagnostic messaging (``warnings'') when compiling,
@c such as e.g.@: @option{-Wall -pedantic} for tools from GCC, the Gnu
@c Compiler Collection.
@c Note that this mechanism can also be used when it necessary to change
@c the optimization level for a particular package.  For example
예를 들어, Gnu compiler 컬렉센인 GCC의 도구들을 위한 @option{-Wall –pedantic}와
같은 패키지 개발자들에게 compile을 할 때 합리적인 양의 진단 메세지 (“
경고”)를 받을 수 있도록 하기위하여 이 방법을 사용하도록 권해집니다.
이 방법은 다음의 예와 같이 특정한 패키지의 optimization 레벨을 바꾸는
것이 필요할 때도 사용된다는 것을 유의하십히오.

@example
## @r{for C code}
CFLAGS=-g -O
## @r{for C++ code}
CXXFLAGS=-g -O
## @r{for Fortran code}
FFLAGS=-g -O
## @r{for Fortran 95 code}
FCFLAGS=-g -O
@end example

@c There is also provision for a site-wide @file{Makevars.site} file under
@c @file{@var{R_HOME}/etc} (in a sub-architecture-specific directory if
@c appropriate).  This is read immediately after @file{Makeconf}.

(적절하다면 sub-architecture-specific 디렉토리의) '@file{@var{R_HOME}/etc}'에 있는
'@file{Makevars.site}' 파일의 사이트 전체에 대한 항목도 있습니다. 이는 '@file{Makeconf}'
바로 다음에 읽혀집니다.

@node Multiple sub-architectures, Byte-compilation, Customizing package compilation, Installing packages
@subsection Multiple sub-architectures

@c When installing packages from their sources, there are some extra
@c considerations on installations which use sub-architectures.  These are
@c commonly used on Windows and were used on OS X, but can in principle be
@c used on other platforms.
패키지의 source들에서부터 패키지를 설치할 때, sub-architecture들을 사
용하는 설치에 대해 추가로 고려해 볼 것들이 몇 가지 있습니다. 이들은 윈
도우즈에서 보통 사용되고 OS X에서도 사용되었었지만, 이론상으로는 다른
플랫폼에서도 사용할 수 있습니다.

@c When a source package is installed by a build of @R{} which supports
@c multiple sub-architectures, the normal installation process installs the
@c packages for all sub-architectures, but only tests it can be loaded
@c under the current sub-architecture.  The exceptions are
Source 패키지가 여러개의 sub-architecture들을 제공하는 R의 빌드에 의하
여 설치 되었을 때, 일반적인 설피 과정은 모든 sub-architecture들에 패키
지를 설치하지만, 현재 sub-architecture에서 로드될 수 있는 것들만 테스
트합니다. 예외 사항들은 다음과 같습니다.


@table @emph
@c @item Unix-alikes
@item  유닉스 계열
@c where there is an @file{configure} script, or a file @file{src/Makefile}.
'@file{Configure}' 스크립트가 있거나 '@file{src/Makefile}' 파일이 있는 곳.


@c @item Windows
@item 윈도우즈
@c where there is a non-empty @file{configure.win} script, or a file
@c @file{src/Makefile.win} (with some exceptions where the package is known
@c to have an architecture-independent @file{configure.win}, or if
@c @option{--force-biarch} is used to assert so).

비어있지 않은 '@file{configure.win}' script나 '@file{src/Makefile.win}'이 있는 곳 (패키지
가 architecture-independent '@file{configure.win}'을 가지고 있거나
@option{--force-biarch}가 그를 주장하기위해 사용되었다고 알려져 있는 곳의 몇몇
의 예외사항이 있습니다).

@end table

@noindent
@c In those cases only the current architecture is installed.  Further
@c sub-architectures can be installed by
위의 경우들에는 현재의 architecture만이 설치됩니다. 추가의
sub-architecture들은 다음에 의해서 설치될 수 있습니다.

@example
R CMD INSTALL --libs-only @var{pkg}
@end example

@noindent
@c using the path to @command{R} or @command{R --arch} to select the
@c additional sub-architecture.  On Windows there is also @command{R CMD
@c INSTALL --merge-multiarch} to build and merge the two architectures,
@c starting with a source tarball.
@c On OS X multiple sub-architectures were commonly used prior to @R{}
@c 3.0.0: @cputype{x86_64} (the current default), @cputype{i386} and for
@c Lion and Tiger @cputype{ppc} and @cputype{ppc64}.
추가의 sub-architecture을 선택하기위해 @command{R}로의 경로나 @command{R --arch}을 사용합
니다. 윈도우즈에서, source 타르볼로 시작하는, 두 개의 architecture들을
구축하고 통합하기위한 @command{R CMD INSTALL --merge-multiarch}도 있습니다.
OS X에서, 여러개의 sub-architecture들은 R 3.0.0: @cputype{x86_64} (현재 기본),
@cputype{i386} 그리고 Lion과Tiger @cputype{ppc}와  @cputype{ppc64}에 앞서 일반적으로 사용되었습
니다.


@node Byte-compilation,  , Multiple sub-architectures, Installing packages
@c @subsection Byte-compilation
@subsection 바이트 편집하기

@c The base and recommended packages are byte-compiled by default.  Other
@c packages can be byte-compiled on installation by using the option
@c @option{--byte-compile} with @command{R CMD INSTALL} or with
@c @code{install.packages(type = "source")}.
기본 패키지와 추천 패키지들은 기본적으로 byte-compiled입니다. 다른 패
키지들은 @command{R CMD INSTALL}이나 @code{install.packages(type = "source")}을 가진
@option{--byte-compile} 옵션을 사용함으로써 설치에서 byte-compiled가 될 수도 있습니다.


@c  Not all contributed packages work correctly when byte-compiled (for
@c example because they interfere with the sealing of namespaces).  For
@c most packages (especially those which make extensive use of compiled
@c code) the speed-up is small.  Unless a package is used frequently the
@c time spent in byte-compilation can outweigh the time saved in execution:
@c also byte-compilation can add substantially to the installed size of the
@c package.

모든 기여 패키지들이 바이트 컴파일드 일 때 정확하게 작동하는 것은 아닙니
다 (예를 들어 이는 namespace들의 sealing을 방해합니다). 대부분의 패키
지들에서 (특히 compile된 코드의 사용을 대규모로 사용하는) 천천히 빨라집니다.. 패키지가 자주 사용되지 않는 이상, 바이트 편집에서의 시
간을 보내는 것은 실행하면서 단축한 시간을 초과할 수도 있습니다: 또
한 바이트 편집은 패키지가 설치된 사이즈에 상당한 무리를 줄 수 있습니다.

@c Byte-compilation can be controlled on a per-package basis by the
@c @samp{ByteCompile} field in the @file{DESCRIPTION} file.
바이트 편집은 각각의 패키지를 '@file{DESCRIPTION}' 파일 안의 @samp{ByteCompile} 필드를 이용하여, 조정할 수 있습니다.

@node Updating packages, Removing packages, Installing packages, Add-on packages
@c @section Updating packages
@section 패키지 업데이트 하기
@findex update.packages
@cindex Packages, updating

@c The command @code{update.packages()} is the simplest way to ensure that
@c all the packages on your system are up to date.  Set the @code{repos}
@c argument as in the previous section.  The @code{update.packages()}
@c downloads the list of available packages and their current versions,
@c compares it with those installed and offers to fetch and install any
@c that have later versions on the repositories.
 
명령어 @code{update.packages()}는 여러분의 시스템이 최신식인지를 확실하게 하기
위한 가장 간단한 방법입니다. 인자 @code{repos}를 전의 섹션에서 처럼 설정하십
시오. @code{update.packages()}는 사용가능한 패키지와 그들의 현재 버전들의 목
록을 다운로드하고, 이를 설치된 것들과 비교하고 fetch를 제안하며 저장소
들에 가장 최근 버전들을 가진 것들을 모두 설치합니다.



@c An alternative interface to keeping packages up-to-date is provided by
@c the command @code{packageStatus()}, which returns an object with
@c information on all installed packages and packages available at multiple
@c repositories.  The @code{print} and @code{summary} methods give an
@c overview of installed and available packages, the @code{upgrade} method
@c offers to fetch and install the latest versions of outdated packages.
패키지를 최신식으로 보존하기위한 다른 인터페이스는 설치된 패키지들와
여러개의 저장소에서 이용가능한 패키지들의 정보를 가지고 있는 object를
return하는 @code{packageStatus()}에 의해 제공됩니다. @code{Print}와 @code{summery} 방식들은
설치되고 사용가능한 패키지들을 개괄적으로 보여주고, @code{upgrade} 방식은
fetch와 오래된 패키지들의 최신 버전들의 설치를 제공합니다.


@c One sometimes-useful additional piece of information that
@c @code{packageStatus()} returns is the status of a package, as
@c @code{"ok"}, @code{"upgrade"} or @code{"unavailable"} (in the currently
@c selected repositories).  For example
하나의 가끔 유용한 추가의 정보 조각은,  @code{packageStatus()}가 반환하는
것은 @code{"ok"}, @code{"upgrade"} 혹은 @code{"unavailable"}와 같은 패키지의 상태라는 것입니다 (현재 선택된 저장소 안에서). 예를들어


@example
> inst <- packageStatus()$inst
> inst[inst$Status != "ok", c("Package", "Version", "Status")])
                  Package Version      Status
Biobase           Biobase   2.8.0 unavailable
RCurl               RCurl   1.4-2     upgrade
Rgraphviz       Rgraphviz  1.26.0 unavailable
rgdal               rgdal  0.6-27     upgrade
@end example


@node Removing packages, Setting up a package repository, Updating packages, Add-on packages
@c @section Removing packages
@section 패키지 없애기
@findex remove.packages
@cindex Packages, removing

@c Packages can be removed in a number of ways.  From a command prompt they
@c can be removed by
패키지 삭제에는 여러가지 방법이 있습니다.. 명령 프롬프트 에서 다음의 명령어를 이용해 지울 수 있습니다.

@example
R CMD REMOVE -l /path/to/library @var{pkg1} @var{pkg2} @dots{}
@end example

@c From a running @R{} process they can be removed by
현재 진행중인 @R{} 프로세스의 패키지는 다음 명령어로 삭제 할 수 있습니다.

@example
> remove.packages(c("pkg1", "pkg2"),
                  lib = file.path("path", "to", "library"))
@end example

@c Finally, in most installations one can just remove the package directory
@c from the library.
마지막으로, 설치된 대부분의 패키지는 라이브러리안의 패키지 디렉토리에서 지울 수 있습니다.

@node Setting up a package repository, Checking installed source packages, Removing packages, Add-on packages
@c @section Setting up a package repository
@section 패키지 저장소 설정하기 
@cindex Repositories

@c Utilities such as @code{install.packages} can be pointed at any
@c @acronym{CRAN}-style repository, and @R{} users may want to set up their
@c own.  The `base' of a repository is a URL such as
@c @uref{http://www.omegahat.org/R/}: this must be an URL scheme that
@c @code{download.packages} supports (which also includes @samp{ftp://} and
@c @samp{file://}, but not on most systems @samp{https://}).  Under that
@c base URL there should be directory trees for one or more of the
@c following types of package distributions:

@code{install.packages}와 같은 유틸리티들은 모든 @acronym{CRAN} 스타일의 저장소로 가리
켜지도록 할 수 있고, @R{} 사용자들은 자신들에게 맞게 설정하고 싶어할 지도
모릅니다. 저장소의 ‘베이스’는 @uref{http://www.omegahat.org/R/}과 같은 URL입
니다: 이는 @code{download.packages} 가 지원하는 URL scheme일 것입니다
(@samp{ftp://}와 @samp{file://}도 포함하지만, 대부분의 시스템들에서 @samp{https://}는
포함하지 않습니다). 베이스 URL에서, 하나 이상의 다음의 패키지 배포의
종류들의 디렉토리 트리들이 있어야만 합니다.


@itemize
@item 
@c @code{"source"}: located at @file{src/contrib} and containing
@c @file{.tar.gz} files.  Other forms of compression can be used, e.g.@:
@c @file{.tar.bz2} or @file{.tar.xz} files.  Complete repositories contain
@c the sources corresponding to any binary packages, and in any case it is
@c wise to have a @file{src/contrib} area with a possibly empty
@c @file{PACKAGES} file.
@code{source}:  '@file{src/contrib}'에 위치하고 '@file{.tar.gz}파일들을 포함하고 있습니다.
예를들어 .'@file{tar.bz2}' 나 '@file{.tar.xz}'와 같은 요약의 다른 형태가 사용될
수도 있습니다. 완료된 저장소들은 모든 binary 패키지들에 상응하는 source
들 안에 포함되어 있고, 좌우간 가능하면 비어있는 '@file{PACKAGES} 파일과 함께
'@file{src/contrib. are}'를 가지는 것이 현명할 것입니다.


@item 
@c @code{"win.binary"}: located at @file{bin/windows/contrib/@var{x.y}} for
@c @R{} versions @var{x.y.z} and containing @file{.zip} files for Windows.
@code{"win.binary"}: @R{} 버전들 @var{x.y.z}을 위해 @file{bin/windows/contrib/@var{x.y}} 에 위치
하고 윈도우즈를 위한 '@file{.zip}파일들을 포함하고 있습니다.

@c @code{"mac.binary.leopard"}: located at
@c @file{bin/macosx/leopard/contrib/@var{x.y}} for @R{} versions @var{x.y.z}
@c and containing @file{.tgz} files.

@item 
@code{"mac.binary.leopard"}: @R{} 버전들 @var{x.y.z}을 위해
'@file{bin/macosx/leopard/contrib/x.y}' 에 위치하고 '@file{.tgz}' 파일들을 포함하고 있습니다.
@end itemize

@c Each terminal directory must also contain a @file{PACKAGES} file.  This
@c can be a concatenation of the @file{DESCRIPTION} files of the packages
@c separated by blank lines, but only a few of the fields are needed.  The
@c simplest way to set up such a file is to use function
@c @code{write_PACKAGES} in the @pkg{tools} package, and its help explains
@c which fields are needed.  Optionally there can also be a
@c @file{PACKAGES.gz} file, a @command{gzip}-compressed version of
@c @file{PACKAGES}---as this will be downloaded in preference to
@c @file{PACKAGES} it should be included for large repositories.  (If you
@c have a mis-configured server that does not report correctly non-existent
@c files you will need @file{PACKAGES.gz}.)
각각의 터미널 디렉토리는 '@file{PACKAGES}' 파일도 포함해야만 합니다. 이는 빈 줄
들에 의해 나누어진 패키지들의 '@file{DESCRIPTION}' 파일들의 연속일 수 있지만,
아주 약간의 필드만이 필요합니다. 그런 파일을 설정하는 가장 간단한
방법은 @pkg{tools} 패키지에서 @code{write_PACKAGES} 함수를 쓰는 것이고, 이에대한 도
움말은 어떤 필드들이 필요한지 설명합니다. 추가적으로 '@file{PACKAGES}'의
@command{gzip}-압축된 버전인 '@file{PACKAGES.gz}' 파일도 있을 수 있습니다. 왜냐하면, '@file{PACKAGES}'
보다 우선적으로 다운로드 될 것이고, 이는 큰 저장소들에 포함되어야만 합
니다. (만약 여러분이 존재하지 않는 파일들을 바르게 보고하지 않는 잘못
구성된 서버를 가지고 있다면 @file{PACKAGES.gz}가 필요할 것입니다.)


@c To add your repository to the list offered by @code{setRepositories()},
@c see the help file for that function.
@code{setRepositories()}에 의해 제공되는 리스트로 당신의 저장소를 추가하기 위
해서는, 그 함수에 대한 도움말 파일을 참조하십시오.


@c Incomplete repositories are better specified @emph{via} a
@c @code{contriburl} argument than @emph{via} being set as a repository.
불완전한 저장소들은 저장소처럼 설정되는 것을 통하는 것보다 @code{contriburl}
인자를 통해 지정되는 것이 더 낫습니다.


@c A repository can contain subdirectories, when the descriptions in the
@c @file{PACKAGES} file of packages in subdirectories must include a line
@c of the form
하나의 저장소는 서브디렉토리들 안의 패키지들이 '@file{PACKAGES }'파일들에 있는
설명들이 다음과 같은 형태의 줄을 포함해야만 할 때, 서브디렉토리들을 포
함할 수 있습니다.

@example
Path: @var{path/to/subdirectory}
@end example

@noindent
@c ---once again @code{write_PACKAGES} is the simplest way to set this up.
다시 한 번 말하지만 @code{write_PACKAGES} 가 이를 설정하는 가장 간단한 방법입니다.


@node Checking installed source packages,  , Setting up a package repository, Add-on packages

@c @section Checking installed source packages
@section 설피된 source 패키지들 확인하기

@c It can be convenient to run @command{R CMD check} on an installed
@c package, particularly on a platform which uses sub-architectures.  The
@c outline of how to do this is, with the source package in directory
@c @file{@var{pkgname}} (or a tarball filename):

서브아키텍처들을 사용하는 플랫폼에는 특히 , 설치된 패키지에 @command{R CMD check} 실행하는 것이 편할 수도 있습니다. 
디렉토리 '@file{@var{pkgname}}'(혹은 타르볼
파일 이름)에서의 소스 패키지와 함께, 이를 어떻게 하는지의 outline은
다음과 같습니다.


@example
R CMD INSTALL -l @var{libdir} @var{pkgname} > @var{pkgname}.log 2>&1
R CMD check -l @var{libdir} --install=check:@var{pkgname}.log @var{pkgname}
@end example

@noindent
@c Where sub-architectures are in use the @command{R CMD check} line can be
@c repeated with additional architectures by
서브아키텍처들이 사용되고있는 곳에서, @command{R CMD check} 줄은 아래에 의해
서 추가적인 아키텍처들과 함께 반복될 수 있습니다.


@example
R --arch @var{arch} CMD check -l @var{libdir} --extra-arch --install=check:@var{pkgname}.log @var{pkgname}
@end example

@noindent
@c where @option{--extra-arch} selects only those checks which depend on
@c the installed code and not those which analyse the sources.  (If
@c multiple sub-architectures fail only because they need different
@c settings, e.g.@: environment variables, @option{--no-multiarch} may need
@c to be added to the @code{INSTALL} lines.)  On (Mac) OS X and other
@c Unix-alikes the architecture to run is selected by @option{--arch}: this
@c can also be used on Windows with @file{@var{R_HOME}/bin/R.exe}, but it
@c is more usual to select the path to the @command{Rcmd.exe} of the
@c desired architecture.
여기에서 @option{--extra-arch}는 설치된 코드에 의존하는 체크들과 source들을 분석
하지 않는 체크들만을 선택합니다. (만약 여러개의 서브아키텍처들이
오직 다른 설정들이 필요하기 때문에 실패하는 것이라면, @option{--no-multiarch}
가 @code{INSTALL} 줄에 추가되어야 할지도 모릅니다.) (Mac) OS X와 다른 유닉스
계열들에서 실행하기위한 아키텍처는 @option{–arch}에 의해 선택됩니다: 이는
'@file{@var{R_HOME}/bin/R.exe}'로 윈도우즈에서도 사용될 수 있지만, 원하는
아키텍처의 @command{Rcmd.exe}로의 경로를 선택하는 것이 더 흔합니다.

@c So on Windows to install, check and package for distribution a source
@c package from a tarball which has been tested on another platform one
@c might use
그래서 윈도우즈에서 설치를 하려면, 다른 플랫폼에서 테스트 된 타르볼에
서의 배포를 위한 패키지 와 소스 패키지를 검사하십시오. 여러분은 다음을
사용할 수 있습니다.

@example
.../bin/i386/Rcmd INSTALL -l @var{libdir} @var{tarball} --build > @var{pkgname}.log 2>&1
.../bin/i386/Rcmd check -l @var{libdir} --extra-arch --install=check:@var{pkgname}.log @var{pkgname}
.../bin/x64/Rcmd check -l @var{libdir} --extra-arch --install=check:@var{pkgname}.log @var{pkgname}
@end example

@noindent
@c where one might want to run the second and third lines in a different
@c shell with different settings for environment variables and the path (to
@c find external software, notably for Gtk+).

여러분은 환경변수와 경로를 위한 다른 설정으로된 다른 쉘에서 두 번째
와 세 번째 줄을 실행하고 싶어할 지도 모릅니다 (외부의 소프트웨어를 찾
기위해서, 특히 Gtk+을 위한).

@c @command{R CMD INSTALL} can do a @code{i386} install and then add the
@c @code{x64} DLL from a single command by
@command{R CMD INSTALL} 은 @code{i386} 설치를 할 수 있고 다음에 의한 하나의 명령으로
@code{x64} DLL를 추가할 수 있습니다.

@example
R CMD INSTALL --merge-multiarch -l @var{libdir} @var{tarball}
@end example

@noindent
@c and @option{--build} can be added to zip up the installation.
그리고 @option{–build}가 설치를 압축 하기위해서 추가될 수 있습니다.

@node Internationalization, Choosing between 32- and 64-bit builds, Add-on packages, Top
@c @chapter Internationalization and Localization
@chapter 국제화와 지역화
@cindex Internationalization
@cindex Localization

@c @emph{Internationalization} refers to the process of enabling support
@c for many human languages, and @emph{localization} to adapting to a
@c specific country and language.
@emph{Internationalization}(국제화)는 인간이 사용하는 많은 언어를 지원할 수 있도록 하는 프로세싱을 의미하며, @emph{localization}(지역화)란 특정국가와 언어에 적용하는 것을 의미합니다. 

@c @c Prior to 2005 @R{} worked in the ISO Latin-1 8-bit character set and so
@c @c covered English and most Western European languages (if not necessarily
@c @c their currency symbols).  Since @R{} 2.1.0 it has supported Eastern
@c @c European 8-bit character sets, and multi-byte character sets such as
@c @c UTF-8 and others used for Chinese, Japanese and Korean.

@c Current builds of @R{} support all the character sets that the
@c underlying OS can handle.  These are interpreted according to the
@cindex Locale
@c current @code{locale}, a sufficiently complicated topic to merit a
@c separate section.  Note though that @R{} has no built-in support for
@c right-to-left languages and bidirectional output, relying on the OS
@c services.  For example, how character vectors in UTF-8 containing both
@c English digits and Hebrew characters are printed is OS-dependent (and
@c perhaps locale-dependent).
현재 제공되는 @R{} 빌드들은 운영체제들이 다룰 수 있는 모든 문자형 셋들을 지원하고 있습니다.
이것은 @code{locale}(로케일)을 통하여 해석되어 보여지게 되는데, 이는 충분히 복잡하여 하나의 독립적인 섹션으로 다루어 질 정도의 주제입니다.
또한, @R{}은 오른쪽에서 왼쪽으로 쓰는 언어와 양방향 출력을 지원하는 기능을 내장하고 있지 않지만, 이러한 것들은 운영체제가 제공하는 서비스에 의존합니다.
예를들면, 영어와 히브루 문자들이 함께 존재하는 UTF-8형식의 문자형 벡터들이 어떻게 출력되는가는 운영체제 별로 달라지게 됩니다 (그리고 로케일별로 달라질 수 있습니다).

@c The other aspect of the internationalization is support for the
@c translation of messages.  This is enabled in almost all builds of @R{}.
국제화의 또 다른 측면은 메시지들의 번역을 지원하는 것입니다.
이것은 대부분의 모든 @R{} 빌드에서 이용할 수 있게 되어 있습니다.

@menu
* Locales::                     
* Localization of messages::    
@end menu

@node Locales, Localization of messages, Internationalization, Internationalization
@c @section Locales
@section 로케일
@cindex Locale

@c A @emph{locale} is a description of the local environment of the user,
@c including the preferred language, the encoding of characters, the
@c currency used and its conventions, and so on.  Aspects of the locale are
@c accessed by the @R{} functions @code{Sys.getlocale} and
@c @code{Sys.localeconv}.
@emph{locale}(로케일)은 사용자의 지역적인 환경에 대한 설명인데, 이는 선호하는 언어, 문자들의 인코딩, 사용되는 화폐단위와 표기 등이 포함됩니다.
로케일과 관련된 부분들은 @R{}함수 @code{Sys.getlocale}과 @code{Sys.localeconv}에 의하여 접근되어집니다.

@c The system of naming locales is OS-specific.  There is quite wide
@c agreement on schemes, but not on the details of their implementation.  A
@c locale needs to specify
로케일을 명명하는 방식은 운영체제별로 다릅니다.
이에 대한 일반적인 작동방식은 동일하지만 실제적인 구현에 대한 내용은 그렇지 않습니다.
로케일은 다음과 같은 것들을 지정할 필요가 있습니다.
@itemize
@item
@c A human language.  These are generally specified by a lower-case
@c two-character abbreviation following ISO 639 (see e.g.@:
@c @uref{http://en.wikipedia.org/@/wiki/@/ISO_639-1}).
사용언어.  이것은 일반적으로 ISO 639를 따르는 두개의 소문자로 된 약어에 의해서 지정됩니다. (@:@uref{http://en.wikipedia.org/@/wiki/@/ISO_639-1}를 살펴보세요).

@item
@c A `territory', used mainly to specify the currency. These are generally
@c specified by an upper-case two-character abbreviation following ISO 3166
@c (see e.g.@: @uref{http://@/en.wikipedia.org/@/wiki/@/ISO_3166}).
지역. 주로 화폐단위를 지정하는데 이용됩니다.
이것들은 일반적으로 ISO 3166을 따르는 두개의 대문자로 지정됩니다.
(@: @uref{http://@/en.wikipedia.org/@/wiki/@/ISO_3166}를 살펴보세요).

@item
@c A charset encoding, which determines both how a byte stream should be
@c divided into characters, and which characters the subsequences of bytes
@c represent.  Sometimes the combination of language and territory is used
@c to specify the encoding, for example to distinguish between traditional
@c and simplified Chinese.
문자 인코딩.  이것은 어떻게 바이트 스트림이 문자들로 나누어지고 어떤 문자들이 바이트의 부분적인 시퀀스로 표현할 수 있는가를 결정합니다. 
때때로 언어와 지역의 조합이 인코딩을 지정하는데 사용되기도 합니다. 
예를들면, 중국어 간체와 번체를 구분하는 것이 해당됩니다.

@item
@c Optionally, a modifier, for example to indicate that Austria is to be
@c considered pre- or post-Euro.  The modifier is also used to indicate the
@c script (@code{@@latin}, @code{@@cyrillic} for Serbian, @code{@@iqtelif})
@c or language dialect (e.g.@: @code{@@saaho}, a dialect of Afar, and
@c @code{@@bokmal} and @code{@@nynorsk}, dialects of Norwegian regarded by
@c some OSes as separate languages, @code{no} and @code{nn}).
선택적인 사항으로 교정자가 있는데, 예를들면 오스트리아는 유로 전후로 구분되어 집니다.
교정자는 문자 (@code{@@latin}, 세르비안 문자를 위한 @code{@@cyrillic}, @code{@@iqtelif}) 또는 방언 (즉, @: 아주 멀리 떨어진 지역어 @code{@@saaho}와 @code{@@bokmal} 그리고 @code{@@nynorsk}, 어떤 운영체제에서는 서로 다른 언어로서 @code{no}와 @code{nn}로 구분되기도 하는 노르웨이어)을 지정하기도 합니다.
@end itemize

@c @R{} is principally concerned with the first (for translations) and
@c third.  Note that the charset may be deducible from the language, as
@c some OSes offer only one charset per language, and most OSes have only
@c one charset each for most languages.
@R{}은 기본적으로 번역자를 위하여 첫번째 사항과 세번째 사항에 중점을 두고 있습니다.
문자셋은 언어로부터 추론할 수도 있습니다.
이는 어떤 운영체제들이 언어별로 오로지 하나의 문자셋을 제공하고 있기 때문입니다.
그리고 대부분의 운영체들은 대부분의 언어들에 대해서 오로지 하나의 문자집합을 가지고 있습니다.

@menu
* Locales under Linux::         
* Locales under Windows::       
* Locales under OS X::          
@end menu

@node Locales under Linux, Locales under Windows, Locales, Locales
@c @subsection Locales under Linux
@subsection 리눅스에서의 로케일 

@c Modern Linux uses the XPG@footnote{`X/Open Portability Guide', which has
@c had several versions.} locale specifications which have the form
@c @samp{en_GB}, @samp{en_GB.UTF-8}, @samp{aa_ER.UTF-8@@saaho},
@c @samp{de_AT.iso885915@@euro}, the components being in the order listed
@c above.  (See @command{man locale} and @command{locale -a} for more
@c details.)  Similar schemes are used by most Unix-alikes: some (including
@c some distributions of Linux) use @samp{.utf8} rather than @samp{.UTF-8}.
현대의 리눅스는 @samp{en_GB}, @samp{en_GB.UTF-8}, @samp{aa_ER.UTF-8@@saaho}, @samp{de_AT.iso885915@@euro}와 같은 형식을 가지고 있는  XPG@footnote{여러개의 버전들을 가지고 있는 `X/Open Portability Guide'} 로케일 지정을 사용합니다.
(더 자세한 내용은 @command{man loacle}과 @command{locale -a}을 살펴보세요). 
대부분의 유닉스와 유사한 환경에서 비슷한 스킴이 사용됩니다: 일부 (리눅스를 포함)는 @samp{.UTF-8} 보다 @samp{.utf-8}을 사용하기도 합니다.

@node Locales under Windows, Locales under OS X, Locales under Linux, Locales
@c @subsection Locales under Windows
@subsection 윈도우즈에서의 로케일 

@c Windows also uses locales, but specified in a rather less concise way.
@c Most users will encounter locales only via drop-down menus, but more
@c information and lists can be found at
@c @uref{http://msdn.microsoft.com/en-us/library/hzz3tw78(v=vs.80)}
@c (or if Microsoft moves it yet again, search for @samp{Windows language
@c country strings}).
윈도우즈 또한 로케일을 사용하지만 덜 간결한 방법으로 지정됩니다.
대부분의 사용자들은 오로지 드랍-다운 메뉴를 통해서만 로케일을 조절할 수 있으나, 더 많은 정보를 @uref{http://msdn.microsoft.com/en-us/library/hzz3tw78(v=vs.80)} 에서 찾을 수 있습니다 (또는 Microsoft가 이를 아직 다시 옮기지 않았다면, @samp{Windows language country strings}로 검색해보시길 바랍니다). 

@c It offers only one encoding per language.
언어별로 오로지 하나의 인코딩만을 제공합니다.

@c Some care is needed with Windows' locale names.  For example,
@c @code{chinese} is Traditional Chinese and not Simplified Chinese as used
@c in most of the Chinese-speaking world.
윈도우즈의 로케일명을 사용할때는 다소 주의가 필요합니다.
예를들면 @code{chinese}는 중국어 번체를 의미하지 많은 중국인들이 사용하는 간체를 의미하지 않습니다.

@node Locales under OS X,  , Locales under Windows, Locales
@c @subsection Locales under OS X
@subsection OS X에서의 로케일 

@c OS X supports locales in its own particular way, but the R GUI tries to
@c make this easier for users. See
@c @uref{http://developer.apple.com/@/documentation/@/MacOSX/@/Conceptual/@/BPInternational/}
@c for how users can set their locales.  As with Windows, end users will
@c generally only see lists of languages/territories.  Users of @R{} in a
@c terminal may need to set the locale to something like @samp{en_GB.UTF-8}
@c if it defaults to @samp{C} (as it sometimes does when logging it
@c remotely and in batch jobs: note whether @command{Terminal} sets the
@c @env{LANG} environment variable is an (advanced) option, but the
@c default).

OS X는 그들의 특별한 방법으로 로케일을 지원하지만, R GUI는 사용자에게 보다 쉽게 만들고자 하였습니다.
어떻게 사용자가 그들의 로케일을 지정할 수 있는지에 대해서는 @uref{http://developer.apple.com/@/documentation/@/MacOSX/@/Conceptual/@/BPInternational/}를 살펴보시길 발바니다.
윈도우즈에서와 같이 사용자는 일반적으로 언어/지역의 목록만을 볼 수 있습니다. 
만약 로케일의 기본이 @samp{C} 터미널 내에서 @R{}의 사용자들은 @samp{en_GB.UTF-8}과 같이 로케일을 지정할 필요가 있습니다 (마치 때때로 이를 원격으로 로그인하고 배치작업을 수행할때입니다: @command{Terminal}이 @env{LANG} 환경변수를 조절할 수 있는지 여부는 (advanced) 옵션입니다).


@c Internally OS X uses a form similar to Linux.  It is based on ICU
@c locales IDs (@uref{http://userguide.icu-project.org/@/locale}) and not
@c XPG ones, but utilities such as @code{Sys.setlocale()} do normally
@c accept XPG forms.  So there are locales like @code{de_AT.ISO8859-15}
@c (German in Austria in Latin-9, which covers the Euro): the main
@c difference from other Unix-alikes is that where a character set is not
@c specified it is assumed to be @code{UTF-8}.
내부적으로 OS X는 리눅스와 유사한 형식을 이용합니다.
이는 XPG가 아닌 ICU 로케일 ID (@uref{http://userguide.icu-project.org/@/locale})에 기반을 두는데, @code{Sys.setlocale()}과 같은 유틸리티가 일반적으로 XPG 형식을 수용합니다.
그래서 @code{de_AT.ISG8859-155}와 같은 로케일을 보여주게 됩니다: 다른 유닉스와 비슷한 환경과 다른 점은 @code{UTF-8}이 가정되는 문자셋이 지정되지 않다는 것입니다. 


@node Localization of messages,  , Locales, Internationalization
@c @section Localization of messages
@section 메시지의 지역화 

@c The preferred language for messages is by default taken from the locale.
@c This can be overridden first by the setting of the environment variable
@enindex LANGUAGE
@enindex LC_ALL
@enindex LC_MESSAGES
@enindex LANG
@c @env{LANGUAGE} and then@footnote{On some systems setting
@c @env{LC_ALL} or @env{LC_MESSAGES} to @samp{C} disables @env{LANGUAGE}.}
@c by the environment variables @env{LC_ALL}, @env{LC_MESSAGES} and
@c @env{LANG}. (The last three are normally used to set the locale and so
@c should not be needed, but the first is only used to select the language
@c for messages.)  The code tries hard to map locales to languages, but on
@c some systems (notably Windows) the locale names needed for the
@c environment variable @env{LC_ALL} do not all correspond to XPG language
@c names and so @env{LANGUAGE} may need to be set.  (One example is
@c @samp{LC_ALL=es} on Windows which sets the locale to Estonian and the
@c language to Spanish.)
메시지에 대하여 우선적으로 선택되는 언어는 기본적으로 로케일로부터 정해지게 됩니다.
이것은 먼저 환경변수 @env{LANGUAGE}에 의해서 변경될 수 있으며@footnote{일부 시스템에서는 @env{LC_ALL} 또는 @env{LC_MESSAGES}를 @samp{C}로 지정하는 것은 @env{LANGUAGE}를 사용하지 못하게 하기도 합니다}, 이후에 @env{LC_ALL}, @env{LC_MESSAGES}, @env{LANG}이라는 환경변수에 의하여서도 변경될 수 있습니다. (마지막 세가지가 일반적으로 로케일을 설정하는데 사용되지만, 꼭 필요한 것은 아닙니다. 
첫번째 것은 오로지 메시지의 언어를 선택하는데 사용됩니다). 
코드는 열심히 로케일을 언어에 매칭하려고 하지만 일부 시스템 (특히 윈도우즈)는 환경변수  @env{LC_ALL}에 필요한 로케일이름들이 XPG 랭귀지명과 완전히 일치하지 않습니다.  따라서, @env{LANGUAGE}는 지정되어야 할 필요가 있습니다.
(하나의 예로 윈도우즈에서 @samp{LC_ALL=es}는 로케일을 에스토냐로 하고 언어는 스패니쉬로 설정합니다).
   
@c It is usually possible to change the language once @R{} is running
@c @emph{via} (not Windows) @code{Sys.setlocale("LC_MESSAGES",
@c "new_locale")}, or by setting an environment variable such as
@c @env{LANGUAGE}, @emph{provided}@footnote{If you try changing from French
@c to Russian except in a UTF-8 locale, you will most likely find messages
@c change to English.} the language you are changing to can be output in
@c the current character set.  But this is OS-specific, and has been known
@c to stop working on an OS upgrade.
보통은 @R{}이 실행중일때 @code{Sys.setlocale("LC_MESSAGES", "new_locale")}을 이용하거나, 만약 변경하고자 하는 언어가 현재의 문자셋이 제공된다면 @env{LANGUAGE}와 같은 환경변수를 이용하여 변경할 수 있습니다 @footnote{만약 불어에서 러시안으로 변경을 시도하는데 UTF-8 로케일이 빠져있다면, 영어로 된 메시지를 보게 될 가능성이 있습니다}. 
그러나, 이는 운영체제별로 다르며, 업그레이드시 중단되기도 한다고 알려져 있습니다.


@c Messages are divided into @emph{domains}, and translations may be
@c available for some or all messages in a domain.  @R{} makes use of the
@c following domains.
메시지는 도메인들로 나뉘어지며, 각 도메인들에서 일부 또는 모든 메시지들에 대한 번역이 가능합니다.
@R{}은 당므과 같은 도메인을 이용합니다.

@itemize
@item
@c Domain @code{R} for the C-level error and warning messages from the @R{}
@c interpreter.
@R{}인터프리터로부터 발생하는 C언어 수준의 에러와 경고 메시지들에 해당하는 도메인 @code{R}이 있습니다.

@item
@c Domain @code{R-@var{pkg}} for the R @code{stop}, @code{warning} and
@c @code{message} messages in each package, including @code{R-base} for the
@c @pkg{base} package.
@pkg{base} 패키지를 위한 @code{R-base}를 포함하여 각 패키지안의 R @code{stop}, @code{warning}, 그리고 @code{message} 메시지들을 위한 도메인 @code{R-@var{pkg}}가 있습니다.

@item
@c Domain @code{@var{pkg}} for the C-level messages in each package.
각 패키지마다 C언어수준의 메시지를 위한 도메인 @code{@var{pkg}}가 있습니다.

@item
@c Domain @code{RGui} for the menus etc of the R for Windows GUI front-end.
Windows GUI 사용을 위한 메뉴들을 위한  @code{RGui} 도메인이 있습니다.
@end itemize

@c Dividing up the messages in this way allows @R{} to be extensible: as
@c packages are loaded, their message translation catalogues can be loaded
@c too.
이렇게 도메인을 나누는 것은 @R{}을 확장가능하도록 해줍니다:  패키지가 로드될때, 메시지 번역 카탈로그들도 함께 로드됩니다.

@c @R{} can be built without support for translations, but it is enabled by
@c default.
@R{}은 번역의 지원없이 빌드될 수 있으나, 기본적으로는 지원하도록 되어 있습니다.

@c Translations are looked for by domain according to the currently
@c specified language, as specifically as possible, so for example an
@c Austrian (@samp{de_AT}) translation catalogue will be used in preference
@c to a generic German one (@samp{de}) for an Austrian user.  However, if a
@c specific translation catalogue exists but does not contain a
@c translation, the less specific catalogues are consulted.  For example,
@c @R{} has catalogues for @samp{en_GB} that translate the Americanisms
@c (e.g., @samp{gray}) in the standard messages into English.@footnote{the
@c language written in England: some people living in the USA appropriate
@c this name for their language.}  Two other examples: there are catalogues
@c for @samp{es}, which is Spanish as written in Spain and these will by
@c default also be used in Spanish-speaking Latin American countries, and
@c also for @samp{pt_BR}, which are used for Brazilian locales but not for
@c locales specifying Portugal.
번역은 현재 가능한 정확하게 지정된 언어에 따라서 도메인에 의하여 찾아지게 됩니다.
예를들면, 오스트리안 (@samp{de_AT}) 번역 카탈로그는 오스트리안 사용자들을 위하여 일반 독일어 (@samp{de})의 사용보다 우선합니다.
그런데, 만약 특정한 번역 카탈로그가 존재하지만 번역을 포함하고 있지 않다면 덜 정교한 번역이 보여집니다.
예를들면, @R{}은 Americanisms를 English@footnote{영국권에서 사용되는 영어: }로 보여주는 카탈로그 @samp{en_GB}를 가지고 있습니다.
두가지 추가적인 예가 있습니다.
스페인에서 사용되는 스패니쉬인 @samp{es}이라는 카탈로그가 있는데, 이들은 기본적으로 Spanish-speaking Latin American 국가에서 사용됩니다. 그리고 브라질 로케일에서 사요되는 @samp{pt_BR}은 포르투칼어를 지정하는 로케일과는 다릅니다.
   

@c Translations in the right language but the wrong charset are made use of
@enindex LANGUAGE
@c by on-the-fly re-encoding.  The @env{LANGUAGE} variable (only) can be a
@c colon-separated list, for example @samp{se:de}, giving a set of
@c languages in decreasing order of preference.  One special value is
@c @samp{en@@quot}, which can be used in a UTF-8 locale to have American
@c error messages with pairs of single quotes translated to Unicode directional
@c quotes.
번역의 언어가 올바르지만 잘못된 문자셋은 때에 따라서 재인코딩과정을 거칩니다.
@env{LANGUAGE} 변수만이 콜론으로 된 구분될 수 있는 리스트일 수 있습니다. 예를들면, @samp{se:de}이와 같이 언어선호도를 표시하는 것입니다.
특별한 것은 @samp{en@@quot}인데, 이는 UTF-8 로케일에서 미국식 에러 메시지에서 이용되는 작은 따옴표 두개의 사용이 한 쪽 방향의 유니코드식 큰 따옴표로 표시되게 해주는 것입니다.

@c If no suitable translation catalogue is found or a particular message is
@c not translated in any suitable catalogue, `English'@footnote{with
@c Americanisms.} is used.
만약 적합한 번역 카탈로그를 찾을 수 없거나 특정 메시지가 어떤 적합한 카탈로그에서 번역되어 있지 않다면 이는 영어@footnote{미국식}가 사용되게 됩니다.

@c See @uref{http://developer.r-project.org/@/Translations.html} for how to
@c prepare and install translation catalogues.
어떻게 번역 카탈로그를 준비하고 설치하는지 확인하기 위해서는 @uref{http://developer.r-project.org/@/Translations.html}를 살펴보시길 바랍니다.

@node Choosing between 32- and 64-bit builds, The standalone Rmath library, Internationalization, Top
@chapter Choosing between 32- and 64-bit builds

Many current @acronym{CPU}s have both 32- and 64-bit sets of
instructions: this has long been true for UltraSparc and more recently
for MIPS, PPC and @cputype{x86_64} (sometimes known as @cputype{amd64}
and @cputype{Intel64} and earlier as @cputype{EM64T}: practically all
current @cputype{ix86} CPUs support this set of instructions).  Most
OSes running on such @acronym{CPU}s offer the choice of building a
32-bit or a 64-bit version of R (and details are given below under
specific OSes).  For most a 32-bit version is the default, but for some
(e.g., @cputype{x86_64} Linux and (Mac) OS X >= 10.6) 64-bit is.

All current versions of @R{} use 32-bit integers and
@acronym{ISO}/@acronym{IEC}@tie{}60559@footnote{also known as
@acronym{IEEE}@tie{}754} double-precision reals, and so compute to
the same precision@footnote{at least when storing quantities: the on-FPU
precision is allowed to vary} and with the same limits on the sizes of
numerical quantities.  The principal difference is in the size of the
pointers.

64-bit builds have both advantages and disadvantages:
@itemize
@item
The total virtual memory space made available to a 32-bit process is
limited by the pointer size to 4GB, and on most OSes to 3GB (or even
2GB).  The limits for 64-bit processes are much larger (e.g.@:
8--128TB).

@R{} allocates memory for large objects as needed, and removes any
unused ones at garbage collection.  When the sizes of objects become an
appreciable fraction of the address limit, fragmentation of the address
space becomes an issue and there may be no hole available that is the
size requested.  This can cause more frequent garbage collection or the
inability to allocate large objects.  As a guide, this will become an
issue with objects more than 10% of the size of the address space
(around 300Mb) or when the total size of objects in use is around one
third (around 1Gb).

@item
Most 32-bit OSes by default limit file sizes to 2GB (and this may also
apply to 32-bit builds on 64-bit OSes).  This can often be worked
around: and @command{configure} selects suitable defines if this is
possible.  (We have also largely worked around that limit on 32-bit
Windows.)  64-bit builds have much larger limits.

@item
Because the pointers are larger, @R{}'s basic structures are larger.
This means that @R{} objects take more space and (usually) more time to
manipulate.  So 64-bit builds of @R{} will, all other things being
equal, run slower than 32-bit builds.  (On Sparc Solaris the difference
was 15-20%.)

@item
However, `other things' may not be equal.  In the specific case of
@cputype{x86_64} @emph{vs} @cputype{ix86}, the 64-bit CPU has features
(such as SSE2 instructions) which are guaranteed to be present but are
optional on the 32-bit CPU, and also has more general-purpose registers.
This means that on chips like a desktop Intel Core 2 Duo the vanilla
64-bit version of @R{} is around 10% faster on both Linux and OS X.
(Laptop CPUs are relatively slower in 64-bit mode.)
@end itemize

So, for speed you may want to use a 32-bit build, but to handle large
datasets (and perhaps large files) a 64-bit build.  You can often build
both and install them in the same place: @xref{Sub-architectures}.
(This is done in the OS X and Windows binary distributions.)

Even on 64-bit builds of @R{} there are limits on the size of @R{}
objects (see @code{help("Memory-limits")}, some of which stem from the
use of 32-bit integers (especially in FORTRAN code).  For example, the
dimensions of an array are limited to @math{2^{31} - 1}.

@node The standalone Rmath library, Essential and useful other programs under a Unix-alike, Choosing between 32- and 64-bit builds, Top
@chapter The standalone Rmath library

The routines supporting the distribution and
special@footnote{e.g.@: Bessel, beta and gamma functions} functions in @R{}
and a few others are declared in C header file @file{Rmath.h}.  These
can be compiled into a standalone library for linking to other
applications.  (Note that they are not a separate library when @R{} is
built, and the standalone version differs in several ways.)

The makefiles and other sources needed are in directory
@file{src/nmath/standalone}, so the following instructions assume that
is the current working directory (in the build directory tree on a
Unix-alike if that is separate from the sources).

@file{Rmath.h} contains @samp{R_VERSION_STRING}, which is a character
string containing the current @R{} version, for example @code{"2.15.0"}.

There is full access to @R{}'s handling of @code{NaN}, @code{Inf} and
@code{-Inf} via special versions of the macros and functions

@example
    ISNAN, R_FINITE, R_log, R_pow and R_pow_di
@end example

@noindent
and (extern) constants @code{R_PosInf}, @code{R_NegInf} and @code{NA_REAL}.

There is no support for @R{}'s notion of missing values, in particular
not for @code{NA_INTEGER} nor the distinction between @code{NA} and
@code{NaN} for doubles.

A little care is needed to use the random-number routines. You will
need to supply the uniform random number generator 

@example
    double unif_rand(void)
@end example

@noindent
or use the one supplied (and with a shared library or DLL you will
have to use the one supplied, which is the Marsaglia-multicarry with
an entry point

@example
    set_seed(unsigned int, unsigned int)
@end example

@noindent
to set its seeds).

The facilities to change the normal random number generator are
available through the constant N01_kind. This takes values
from the enumeration type

@example
typedef enum @{
    BUGGY_KINDERMAN_RAMAGE,
    AHRENS_DIETER,
    BOX_MULLER,
    USER_NORM,
    INVERSION,
    KINDERMAN_RAMAGE
@} N01type;
@end example

@noindent
(and @samp{USER_NORM} is not available).


@menu
* Unix-alike standalone::       
* Windows standalone::          
@end menu

@node Unix-alike standalone, Windows standalone, The standalone Rmath library, The standalone Rmath library
@section Unix-alikes

If @R{} has not already be made in the directory tree,
@command{configure} must be run as described in the main build
instructions.

Then (in @file{src/nmath/standalone})

@example
make
@end example

@noindent
will make standalone libraries @file{libRmath.a} and @file{libRmath.so}
(@file{libRmath.dylib} on Mac OS X): @samp{make static} and @samp{make
shared} will create just one of them.

@strong{NB:} certain compilers are unable to do compile-time IEC 60559
arithmetic and so cannot compile @file{mlutils.c} and several other
files.  The known example is old versions of Sun's @code{cc} (e.g.@:
Forte 6 and 7).


To use the routines in your own C or C++ programs, include

@example
#define MATHLIB_STANDALONE
#include <Rmath.h>
@end example

@noindent
and link against @samp{-lRmath} (and @samp{-lm} if needed on your OS).
The example file @file{test.c} does nothing useful, but is provided to
test the process (via @command{make test}).  Note that you will probably
not be able to run it unless you add the directory containing
@enindex LD_LIBRARY_PATH
@file{libRmath.so} to the @env{LD_LIBRARY_PATH} environment variable.

The targets

@example
make install
make uninstall
@end example

@noindent
will (un)install the header @file{Rmath.h} and shared and static
@enindex DESTDIR
libraries (if built).  Both @code{prefix=} and @env{DESTDIR} are
supported, together with more precise control as described for the main
build.

@samp{make install} installs a file for @command{pkg-config} to use by
e.g.

@example
$(CC) `pkg-config --cflags libRmath` -c test.c
$(CC) `pkg-config --libs libRmath` test.o -o test
@end example

On some systems @samp{make install-strip} will install a stripped shared
library.



@node Windows standalone,  , Unix-alike standalone, The standalone Rmath library
@section Windows

You need to set up@footnote{including copying @file{MkRules.dist} to
@file{MkRule.local} and selecting the architecture.} almost all the
tools to make @R{} and then run (in a Unix-like shell)

@example
(cd ../../gnuwin32; make MkRules)
(cd ../../include; make -f Makefile.win config.h Rconfig.h Rmath.h)
make -f Makefile.win
@end example

@noindent
For @file{cmd.exe} use

@example
cd ../../include
make -f Makefile.win config.h Rconfig.h Rmath.h
cd ../nmath/standalone
make -f Makefile.win
@end example


This creates a static library @file{libRmath.a} and a DLL
@file{Rmath.dll}.  If you want an import library @file{libRmath.dll.a}
(you don't need one), use

@example
make -f Makefile.win shared implib
@end example

To use the routines in your own C or C++ programs using MinGW, include

@example
#define MATHLIB_STANDALONE
#include <Rmath.h>
@end example

@noindent
and link against @samp{-lRmath}.  This will use the first found of
@file{libRmath.dll.a}, @file{libRmath.a} and @file{Rmath.dll} in that
order, so the result depends on which files are present.  You should be
able to force static or dynamic linking  @emph{via}

@example
-Wl,-Bstatic -lRmath -Wl,dynamic
-Wl,-Bdynamic -lRmath
@end example

@noindent
or by linking to explicit files (as in the @samp{test} target in
@file{Makefile.win}: this makes two executables, @file{test.exe} which
is dynamically linked, and @file{test-static.exe}, which is statically
linked).

It is possible to link to @file{Rmath.dll} using other compilers, either
directly or via an import library: if you make a MinGW import library as
above, you will create a file @file{Rmath.def} which can be used
(possibly after editing) to create an import library for other systems
such as Visual C++.

If you make use of dynamic linking you should use

@example
#define MATHLIB_STANDALONE
#define RMATH_DLL
#include <Rmath.h>
@end example

@noindent
to ensure that the constants like @code{NA_REAL} are linked correctly.
(Auto-import will probably work with MinGW, but it is better to be
sure. This is likely to also work with VC++, Borland and similar
compilers.)


@node Essential and useful other programs under a Unix-alike, Configuration on a Unix-alike, The standalone Rmath library, Top
@appendix Essential and useful other programs under a Unix-alike

This appendix gives details of programs you will need to build @R{} on
Unix-like platforms, or which will be used by @R{} if found by
@command{configure}.

Remember that some package management systems (such as @acronym{RPM} and
deb) make a distinction between the user version of a package and the
development version.  The latter usually has the same name but with the
extension @samp{-devel} or @samp{-dev}: you need both versions
installed.

@menu
* Essential programs and libraries::  
* Useful libraries and programs::  
* Linear algebra::              
@end menu

@node Essential programs and libraries, Useful libraries and programs, Essential and useful other programs under a Unix-alike, Essential and useful other programs under a Unix-alike
@section Essential programs and libraries

You need a means of compiling C and FORTRAN 90 (see @ref{Using
FORTRAN}).  Some add-on packages also need a C++ compiler.  Your C
compiler should be @acronym{ISO}/@acronym{IEC}@tie{}60059@footnote{also
known as @acronym{IEEE}@tie{}754}, POSIX 1003.1 and
C99-compliant.@footnote{Note that C11 compilers (when they appear) need
not be C99-compliant: @R{} requires support for @code{double complex}
which is optional in C11 but is mandatory in C99.}  @R{} tries to choose
suitable flags for the C compilers it knows about, but you may have to
set @code{CC} or @code{CFLAGS} suitably.  For recent versions of
@command{gcc} with @code{glibc} this means including
@option{-std=gnu99}@footnote{@option{-std=c99} excludes POSIX
functionality, but @file{config.h} will turn on all @acronym{GNU}
extensions to include the POSIX functionality.}.  If the compiler is
detected as @command{gcc}, @option{-std=gnu99} will be appended to
@code{CC} unless it conflicts with a setting of @code{CFLAGS}.  (Note
that options essential to run the compiler even for linking, such as
those to set the architecture, should be specified as part of @code{CC}
rather than in @code{CFLAGS}.)

Unless you do not want to view graphs on-screen (or use a Mac) you need
@samp{X11} installed, including its headers and client libraries. For
recent Fedora distributions it means (at least) RPMs @samp{libX11},
@samp{libX11-devel}, @samp{libXt} and @samp{libXt-devel}.  On Debian we
recommend the meta-package @samp{xorg-dev}.  If you really do not want
these you will need to explicitly configure @R{} without X11, using
@option{--with-x=no}.

The command-line editing (and command completion) depends on the
@acronym{GNU} @code{readline} library: version 4.2 or later is needed
for all the features to be enabled.  Otherwise you will need to
configure with @option{--with-readline=no} (or equivalent).

A suitably comprehensive @code{iconv} function is essential.  The @R{}
usage requires @code{iconv} to be able to translate between
@code{"latin1"} and @code{"UTF-8"}, to recognize @code{""} (as the
current encoding) and @code{"ASCII"}, and to translate to and from the
Unicode wide-character formats @code{"UCS-[24][BL]E"} --- this is true
for @code{glibc} but not of most commercial Unixes.  However, you can
make use of @acronym{GNU} @code{libiconv} (possibly as a plug-in
replacement: see @uref{http://www.gnu.org/@/software/@/libiconv/}).

An implementation of @acronym{XDR} is required.  This is part of
@acronym{RPC} and historically has been part of @file{libc} on a
Unix-alike: however some builds@footnote{apparently when built by
default, but not for example as built for Fedora 15.} of @code{glibc
2.14} hide it.  The intention seems to be that the @acronym{TI-RPC}
library be used instead, in which case @code{libtirpc} (and its
development version) needs to be installed, and its headers need to be
on the C include path (and @command{configure} tries
@file{/usr/include/tirpc} if the headers are not found on the standard
include path).  The @R{} sources contain a simple implementation of
@acronym{XDR} which in recent versions can be used on platforms with
32-bit or 64-bit @code{long} (and earlier ones will fail to compile
unless @code{long} is 32-bit).

The OS needs to have enough support@footnote{specifically, the C99
functionality of headers @file{wchar.h} and @file{wctype.h}, types
@code{wctans_t} and @code{mbstate_t} and functions @code{mbrtowc},
@code{mbstowcs}, @code{wcrtomb}, @code{wcscoll}, @code{wcstombs},
@code{wctrans}, @code{wctype}, and @code{iswctype}.} for wide-character
types: this is checked at configuration.

A @command{tar} program is needed to unpack the sources and packages
(including the recommended packages).  A version@footnote{Such as
@acronym{GNU} @command{tar} 1.15 or later, @command{bsdtar} (from
@uref{http://code.google.com/@/p/libarchive/}, as used by FreeBSD and OS
10.[67]) or @command{tar} from the Heirloom Toolchest
(@uref{http://heirloom.sourceforge.net/@/tools.html}).} that can
automagically detect compressed archives is preferred for use with
@code{untar()}: the configure script looks for @command{gtar} and
@command{gnutar} before
@enindex TAR
@command{tar}: use environment variable @env{TAR} to override this.

There need to be suitable versions of the tools @command{grep} and
@command{sed}: the problems are usually with old AT&T and BSD variants.
@command{configure} will try to find suitable versions (including
looking in @file{/usr/xpg4/bin} which is used on some commercial
Unixes).

You will not be able to build most of the manuals unless you have
@command{makeinfo} version 4.7 or later installed, and if not some of
the @HTML{} manuals will be linked to @acronym{CRAN}. To make PDF
versions of the manuals you will also need file @file{texinfo.tex}
installed (which is part of the @acronym{GNU} @pkg{texinfo} distribution
but is often made part of the @TeX{} package in re-distributions) as
well as @command{texi2dvi}.@footnote{@command{texi2dvi} is normally a
shell script.  Some versions, e.g.@: that from @pkg{texinfo} 4.13a, need
to be run under @command{bash} rather than a Bourne shell as on, say,
Solaris.}  Further, the versions of @command{texi2dvi} and
@file{texinfo.tex} need to be compatible: we have seen problems with
older @TeX{} distributions (TeXLive 2007 and MiKTeX 2.8) used with
@pkg{texinfo} 4.13.

@cindex Vignettes
The PDF documentation (including @file{doc/NEWS.pdf}) and building
vignettes needs @command{pdftex} and @command{pdflatex}.  We require
@LaTeX{} version @code{2005/12/01} or later (for UTF-8 support).
Building PDF package manuals (including the @R{} reference manual) and
vignettes is sensitive to the version of the @LaTeX{} package
@pkg{hyperref} and we recommend that the @TeX{} distribution used is
kept up-to-date.  A number of @LaTeX{} packages are required (including
@pkg{url.sty}, and @pkg{listings.sty}) and others such as @pkg{hyperref}
and @pkg{inconsolata} are desirable (and without them you will need to
change @R{}'s defaults: @pxref{Making the manuals}).


If you want to build from the R Subversion repository you need both
@command{makeinfo} and @command{pdflatex}.
@cindex Subversion

@enindex PATH
The essential programs should be in your @env{PATH} at the time
@command{configure} is run: this will capture the full paths.

@node Useful libraries and programs, Linear algebra, Essential programs and libraries, Essential and useful other programs under a Unix-alike
@section Useful libraries and programs

The ability to use translated messages makes use of @code{gettext} and
most likely needs @acronym{GNU} @code{gettext}: you do need this to work
with new translations, but otherwise the version contained in the R
sources will be used if no suitable external @code{gettext} is found.

The `modern' version of the @code{X11()}, @code{jpeg()}, @code{png()}
and @code{tiff()} graphics devices uses the @code{cairo} and
(optionally) @code{Pango} libraries.  Cairo version 1.2.0 or later is
required.  Pango needs to be at least version 1.10, and 1.12 is the
earliest version we have tested.  (For Fedora users we believe the
@code{pango-devel} RPM and its dependencies suffice.)  @R{} checks for
@command{pkg-config}, and uses that to check first that the
@samp{pangocairo} package is installed (and if not, @samp{cairo}) and if
additional flags are needed for the @samp{cairo-xlib} package, then if
suitable code can be compiled.  These tests will fail if
@command{pkg-config} is not installed, and are likely to fail if
@code{cairo} was built statically (unusual).  Most systems with
@code{Gtk+} 2.8 or later installed will have suitable libraries.  OS X
comes with none of these libraries, but @code{cairo} support (without
@code{Pango}) has been added to the binary distribution (see
@uref{http://r.research.att.com/libs/} you need @code{fontconfig},
@code{freetype} and @code{pixman} too): @code{pkg-config} is still
needed when building @R{} from source and can be installed from its
sources.

For the best font experience with these devices you need suitable fonts
installed: Linux users will want the @code{urw-fonts} package.  On
platforms which have it available, the @code{msttcorefonts}
package@footnote{also known as @code{ttf-mscorefonts-installer} in the
Debian/Ubuntu world: see also
@uref{http://en.wikipedia.org/wiki/Core_fonts_for_the_Web}.} provides
TrueType versions of Monotype fonts such as Arial and Times New Roman.
Another useful set of fonts is the `liberation' TrueType fonts available
at
@uref{https://www.redhat.com/@/promo/@/fonts/},@footnote{@code{ttf-liberation}
in Debian/Ubuntu.} which cover the Latin, Greek and Cyrillic alphabets
plus a fair range of signs.  These share metrics with Arial, Times New
Roman and Courier New, and contain fonts rather similar to the first two
(@uref{http://en.wikipedia.org/@/wiki/@/Liberation_fonts}).  Then there
is the `Free UCS Outline Fonts' project
(@uref{http://www.gnu.org/software/freefont/}) which are
OpenType/TrueType fonts based on the URW fonts but with extended Unicode
coverage.  See the @R{} help on @code{X11} on selecting such fonts.

The bitmapped graphics devices @code{jpeg()}, @code{png()} and
@code{tiff()} need the appropriate headers and libraries installed:
@code{jpeg} (version 6b or later, or @code{libjpeg-turbo}) or
@code{libpng} (version 1.2.7 or later, including 1.4.x and 1.5.x) and
@code{zlib} or @code{libtiff} (any recent version -- 3.9.[4567] and
4.0.[23] have been tested) respectively.  They also need support for
either @code{X11} or @code{cairo} (see above).  Should support for these
devices @strong{not} be required or broken system libraries need to be
avoided there are @command{configure} options @option{--without-libpng},
@option{--without-jpeglib} and @option{--without-libtiff}.  For most
system installations the TIFF libraries will require JPEG libraries to
be present and perhaps linked explicitly, so @option{--without-jpeglib}
may also disable the @code{tiff()} device.  The @code{tiff()} devices
only requires a basic build of @code{libtiff} (not even JPEG support is
needed).  Recent versions allow several other libraries to be linked
into @code{libtiff} such as @code{lzma}, @code{jbig} and @code{jpeg12},
and these may need also to be present.

If you have them installed (including the appropriate headers and of
suitable versions), system versions of @code{zlib}, @code{libbz2} and
PCRE will be used if specified by @option{--with-system-zlib} (version
1.2.3 or later), @option{--with-system-bzlib} or
@option{--with-system-pcre} (version 8.10 or later, preferably 8.30
which is what is supplied with @R{}): otherwise versions in the @R{}
sources will be compiled in.  As the latter suffice and are tested with
@R{} you should not need to change this.

@code{liblzma} from @code{xz-utils} version 4.999 or later (preferably
5.0.0 or later) will be used if installed: the version in the @R{}
sources can be selected instead by configuring with
@option{--with-system-xz=no}.

Use of the X11 clipboard selection requires the @code{Xmu} headers and
libraries.  These are normally part of an X11 installation (e.g.@: the
Debian meta-package @samp{xorg-dev}), but some distributions have split
this into smaller parts, so for example recent versions of Fedora
require the @samp{libXmu} and @samp{libXmu-devel} RPMs.

Some systems (notably OS X and at least some FreeBSD systems) have
inadequate support for collation in multibyte locales.  It is possible
to replace the OS's collation support by that from ICU (International
Components for Unicode, @uref{http://site.icu-project.org/}), and this
provides much more precise control over collation on all systems.  ICU
is available as sources and as binary distributions for (at least) most
Linux distributions, Solaris, FreeBSD and AIX, usually as @code{libicu}
or @code{icu4c}.  It will be used by default where available (including
on OS X >= 10.4): should a very old or broken version of ICU be found
this can be suppressed by @option{--without-ICU}.

The @code{bitmap} and @code{dev2bitmap} devices and also
@code{embedFonts()} use ghostscript
(@uref{http://www.cs.wisc.edu/@/~ghost}).  This should either be in your
path when the command is run, or its full path specified by the
environment variable @env{R_GSCMD} at that time.
@enindex R_GSCMD


@menu
* Tcl/Tk::                      
* Java support::                
@end menu

@node Tcl/Tk, Java support, Useful libraries and programs, Useful libraries and programs
@subsection Tcl/Tk

The @pkg{tcltk} package needs Tcl/Tk >= 8.4 installed: the sources are
available at @uref{http://@/www.tcl.tk/}.  To specify the locations of the
Tcl/Tk files you may need the configuration options

@table @option
@item --with-tcltk
use Tcl/Tk, or specify its library directory
@item --with-tcl-config=@var{TCL_CONFIG}
specify location of @file{tclConfig.sh}
@item --with-tk-config=@var{TK_CONFIG}
specify location of @file{tkConfig.sh}
@end table

@noindent
or use the configure variables @code{TCLTK_LIBS} and
@code{TCLTK_CPPFLAGS} to specify the flags needed for linking against
the Tcl and Tk libraries and for finding the @file{tcl.h} and
@file{tk.h} headers, respectively.  If you have both 32- and 64-bit
versions of Tcl/Tk installed, specifying the paths to the correct config
files may be necessary to avoid confusion between them.

Versions of Tcl/Tk up to 8.5.12 and 8.6.0 have been tested (including
most versions of 8.4.x, but not recently).

@node Java support,  , Tcl/Tk, Useful libraries and programs
@subsection Java support

@command{configure} looks for Java support on the host system, and if it
finds it sets some settings which are useful for Java-using packages.
@enindex JAVA_HOME
@env{JAVA_HOME} can be set during the @command{configure} run to point
to a specific JRE/JDK.

Principal amongst these are setting some library paths to the Java
libraries and JVM, which are stored in environment variable
@enindex R_JAVA_LD_LIBRARY_PATH
@env{R_JAVA_LD_LIBRARY_PATH} in file @file{@var{R_HOME}/etc/ldpaths} (or
a sub-architecture-specific version).  A typical setting for
@cputype{x86_64} Linux is

@smallexample
JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9.x86_64/jre
R_JAVA_LD_LIBRARY_PATH=$@{JAVA_HOME@}/lib/amd64/server:$@{JAVA_HOME@}/lib/amd64
@end smallexample

Note that this unfortunately depends on the exact version of the JRE/JDK
installed, and so may need updating if the Java installation is
updated.  This can be done by running @code{R CMD javareconf}. The
script re-runs Java detection in a manner similar to that of the
@code{configure} script and updates settings in both @file{Makeconf} and
@file{@var{R_HOME}/etc/ldpaths}. See @code{R CMD javareconf --help} for
details.  Alternatively a less specific version of @env{JAVA_HOME} can
be supplied at configuration: in the example above this would be

@smallexample
JAVA_HOME=/usr/lib/jvm/java-1.7.0/jre
@end smallexample

Another alternative of overriding those setting is to  set
@enindex R_JAVA_LD_LIBRARY_PATH
@env{R_JAVA_LD_LIBRARY_PATH} (e.g.@: in @file{~/.Renviron}), or use
@file{/etc/ld.so.conf} to specify the Java runtime library paths to
the system. Other settings are recorded in @file{etc/Makeconf} (or a
sub-architecture-specific version), e.g.

@smallexample
JAVA = /usr/bin/java
JAVAC = /usr/bin/javac
JAVA_HOME = /usr/java/jdk1.5.0_06/jre
JAVA_LD_LIBRARY_PATH = $(JAVA_HOME)/lib/amd64/server:$(JAVA_HOME)/lib/amd64:\
$(JAVA_HOME)/../lib/amd64:/usr/local/lib64
JAVA_LIBS = -L$(JAVA_HOME)/lib/amd64/server -L$(JAVA_HOME)/lib/amd64 
            -L$(JAVA_HOME)/../lib/amd64 -L/usr/local/lib64 -ljvm
@end smallexample

@noindent
where @samp{JAVA_LIBS} contains flags necessary to link JNI programs.
Some of the above variables can be queried using @code{R CMD config}.

@enindex R_JAVA_LD_LIBRARY_PATH
Beware that setting @env{R_JAVA_LD_LIBRARY_PATH} changes the library
path when @R{} and all its packages are loaded, not just for the Java
libraries and JVM.  This can cause problems with conflicts between
libraries supplied for use with Java and system libraries: it may be
necessary to trim the auto-detected value to e.g.
@smallexample

R_JAVA_LD_LIBRARY_PATH=$@{JAVA_HOME@}/lib/amd64/server
@end smallexample

@noindent
This is particularly prevalent when the Java installation is not part of
the OS, e.g.@: has been installed from Oracle on Linux or OS X.



@node Linear algebra,  , Useful libraries and programs, Essential and useful other programs under a Unix-alike
@section Linear algebra
@cindex BLAS library

@menu
* BLAS::                        
* LAPACK::                      
* Caveats::                     
@end menu

@node BLAS, LAPACK, Linear algebra, Linear algebra
@subsection BLAS

The linear algebra routines in @R{} can make use of enhanced
@acronym{BLAS} (Basic Linear Algebra Subprograms,
@uref{http://www.netlib.org/@/blas/@/faq.html}) routines.  However,
these have to be explicitly requested at configure time: @R{} provides
an internal @acronym{BLAS} which is well-tested and will be adequate for
most uses of @R{}.

You can specify a particular @acronym{BLAS} library @emph{via} a value
for the configuration option @option{--with-blas} and not to use an
external @acronym{BLAS} library by @option{--without-blas} (the
default).  If @option{--with-blas} is given with no @code{=}, its value
is taken from the
@enindex BLAS_LIBS
environment variable @env{BLAS_LIBS}, set for example in
@file{config.site}.  If neither the option nor the environment variable
supply a value, a search is made for a suitable @acronym{BLAS}.  If the
value is not obviously a linker command (starting with a dash or giving
the path to a library), it is prefixed by @samp{-l}, so

@example
--with-blas="foo"
@end example

@noindent
is an instruction to link against @samp{-lfoo} to find an external
@acronym{BLAS} (which needs to be found both at link time and run time).

The configure code checks that the external @acronym{BLAS} is complete
(it must include all double precision and double complex routines, as
well as @code{LSAME}), and appears to be usable.  However, an external
@acronym{BLAS} has to be usable from a shared object (so must contain
position-independent code), and that is not checked.

Some enhanced @acronym{BLAS}es are compiler-system-specific
(@code{sunperf} on Solaris@footnote{Using the Oracle Solaris Studio
@command{cc} and @command{f95} compilers}, @code{libessl} on IBM,
@code{Accelerate} on OS X).  The correct incantation for
these is usually found @emph{via} @option{--with-blas} with no value on
the appropriate platforms.

Some of the external @acronym{BLAS}es are multi-threaded.  One issue is
that @R{} profiling (which uses the @code{SIGPROF} signal) may cause
problems, and you may want to disable profiling if you use a
multi-threaded @acronym{BLAS}.  Note that using a multi-threaded
@acronym{BLAS} can result in taking more @acronym{CPU} time and even
more elapsed time (occasionally dramatically so) than using a similar
single-threaded @acronym{BLAS}.

Note that under Unix (but not under Windows) if @R{} is compiled against
a non-default @acronym{BLAS} and @option{--enable-BLAS-shlib} is
@strong{not} used, then all @acronym{BLAS}-using packages must also be.
So if @R{} is re-built to use an enhanced @acronym{BLAS} then packages
such as @CRANpkg{quantreg} will need to be re-installed.

@R{} relies on @acronym{ISO}/@acronym{IEC}@tie{}60559 compliance of an
external @acronym{BLAS}.  This can be broken if for example the code
assumes that terms with a zero factor are always zero and do not need to
be computed---whereas @code{x*0} can be @code{NaN}. This is checked in
the test suite.


@menu
* ATLAS::                       
* ACML::                        
* Goto BLAS::                   
* MKL::                         
* Shared BLAS::                 
@end menu

@node ATLAS, ACML, BLAS, BLAS
@subsubsection ATLAS

ATLAS (@uref{http://math-atlas.sourceforge.net/}) is a ``tuned''
@acronym{BLAS} that runs on a wide range of Unix-alike platforms.
Unfortunately it is usually built as a static library that on some
platforms cannot be used with shared objects such as are used in @R{}
packages.  Be careful when using pre-built versions of ATLAS (they seem
to work on @cputype{ix86} platforms, but not always on @cputype{x86_64}
ones).

The usual way to specify ATLAS will be via

@example
--with-blas="-lf77blas -latlas"
@end example

@noindent
if the libraries are in the library path, otherwise by

@example
--with-blas="-L/path/to/ATLAS/libs -lf77blas -latlas"
@end example

@noindent
For example, @cputype{x86_64} Fedora needs
@example
--with-blas="-L/usr/lib64/atlas -lf77blas -latlas"
@end example

For systems with multiple CPU cores it is possible to use a
multi-threaded version of ATLAS, by specifying

@example
--with-blas="-lptf77blas -lpthread -latlas"
@end example

Consult its file @file{INSTALL.txt} for how to build ATLAS with
position-independent code (at least on version 3.8.0 and later): that
file also describes how to build ATLAS as a shared library.

ATLAS can also be used on Windows: see @pxref{Getting the source files}
when building from source, and
@uref{http://CRAN.R-project.org/@/bin/@/windows/@/rw-FAQ.html, R Windows
@acronym{FAQ}} for adding pre-compiled support to binary versions.

@node ACML, Goto BLAS, ATLAS, BLAS
@subsubsection ACML

@c : there used to be Solaris 10, but it seems no more.
For @cputype{x86_64} and @cputype{i686} processors under Linux there is
the AMD Core Math Library (ACML) @uref{http://www.amd.com/@/acml}.  For
the @command{gcc} version we could use

@example
--with-blas="-lacml"
@end example

@noindent
if the appropriate library directory (such as
@enindex LD_LIBRARY_PATH
@file{/opt/acml5.1.0/gfortran64/lib}) is in the @env{LD_LIBRARY_PATH}.
For other compilers, see the ACML documentation.  There is a
multithreaded Linux version of ACML available for recent versions of
@command{gfortran}.  To make use of this you will need something like

@example
--with-blas="-L/opt/acml5.1.0/gfortran64_mp/lib -lacml_mp"
@end example

@noindent
(and you may need to arrange for the directory to be in @command{ld.so}
cache).

See @pxref{Shared BLAS} for an alternative (and in many ways preferable)
way to use ACML.

The version last tested (5.1.0) failed the @file{reg-BLAS.R} test in its
handling of @code{NA}s.

@node Goto BLAS, MKL, ACML, BLAS
@subsubsection Goto BLAS

Dr Kazushige Goto wrote another tuned @acronym{BLAS} which is
available for several processors and OSes.  The current version is known
as GotoBLAS2, and has (in November 2010) been re-released under a much
less restrictive licence.  Source code can be obtained from
@uref{http://www.tacc.utexas.edu/@/tacc-projects/@/gotoblas2/}

Once it is built and installed, it can be used by configuring @R{} with

@example
--with-blas="-lgoto2"
@end example

See @pxref{Shared BLAS} for an alternative (and in many ways preferable)
way to use it.

Our understanding is that this project is now frozen and so will not be
updated for CPUs released since mid-2010.  However, OpenBLAS
(@uref{http://xianyi.github.com/OpenBLAS/}) is a descendant project.

@node MKL, Shared BLAS, Goto BLAS, BLAS
@subsubsection Intel MKL
For Intel processors@footnote{and perhaps others} under Linux, there is
Intel's Math Kernel Library
(@uref{http://www.intel.com/@/software/@/products/@/mkl/}).  You are
strongly encouraged to read the MKL User's Guide, which is installed
with the library, before attempting to link to MKL.  There are also
versions of MKL for Mac OS X and Windows, but they did not work with the
standard compilers used for @R{} on those platforms.

The MKL interface has changed several times, and may change again: the
following notes apply exactly only to version 10.3.

Version 10 of MKL supports two linking models: the default model, which
is backward compatible with version 9 (see below), and the pure layered
model.  The layered model gives the user fine-grained control over four
different library layers: interface, threading, computation, and
run-time library support. Some examples of linking to MKL using this
layered model are given below. (These examples are for GCC compilers on
@cputype{x86_64}.)  The choice of interface layer is important on
@cputype{x86_64} since the Intel Fortran compiler returns complex values
in different registers from the @acronym{GNU} Fortran compiler. You must
therefore use the interface layer that matches your compiler
(@code{mkl_intel*} or @code{mkl_gf*}).

R can be linked to a sequential version of MKL by something like

@example
MKL_LIB_PATH=/opt/intel/mkl/10.311.339/lib/intel64/
export LD_LIBRARY_PATH=$MKL_LIB_PATH
MKL="-L$@{MKL_LIB_PATH@} -lmkl_gf_lp64 -lmkl_sequential -lmkl_core"
./configure --with-blas="$MKL" --with-lapack
@end example

@noindent
where some versions may need @code{-lmkl_lapack} before
@code{-lmkl_core}.  The order of the libraries is important.  The option
@option{--with-lapack} is used since MKL contains a tuned copy of LAPACK
as well as @acronym{BLAS} (@pxref{LAPACK}), although this can be
omitted.

Threaded MKL may be used (according to Zhang Zhang of Intel) by
replacing the line defining the variable @code{MKL} with (Intel OMP)

@example
MKL="-L$@{MKL_LIB_PATH@} -lmkl_gf_lp64 -lmkl_intel_thread \
     -lmkl_core -liomp5 -lpthread"
@end example

@noindent
or (GNU OMP)

@example
MKL="-L$@{MKL_LIB_PATH@} -lmkl_gf_lp64 -lmkl_gnu_thread \
     -lmkl_core -fopenmp -lpthread"
@end example

@noindent
The default number of threads will be chosen by the OpenMP software,
but can be controlled by setting @code{OMP_NUM_THREADS} or
@code{MKL_NUM_THREADS}, and in recent versions seems to produce a
sensible value for sole use of the machine.

Static threaded MKL may be used (GNU OpenMP) with something like

@example
MKL="   -L$@{MKL_LIB_PATH@}                               \
        -Wl,--start-group                               \
                $@{MKL_LIB_PATH@}/libmkl_gf_lp64.a        \
                $@{MKL_LIB_PATH@}/libmkl_gnu_thread.a     \
                $@{MKL_LIB_PATH@}/libmkl_core.a           \
        -Wl,--end-group                                 \
        -lgomp -lpthread"
@end example

@noindent
(Thanks to Ei-ji Nakama).

The MKL documentation includes a `link line advisor' which will suggest
appropriate incantations: an on-line version was available at
@uref{http://software.intel.com/@/en-us/@/articles/@/intel-mkl-link-line-advisor/}

The default linking model, which was also used by version 9 of MKL, can
be used by

@example
--with-blas="-lmkl -lguide -lpthread"
@end example

@noindent
but this may not match your compiler on a 64-bit platform.  This is
multi-threaded, but in version 9 the number of threads defaults to 1.
It can be increased by setting @code{OMP_NUM_THREADS}.  (Thanks to Andy
Liaw for the information.)

@node Shared BLAS,  , MKL, BLAS
@subsubsection Shared BLAS

The @acronym{BLAS} library will be used for many of the add-on packages
as well as for @R{} itself.  This means that it is better to use a
shared/dynamic @acronym{BLAS} library, as most of a static library will
be compiled into the @R{} executable and each @acronym{BLAS}-using
package.

@R{} offers the option of compiling the @acronym{BLAS} into a dynamic
library @code{libRblas} stored in @file{@var{R_HOME}/lib} and linking
both @R{} itself and all the add-on packages against that library.

This is the default on all platforms except AIX unless an external
@acronym{BLAS} is specified and found: for the latter it can be used by
specifying the option @option{--enable-BLAS-shlib}, and it can always be
disabled via @option{--disable-BLAS-shlib}.

This has both advantages and disadvantages.

@itemize
@item
It saves space by having only a single copy of the @acronym{BLAS}
routines, which is helpful if there is an external static @acronym{BLAS}
such as used to be standard for ATLAS.

@item
There may be performance disadvantages in using a shared @acronym{BLAS}.
Probably the most likely is when @R{}'s internal @acronym{BLAS} is used
and @R{} is @emph{not} built as a shared library, when it is possible to
build the @acronym{BLAS} into @file{R.bin} (and @file{libR.a}) without
using position-independent code.  However, experiments showed that in
many cases using a shared @acronym{BLAS} was as fast, provided high
levels of compiler optimization are used.

@item
It is easy to change the @acronym{BLAS} without needing to re-install
@R{} and all the add-on packages, since all references to the
@acronym{BLAS} go through @code{libRblas}, and that can be replaced.
Note though that any dynamic libraries the replacement links to will
need to be found by the linker: this may need the library path to be
changed in @file{@var{R_HOME}/etc/ldpaths}.
@end itemize

Another option to change the @acronym{BLAS} in use is to symlink a
dynamic @acronym{BLAS} library (such as ACML or Goto's) to
@file{@var{R_HOME}/lib/libRblas.so}.  For example, just

@example
mv @var{R_HOME}/lib/libRblas.so @var{R_HOME}/lib/libRblas.so.keep
ln -s /opt/acml5.1.0/gfortran64_mp/lib/libacml_mp.so @var{R_HOME}/lib/libRblas.so
@end example
will change the @acronym{BLAS} in use to multithreaded ACML.  A similar
link works for recent versions of the Goto @acronym{BLAS} and perhaps
for MKL (provided the appropriate @file{lib} directory is in the
run-time library path or @command{ld.so} cache).


@node LAPACK, Caveats, BLAS, Linear algebra
@subsection LAPACK

@cindex LAPACK library
Provision is made for using an external LAPACK library, principally to
cope with @acronym{BLAS} libraries which contain a copy of LAPACK (such
as @code{sunperf} on Solaris, @code{Accelerate} on OS X and ACML and MKL
on @cputype{ix86}/@cputype{x86_64} Linux).  At least LAPACK version 3.2
is required.

However, the likely performance gains are thought to be small (and may
be negative), and the default is not to search for a suitable LAPACK
library, and this is definitely @strong{not} recommended.  You can
specify a specific LAPACK library or a search for a generic library by
the configuration option @option{--with-lapack}.  The default for
@option{--with-lapack} is to check the @acronym{BLAS} library and then
look for an external library @samp{-llapack}.  Sites searching for the
fastest possible linear algebra may want to build a LAPACK library using
the ATLAS-optimized subset of LAPACK.  To do so specify something like

@example
--with-lapack="-L/path/to/ATLAS/libs -llapack -lcblas"
@end example

@noindent
since the ATLAS subset of LAPACK depends on @code{libcblas}.  A value
for @option{--with-lapack} can be set @emph{via} the environment
variable
@enindex LAPACK_LIBS
@env{LAPACK_LIBS}, but this will only be used if @option{--with-lapack}
is specified (as the default value is @code{no}) and the @acronym{BLAS} library
does not contain LAPACK.

Since ACML contains a full LAPACK, if selected as the @acronym{BLAS} it
can be used as the LAPACK @emph{via} @option{--with-lapack}.

If you do use @option{--with-lapack}, be aware of potential problems
with bugs in the LAPACK sources (or in the posted corrections to those
sources).  In particular, bugs in @code{DGEEV} and @code{DGESDD} have
resulted in error messages such as

@example
DGEBRD gave error code -10
@end example

@noindent
.  Other potential problems are incomplete versions of the libraries,
seen several times in Linux distributions over the years.

Please @strong{do} bear in mind that using @option{--with-lapack} is
`definitely @strong{not} recommended': it is provided @strong{only}
because it is necessary on some platforms and because some users want to
experiment with claimed performance improvements.  Reporting problems
where it is used unnecessarily will simply irritate the @R{} helpers.

Note too the comments about @acronym{ISO}/@acronym{IEC}@tie{}60559
compliance in the section of external @acronym{BLAS}: these apply
equally to an external LAPACK, and for example the Intel MKL
documentation says
@quotation
LAPACK routines assume that input matrices do not contain IEEE 754
special values such as INF or NaN values. Using these special values may
cause LAPACK to return unexpected results or become unstable.
@end quotation

As from @R{} 3.0.0 we rely on limited support in LAPACK for matrices
with @math{2^{31}} or more elements: it is quite possible that an
external LAPACK will not have that support.

@node Caveats,  , LAPACK, Linear algebra
@subsection Caveats

As with all libraries, you need to ensure that they and @R{} were
compiled with compatible compilers and flags.  For example, this has
meant that on Sun Sparc using the native compilers the flag
@option{-dalign} is needed so @code{sunperf} can be used.

On some systems it is necessary that an external @acronym{BLAS}/LAPACK
was built with the same FORTRAN compiler used to build @R{}: known
problems are with @R{} built with @command{gfortran}, @pxref{Using
gfortran}.



@node Configuration on a Unix-alike, Platform notes, Essential and useful other programs under a Unix-alike, Top
@appendix Configuration on a Unix-alike

@menu
* Configuration options::       
* Internationalization support::  
* Configuration variables::     
* Setting the shell::           
* Using make::                  
* Using FORTRAN::               
* Compile and load flags::      
@end menu

@node Configuration options, Internationalization support, Configuration on a Unix-alike, Configuration on a Unix-alike
@section Configuration options

@command{configure} has many options: running

@example
./configure --help
@end example

@noindent
will give a list.  Probably the most important ones not covered
elsewhere are (defaults in brackets)

@table @option
@item --with-x
use the X Window System [yes]
@item --x-includes=@var{DIR}
X include files are in @var{DIR}
@item --x-libraries=@var{DIR}
X library files are in @var{DIR}
@item --with-readline
use readline library (if available) [yes]
@item --enable-R-profiling
attempt to compile support for @code{Rprof()} [yes]
@item --enable-memory-profiling
attempt to compile support for @code{Rprofmem()} and @code{tracemem()} [no]
@item --enable-R-shlib
build @R{} as a shared/dynamic library [no]
@item --enable-BLAS-shlib
build the @acronym{BLAS} as a shared/dynamic library [yes, except on AIX]
@end table

@noindent
You can use @option{--without-foo} or @option{--disable-foo} for the
negatives.

You will want to use @option{--disable-R-profiling} if you are building
a profiled executable of @R{} (e.g.@: with @samp{-pg)}.

Flag @option{--enable-R-shlib} causes the make process to build @R{} as
a dynamic (shared) library, typically called @file{libR.so}, and link
the main @R{} executable @file{R.bin} against that library.  This can
only be done if all the code (including system libraries) can be
compiled into a dynamic library, and there may be a
performance@footnote{We have measured 15--20% on @cputype{i686} Linux
and around 10% on @cputype{x86_64} Linux.} penalty.  So you probably
only want this if you will be using an application which embeds @R{}.
Note that C code in packages installed on an @R{} system linked with
@option{--enable-R-shlib} is linked against the dynamic library and so
such packages cannot be used from an @R{} system built in the default
way.  Also, because packages are linked against @R{} they are on some
OSes also linked against the dynamic libraries @R{} itself is linked
against, and this can lead to symbol conflicts.

If you need to re-configure @R{} with different options you may need to run
@code{make clean} or even @code{make distclean} before doing so.


@node Internationalization support, Configuration variables, Configuration options, Configuration on a Unix-alike
@section Internationalization support

Translation of messages is supported via @acronym{GNU} @code{gettext}
unless disabled by the configure option @option{--disable-nls}.
The @code{configure} report will show @code{NLS} as one of the
`Additional capabilities' if support has been compiled in, and running
in an English locale (but not the @code{C} locale) will include

@example
  Natural language support but running in an English locale
@end example

@noindent
in the greeting on starting R.


@node Configuration variables, Setting the shell, Internationalization support, Configuration on a Unix-alike
@section Configuration variables

@findex configure
If you need or want to set certain configure variables to something
other than their default, you can do that by either editing the file
@file{config.site} (which documents many of the variables you might want
to set: others can be seen in file @file{etc/Renviron.in}) or on the
command line as

@example
./configure @var{VAR}=@var{value}
@end example

@noindent
If you are building in a directory different from the sources, there can
be copies of @file{config.site} in the source and the build directories,
and both will be read (in that order).  In addition, if there is a file
@file{~/.R/config} (or failing that) @code{~/.Rconfig}), it is read
between the @file{config.site} files in the source and the build
directories.

There is also a general @command{autoconf} mechanism for
@file{config.site} files, which are read before any of those mentioned
in the previous paragraph.  This looks first at a file specified by the
@enindex CONFIG_SITE
environment variable @env{CONFIG_SITE}, and if not is set at files such
as @file{/usr/local/share/config.site} and
@file{/usr/local/etc/config.site} in the area (exemplified by
@file{/usr/local}) where @R{} would be installed.

These variables are @emph{precious}, implying that they do not have to
be exported to the environment, are kept in the cache even if not
specified on the command line, checked for consistency between two
configure runs (provided that caching is used), and are kept during
automatic reconfiguration as if having been passed as command line
arguments, even if no cache is used.

See the variable output section of @code{configure --help} for a list of
all these variables.

If you find you need to alter configure variables, it is worth noting
that some settings may be cached in the file @file{config.cache}, and it
is a good idea to remove that file (if it exists) before re-configuring.
Note that caching is turned @emph{off} by default: use the command line
option @option{--config-cache} (or @option{-C}) to enable caching.

@menu
* Setting paper size::          
* Setting the browsers::        
* Compilation flags::           
* Making manuals::              
@end menu

@node Setting paper size, Setting the browsers, Configuration variables, Configuration variables
@subsection Setting paper size
@enindex R_PAPERSIZE
One common variable to change is @env{R_PAPERSIZE}, which defaults to
@samp{a4}, not @samp{letter}.  (Valid values are @samp{a4},
@samp{letter}, @samp{legal} and @samp{executive}.)

This is used both when configuring @R{} to set the default, and when
running @R{} to override the default.  It is also used to set the
paper size when making PDF manuals.

The configure default will most often be @samp{a4} if @env{R_PAPERSIZE}
is unset.  (If the (Debian Linux) program @command{paperconf} is found
@enindex PAPERSIZE
or the environment variable @env{PAPERSIZE} is set, these are used to
produce the default.)

@node Setting the browsers, Compilation flags, Setting paper size, Configuration variables
@subsection Setting the browsers

@enindex R_BROWSER
Another precious variable is @env{R_BROWSER}, the default HTML browser, which
should take a value of an executable in the user's path or specify
a full path.

@enindex R_PDFVIEWER
Its counterpart for PDF files is  @env{R_PDFVIEWER}.

@node Compilation flags, Making manuals, Setting the browsers, Configuration variables
@subsection Compilation flags

If you have libraries and header files, e.g., for @acronym{GNU}
readline, in non-system directories, use the variables @code{LDFLAGS}
(for libraries, using @samp{-L} flags to be passed to the linker) and
@code{CPPFLAGS} (for header files, using @samp{-I} flags to be passed to
the C/C++ preprocessors), respectively, to specify these locations.
These default to @samp{-L/usr/local/lib} (@code{LDFLAGS},
@samp{-L/usr/local/lib64} on most 64-bit Linux OSes) and
@samp{-I/usr/local/include} (@code{CPPFLAGS}) to catch the most common
cases.  If libraries are still not found, then maybe your
compiler/linker does not support re-ordering of @option{-L} and
@option{-l} flags (this has been reported to be a problem on HP-UX with
the native @command{cc}).  In this case, use a different compiler (or a
front end shell script which does the re-ordering).

These flags can also be used to build a faster-running version of @R{}.
On most platforms using @command{gcc}, having @samp{-O3} in
@code{CFLAGS} and @code{FFLAGS} produces worthwhile performance gains
with @command{gcc} and @command{gfortran}.  On systems using the
@acronym{GNU} linker (especially those using @R{} as a shared library),
it is likely that including @samp{-Wl,-O1} in @code{LDFLAGS} is
worthwhile, and @samp{'-Bdirect,--hash-style=both,-Wl,-O1'} is
recommended at @uref{http://lwn.net/@/Articles/@/192624/}.  Tuning
compilation to a specific @acronym{CPU} family (e.g.@:
@samp{-mtune=native} for @command{gcc}) can give worthwhile performance
gains, especially on older architectures such as @cputype{ix86}.

@node Making manuals,  , Compilation flags, Configuration variables
@subsection Making manuals

@enindex R_RD4PDF
@enindex R_PAPERSIZE
The default settings for making the manuals are controlled by
@env{R_RD4PDF} and @env{R_PAPERSIZE}.

@node Setting the shell, Using make, Configuration variables, Configuration on a Unix-alike
@section Setting the shell

By default the shell scripts such as @file{R} will be @samp{#!/bin/sh}
scripts (or using the @env{SHELL} chosen by @file{configure}).  This is
almost always satisfactory, but on a few systems @file{/bin/sh} is not a
Bourne shell or clone, and the shell to be used can be changed by
setting the configure variable @env{R_SHELL} to a suitable value (a full
path to a shell, e.g. @file{/usr/local/bin/bash}).

@node Using make, Using FORTRAN, Setting the shell, Configuration on a Unix-alike
@section Using make
@findex make

To compile @R{}, you will most likely find it easiest to use
@acronym{GNU} @command{make}, although the Sun @command{make} works on
Solaris, as does the native FreeBSD @command{make}.  The native
@command{make} has been reported to fail on SGI Irix 6.5 and Alpha/OSF1
(aka Tru64).

To build in a separate directory you need a @command{make} that uses the
@code{VPATH} variable, for example @acronym{GNU} @command{make}, or Sun
@command{make} on Solaris 7 or later.

@command{dmake} has also been used. e.g,@: on Solaris 10.

If you want to use a @command{make} by another name, for example if your
@acronym{GNU} @command{make} is called @samp{gmake}, you need to set the
variable @code{MAKE} at configure time, for example

@findex configure
@example
./configure MAKE=gmake
@end example

@node Using FORTRAN, Compile and load flags, Using make, Configuration on a Unix-alike
@section Using FORTRAN
@cindex FORTRAN

@menu
* Using gfortran::              
@end menu

To compile @R{}, you need a FORTRAN compiler.  The default
is to search for
@c F95_compilers in m4/R.m4:
@command{f95}, @command{fort}, @command{xlf95},
@command{ifort}, @command{ifc}, @command{efc}, @command{pgf95}
@command{lf95}, @command{gfortran}, @command{ftn}, @command{g95},
@c F90 compilers in m4/R.m4:
@command{f90}, @command{xlf90}, @command{pghpf}, @command{pgf90},
@command{epcf90},
@c F77 compilers in m4/R.m4:
@command{g77}, @command{f77}, @command{xlf}, @command{frt},
@command{pgf77}, @command{cf77}, @command{fort77}, @command{fl32},
@command{af77} (in that order)@footnote{On HP-UX @command{fort77} is the
@acronym{POSIX} compliant FORTRAN compiler, and comes after
@command{g77}.}, and use whichever is found first; if none is found,
@R{} cannot be compiled.
@c GCC_Fortran_compiler in m4/R.m4:
However, if @command{CC} is @command{gcc}, the matching FORTRAN compiler
(@command{g77} for @command{gcc}@tie{}3 and @code{gfortran} for
@command{gcc}@tie{}4) is used if available.

The search mechanism can be changed using the configure variable
@code{F77} which specifies the command that runs the FORTRAN 77
compiler.  If your FORTRAN compiler is in a non-standard location, you
@enindex PATH
should set the environment variable @env{PATH} accordingly before
running @command{configure}, or use the configure variable @code{F77} to
specify its full path.

If your FORTRAN libraries are in slightly peculiar places, you should
@enindex LD_LIBRARY_PATH
also look at @env{LD_LIBRARY_PATH} or your system's equivalent to make
sure that all libraries are on this path.

Note that only FORTRAN compilers which convert identifiers to lower case
are supported.

You must set whatever compilation flags (if any) are needed to ensure
that FORTRAN @code{integer} is equivalent to a C @code{int} pointer and
FORTRAN @code{double precision} is equivalent to a C @code{double}
pointer.  This is checked during the configuration process.

Some of the FORTRAN code makes use of @code{COMPLEX*16} variables, which
is a Fortran 90 extension.  This is checked for at configure
time@footnote{as well as its equivalence to the @code{Rcomplex}
structure defined in @file{R_ext/Complex.h}.}, but you may need to avoid
compiler flags asserting FORTRAN 77 compliance.

Compiling the version of LAPACK in the @R{} sources also requires some
Fortran 90 extensions, but these are not needed if an external LAPACK is
used.

@cindex BLAS library
For performance reasons@footnote{e.g., to use an optimized @acronym{BLAS} on
Sun/Sparc} you may want to choose a FORTRAN 90/95 compiler.

It may be possible to use @command{f2c}, the FORTRAN-to-C converter
(@uref{http://www.netlib.org/@/f2c}), via a script.  (An example script
is given in @file{scripts/f77_f2c}: this can be customized by setting
@enindex F2C
@enindex F2CLIBS
@enindex CC
the environment variables @env{F2C}, @env{F2CLIBS}, @env{CC} and
@enindex CPP
@env{CPP}.)  You will need to ensure that the FORTRAN type
@code{integer} is translated to the C type @code{int}.  Normally
@file{f2c.h} contains @samp{typedef long int integer;}, which will work
on a 32-bit platform but not on a 64-bit platform.  If your compiler is
not @command{gcc} you
@enindex FPICFLAGS
will need to set @env{FPICFLAGS} appropriately.


@node Using gfortran,  , Using FORTRAN, Using FORTRAN
@subsection Using gfortran

@command{gfortran} is the F95 compiler that is part of
@command{gcc}@tie{}4.@var{x}.@var{y}.

On Linux @cputype{x86_64} systems there is an incompatibility in the
return conventions for double-complex functions between
@command{gfortran} and @command{g77} which results in the final example
in @code{example(eigen)} hanging or segfaulting under external @acronym{BLAS}s
built under @command{g77}.  This should be detected by a
@command{configure} test.  Although @command{g77} is long obsolete this
is still sometimes seen with C versions of external software using
@command{g77} conventions.

The default @code{FFLAGS} and @code{FCFLAGS} chosen (by
@command{autoconf}) for a @acronym{GNU} FORTRAN compiler is @samp{-g
-O2}.  This has caused problems (segfaults and infinite loops) on
@cputype{x86_64} Linux in the past, but seems fine with
@command{gfortran 4.4.4} and later: for @code{gfortran 4.3.x} set
@code{FFLAGS} and @code{FCFLAGS} to use at most @samp{-O}.

@node Compile and load flags,  , Using FORTRAN, Configuration on a Unix-alike
@section Compile and load flags

A wide range of flags can be set in the file @file{config.site} or as
configure variables on the command line.  We have already mentioned

@table @code
@item CPPFLAGS
header file search directory (@option{-I}) and any other miscellaneous
options for the C and C++ preprocessors and compilers
@item LDFLAGS
path (@option{-L}), stripping (@option{-s}) and any other miscellaneous
options for the linker
@end table

@noindent
and others include

@table @code
@item CFLAGS
debugging and optimization flags, C
@item MAIN_CFLAGS
ditto, for compiling the main program
@item SHLIB_CFLAGS
for shared objects
@item FFLAGS
debugging and optimization flags, FORTRAN
@item SAFE_FFLAGS
ditto for source files which need exact floating point behaviour
@item MAIN_FFLAGS
ditto, for compiling the main program
@item SHLIB_FFLAGS
for shared objects
@item MAIN_LDFLAGS
additional flags for the main link
@item SHLIB_LDFLAGS
additional flags for linking the shared objects
@item LIBnn
the primary library directory, @file{lib} or @file{lib64}
@item CPICFLAGS
special flags for compiling C code to be turned into a shared object
@item FPICFLAGS
special flags for compiling Fortran code to be turned into a shared object
@item CXXPICFLAGS
special flags for compiling C++ code to be turned into a shared object
@item FCPICFLAGS
special flags for compiling Fortran 95 code to be turned into a shared object
@item DEFS
defines to be used when compiling C code in R itself
@end table

@noindent
Library paths specified as @option{-L/lib/path} in @code{LDFLAGS} are
@enindex LD_LIBRARY_PATH
collected together and prepended to @env{LD_LIBRARY_PATH} (or your
system's equivalent), so there should be no need for @option{-R} or
@option{-rpath} flags.

Variables such as @env{CPICFLAGS} are determined where possible by
@command{configure}.  Some systems allows two types of PIC flags, for
example @samp{-fpic} and @samp{-fPIC}, and if they differ the first
allows only a limited number of symbols in a shared object.  Since @R{}
as a shared library has about 6200 symbols, if in doubt use the larger
version.

To compile a profiling version of @R{}, one might for example want to
use @samp{MAIN_CFLAGS=-pg}, @samp{MAIN_FFLAGS=-pg},
@samp{MAIN_LDFLAGS=-pg} on platforms where @samp{-pg} cannot be used
with position-independent code.

@strong{Beware}: it may be necessary to set @code{CFLAGS} and
@code{FFLAGS} in ways compatible with the libraries to be used: one
possible issue is the alignment of doubles, another is the way
structures are passed.

On some platforms @command{configure} will select additional flags for
@code{CFLAGS}, @code{CPPFLAGS}, @code{FFLAGS}, @code{CXXFLAGS} and
@code{LIBS} in @code{R_XTRA_CFLAGS} (and so on).  These are for options
which are always required, for example to force @acronym{IEC}@tie{}60559
compliance.


@node Platform notes, The Windows toolset, Configuration on a Unix-alike, Top
@appendix Platform notes

This section provides some notes on building @R{} on different Unix-alike
platforms.  These notes are based on tests run on one or two systems in
each case with particular sets of compilers and support libraries.
Success in building @R{} depends on the proper installation and functioning
of support software; your results may differ if you have other versions
of compilers and support libraries.

Older versions of this manual (for @R{} < 2.10.0) contain notes on
platforms such as HP-UX, IRIX and Alpha/OSF1 for which we have had no
recent reports.

C macros to select particular platforms can be tricky to track down
(there is a fair amount of misinformation on the Web).  The Wiki
(currently) at @uref{http://sourceforge.net/p/predef/wiki/Home/} can be
helpful.  The @R{} sources currently use
@example
AIX: _AIX
Cygwin: __CYGWIN__
FreeBSD: __FreeBSD__
HP-UX: __hpux__, __hpux
IRIX: sgi, __sgi
Linux: __linux__
Mac OS X: __APPLE__
NetBSD: __NetBSD__
OpenBSD: __OpenBSD__
Solaris: __sun, sun
Windows: _WIN32, _WIN64
@end example

@menu
* X11 issues::                  
* Linux::                       
* FreeBSD::                     
* Mac OS X::                    
* Solaris::                     
* AIX::                         
* Cygwin::                      
* New platforms::               
@end menu

@node X11 issues, Linux, Platform notes, Platform notes
@section X11 issues

The @samp{X11()} graphics device is the one started automatically on
Unix-alikes when plotting.  As its name implies, it displays on a (local
or remote) X server, and relies on the services provided by the X
server.

The `modern' version of the @samp{X11()} device is based on @samp{cairo}
graphics and (in most implementations) uses @samp{fontconfig} to pick and
render fonts.  This is done on the server, and although there can be
selection issues, they are more amenable than the issues with
@samp{X11()} discussed in the rest of this section.

When X11 was designed, most displays were around 75dpi, whereas today
they are of the order of 100dpi or more.  If you find that X11()
is reporting@footnote{for example, @code{X11 font at size 14 could not
be loaded}.} missing font sizes, especially larger ones, it is likely
that you are not using scalable fonts and have not installed the 100dpi
versions of the X11 fonts.  The names and details differ by system, but
will likely have something like Fedora's
@example
xorg-x11-fonts-75dpi
xorg-x11-fonts-100dpi
xorg-x11-fonts-ISO8859-2-75dpi
xorg-x11-fonts-Type1
xorg-x11-fonts-cyrillic
@end example

@noindent
and you need to ensure that the @samp{-100dpi} versions are installed
and on the X11 font path (check via @command{xset -q}).  The
@samp{X11()} device does try to set a pointsize and not a pixel size:
laptop users may find the default setting of 12 too large (although very
frequently laptop screens are set to a fictitious dpi to appear like a
scaled-down desktop screen).

More complicated problems can occur in non-Western-European locales, so
if you are using one, the first thing to check is that things work in
the @code{C} locale.  The likely issues are a failure to find any fonts
or glyphs being rendered incorrectly (often as a pair of ASCII
characters).  X11 works by being asked for a font specification and
coming up with its idea of a close match.  For text (as distinct from
the symbols used by plotmath), the specification is the first element of
the option @code{"X11fonts"} which defaults to

@example
"-adobe-helvetica-%s-%s-*-*-%d-*-*-*-*-*-*-*"
@end example

If you are using a single-byte encoding, for example ISO 8859-2 in
Eastern Europe or KOI8-R in Russian, use @command{xlsfonts} to find an
appropriate family of fonts in your encoding (the last field in the
listing).  If you find none, it is likely that you need to install
further font packages, such as @samp{xorg-x11-fonts-ISO8859-2-75dpi} and
@samp{xorg-x11-fonts-cyrillic} shown in the listing above.

Multi-byte encodings (most commonly UTF-8) are even more complicated.
There are few fonts in @samp{iso10646-1}, the Unicode encoding, and they
only contain a subset of the available glyphs (and are often fixed-width
designed for use in terminals).  In such locales @emph{fontsets} are
used, made up of fonts encoded in other encodings.  If the locale you
are using has an entry in the @samp{XLC_LOCALE} directory (typically
@file{/usr/share/X11/locale}, it is likely that all you need to do is to
pick a suitable font specification that has fonts in the encodings
specified there.  If not, you may have to get hold of a suitable locale
entry for X11.  This may mean that, for example, Japanese text can be
displayed when running in @samp{ja_JP.UTF-8} but not when running in
@samp{en_GB.UTF-8} on the same machine (although on some systems many
UTF-8 X11 locales are aliased to @samp{en_US.UTF-8} which covers several
character sets, e.g.@: ISO 8859-1 (Western European), JISX0208 (Kanji),
KSC5601 (Korean), GB2312 (Chinese Han) and JISX0201 (Kana)).

On some systems scalable fonts are available covering a wide range of
glyphs.  One source is TrueType/OpenType fonts, and these can provide
high coverage.  Another is Type 1 fonts: the URW set of Type 1 fonts
provides standard typefaces such as Helvetica with a larger coverage of
Unicode glyphs than the standard X11 bitmaps, including Cyrillic.  These
are generally not part of the default install, and the X server may need
to be configured to use them.  They might be under the X11 @file{fonts}
directory or elsewhere, for example,

@example
/usr/share/fonts/default/Type1
/usr/share/fonts/ja/TrueType
@end example


@node Linux, FreeBSD, X11 issues, Platform notes
@section Linux
@cindex Linux

Linux is the main development platform for @R{}, so compilation from the
sources is normally straightforward with the standard compilers.

Remember that some package management systems (such as @acronym{RPM} and
deb) make a distinction between the user version of a package and the
developer version.  The latter usually has the same name but with the
extension @samp{-devel} or @samp{-dev}: you need both versions
installed.  So please check the @code{configure} output to see if the
expected features are detected: if for example @samp{readline} is
missing add the developer package.  (On most systems you will also need
@samp{ncurses} and its developer package, although these should be
dependencies of the @samp{readline} package(s).)

When @R{} has been installed from a binary distribution there are
sometimes problems with missing components such as the FORTRAN
compiler.  Searching the @samp{R-help} archives will normally reveal
what is needed.

It seems that @cputype{ix86} Linux accepts non-PIC code in shared
libraries, but this is not necessarily so on other platforms, in
particular on 64-bit @acronym{CPU}s such as @cputype{x86_64}.  So care
can be needed with @acronym{BLAS} libraries and when building @R{} as a
shared library to ensure that position-independent code is used in any
static libraries (such as the Tcl/Tk libraries, @code{libpng},
@code{libjpeg} and @code{zlib}) which might be linked against.
Fortunately these are normally built as shared libraries with the
exception of the ATLAS @acronym{BLAS} libraries.

The default optimization settings chosen for @code{CFLAGS} etc are
conservative.  It is likely that using @option{-mtune} will result in
significant performance improvements on recent CPUs (especially for
@cputype{ix86}): one possibility is to add @option{-mtune=native} for
the best possible performance on the machine on which @R{} is being
installed: if the compilation is for a site-wide installation, it may
still be desirable to use something like
@option{-mtume=core2}.@footnote{or @code{-mtune=corei7} for Intel Core
i3/15/17 with @command{gcc >= 4.6.0}.} It is also possible to increase the
optimization levels to @option{-O3}: however for many versions of the
compilers this has caused problems in at least one @acronym{CRAN}
package.

For platforms with both 64- and 32-bit support, it is likely that

@example
LDFLAGS="-L/usr/local/lib64 -L/usr/local/lib"
@end example

@noindent
is appropriate since most (but not all) software installs its 64-bit
libraries in @file{/usr/local/lib64}.  To build a 32-bit version of @R{}
on @cputype{x86_64} with Fedora 16 we used

@example
CC="gcc -m32"
CXX="g++ -m32"
F77="gfortran -m32"
FC=$@{F77@}
OBJC=$@{CC@}
LDFLAGS="-L/usr/local/lib"
LIBnn=lib
@end example

@noindent
Note the use of @samp{LIBnn}: @cputype{x86_64} Fedora installs its
64-bit software in @file{/usr/lib64} and 32-bit software in
@file{/usr/lib}.  Linking will skip over inappropriate binaries, but for
example the 32-bit Tcl/Tk configure scripts are in @file{/usr/lib}.  It
may also be necessary to set the @command{pkg-config} path, e.g.@: by

@example
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig
@end example

64-bit versions of Linux are built with support for files > 2Gb, and
32-bit versions will be if possible unless @option{--disable-largefile}
is specified.

To build a 64-bit version of @R{} on @cputype{ppc64} (also known as
@cputype{powerpc64}) with @command{gcc}@tie{}4.1.1, Ei-ji Nakama used

@example
CC="gcc -m64"
CXX="gxx -m64"
F77="gfortran -m64"
FC="gfortran -m64"
CFLAGS="-mminimal-toc -fno-optimize-sibling-calls -g -O2"
FFLAGS="-mminimal-toc -fno-optimize-sibling-calls -g -O2"
@end example

@noindent
the additional flags being needed to resolve problems linking against
@file{libnmath.a} and when linking @R{} as a shared library.

@menu
* Clang::                       
* Intel compilers::             
* Oracle Solaris Studio compilers::  
@end menu

@node Clang, Intel compilers, Linux, Linux
@subsection Clang

@R{} has been built with Linux @cputype{ix86} and @cputype{x86_64} C and
C++ compilers (@uref{http://clang.llvm.org}, versions 2.9 and 3.0) based
on the Clang front-ends, invoked by @code{CC=clang CXX=clang++},
together with @command{gfortran}.  These take very similar options to
the corresponding GCC compilers.

@node Intel compilers, Oracle Solaris Studio compilers, Clang, Linux
@subsection Intel compilers

Intel compilers have been used under @cputype{ix86} and @cputype{x86_64}
Linux.  Brian Ripley used version 9.0 of the compilers for
@cputype{x86_64} on Fedora Core 5 with

@example
CC=icc
CFLAGS="-g -O3 -wd188 -ip -mp"
F77=ifort
FLAGS="-g -O3 -mp"
CXX=icpc
CXXFLAGS="-g -O3 -mp"
FC=ifort
FCFLAGS="-g -O3 -mp"
ICC_LIBS=/opt/compilers/intel/cce/9.1.039/lib
IFC_LIBS=/opt/compilers/intel/fce/9.1.033/lib
LDFLAGS="-L$ICC_LIBS -L$IFC_LIBS -L/usr/local/lib64"
SHLIB_CXXLD=icpc
@end example

@noindent
@command{configure} will add @samp{-c99} to @code{CC} for
C99-compliance.  This causes warnings with @code{icc} 10 and later, so
use @code{CC="icc -std=c99"} there.  The flag @option{-wd188} suppresses
a large number of warnings about the enumeration type @samp{Rboolean}.
Because the Intel C compiler sets @samp{__GNUC__} without complete
emulation of @command{gcc}, we suggest adding @code{CPPFLAGS=-no-gcc}.

To maintain correct @acronym{IEC}@tie{}60559 arithmetic you most likely
need add flags to @code{CFLAGS}, @code{FFLAGS} and @code{CXXFLAGS} such
as @option{-mp} (shown above) or @option{-fp-model precise -fp-model
source}, depending on the compiler version.

For some comments on building on an Itanium (@cputype{ia64}) Linux
system with @command{gcc} or the Intel compilers see
@uref{http://www.nakama.ne.jp/@/memo/@/ia64_linux/}.

Others have reported success with versions 10.x and 11.x.


@node Oracle Solaris Studio compilers,  , Intel compilers, Linux
@subsection Oracle Solaris Studio compilers

Brian Ripley tested the Sun Studio 12 compilers, since renamed to Oracle
Solaris Studio,
(@uref{http://developers.sun.com/@/sunstudio/@/index.jsp}) 
On
@cputype{x86_64} Linux with

@example
CC=suncc
CFLAGS="-xO5 -xc99 -xlibmil -nofstore"
CPICFLAGS=-Kpic
F77=sunf95
FFLAGS="-O5 -libmil -nofstore"
FPICFLAGS=-Kpic
CXX="sunCC -library=stlport4"
CXXFLAGS="-xO5 -xlibmil -nofstore -features=tmplrefstatic"
CXXPICFLAGS=-Kpic
FC=sunf95
FCFLAGS=$FFLAGS
FCPICFLAGS=-Kpic
LDFLAGS=-L/opt/sunstudio12.1/rtlibs/amd64
SHLIB_LDFLAGS=-shared
SHLIB_CXXLDFLAGS=-G
SHLIB_FCLDFLAGS=-G
SAFE_FFLAGS="-O5 -libmil"
@end example

@noindent
@option{-m64} could be added, but was the default.  Do not use
@option{-fast}: see the warnings under Solaris. (The C++ options are
also explained under Solaris.)

Others have found on at least some versions of @cputype{ix86} Linux that
the configure flag @option{--disable-largefile} was needed (since
@file{glob.h} on that platform presumed @command{gcc} was being used).

@node FreeBSD, Mac OS X, Linux, Platform notes
@section FreeBSD
@cindex FreeBSD

Rainer Hurling has reported success on @cputype{amd64} FreeBSD 9.0 (and
on earlier versions in the past), and Brian Ripley tested
@cputype{amd64} FreeBSD 8.2.  Since Darwin (the base OS of (Mac) OS X)
is based on FreeBSD we find testing on Darwin tends to pick up most
potential problems on FreeBSD.  However, FreeBSD lacks adequate
character type (e.g.@: which are alphabetic) and collation support for
multi-byte locales (but a port of ICU is available), and does not yet
implement C99 complex math functions (for which @R{}'s substitutes are
used).

The native BSD @command{make} suffices to build @R{} but a number of
packages require @acronym{GNU} @command{make}, despite the
recommendations of the ``Writing R Extensions'' manual.  (The BSD
version is @command{bsdmake} on Darwin.)

The simplest way to get the additional software needed to build @R{} is
to install a pre-compiled version first, e.g.@: by

@example
pkg_add -r R
@end example

@noindent
(on the system this was tested on, this installed Tcl, Tk, blas, lapack
and @code{gcc-4.6.2} which includes @command{gfortran46}).  A listing of
dependencies (not necessarily for current @R{}) can be found at
@uref{http://www.freebsd.org/@/ports/@/lang.html}: you will however also
need a @TeX{} system@footnote{TeXLive is recommended.} to build the
manuals.

Then @R{} itself can be built by something like

@example
./configure CC=gcc46 F77=gfortran46 CXX=g++46 FC=gfortran46
@end example

There are also FreeBSD packages for a small eclectic collection of
@acronym{CRAN} packages.

Beware that the lack of adequate support for non-ASCII characters in
UTF-8 locales has many consequences in @R{}: for example names will not
be recognized as alphabetic by @code{make.names}.

@node Mac OS X, Solaris, FreeBSD, Platform notes
@section (Mac) OS X
@cindex OS X

@strong{NB:}  Information on OS X is likely to change before release of
@R{} 3.0.0.

You can build @R{} as a Unix application on OS X using Apple's `Command
Line Tools for Xcode' and and suitable compilers (including a version of
@command{gfortran}). You will also need
@code{readline} (or to configure with @option{--without-readline}).

You may also want to install an X sub-system (or you will need to
configure with @option{--without-x}): X is part of the standard OS X
distribution in versions prior to Mountain Lion, but not always
installed.  For Mountain Lion, see
@uref{http://xquartz.macosforge.org/}: some people prefer to use XQuartz
on earlier versions of OS X instead of the Apple version.

In principle @R{} can be built for 10.4.x and for PowerPC Macs but this
has not been tested recently: 10.5.8 (Leopard) is the earliest version
currently tested.

To use the @code{quartz()} graphics device you need to configure with
@option{--with-aqua} (which is the default): @code{quartz()} then
becomes the default device when running @R{} at the console and X11
would only be used for the data editor/viewer.  (This needs an
Objective-C compiler.)

Use @option{--without-aqua} if you want a standard Unix-alike build:
apart from disabling @code{quartz()} and the ability to use the build
with @Rapp{}, it also changes the default location of the personal
library (see @code{?.libPaths()}).  Also use
@option{--disable-R-framework} to install in the standard layout.

`Command Line Tools for Xcode' used to be part of he Apple
Developer Tools (`Xcode') but nowadays need to be installed
separately.  They can be downloaded from
@uref{http://developer.apple.com/download} (you will need to register
there) or if you have a recent Xcode installed (from the App Store or
from @uref{https://developer.apple.com/devcenter/mac/}) you can install
the command-line tools from within Xcode, from the @samp{Downloads} pane
in the @samp{Preferences}.

Where to find suitable compilers is described for each supported version
of OS X below.  Note that some compilers have suffix @code{-4.2} and
some do not---the CRAN binary build was built with those without.

Pre-compiled versions of many of the @ref{Useful libraries and programs}
are available from @uref{http://r.research.att.com/libs/}.  You will
most likely want at least @code{jpeg}, @code{libpng} and @code{readline}
(and perhaps @code{tiff}).

@cindex BLAS library
@cindex LAPACK library
The @code{Accelerate} library can be used @emph{via} the configuration options

@example
--with-blas="-framework Accelerate" --with-lapack
@end example

@noindent
to provide higher-performance versions of the @acronym{BLAS} and LAPACK
routines.  (Use of @code{Accelerate} with @option{--with-lapack} did not
work on Snow Leopard.)

Note that the Apple versions of GCC (where available, and those on
@uref{http://r.research.att.com}) are based on version 4.2 from
2007. That is now a long time ago and later versions (as used on other
@R{} platforms, including @code{CRAN}'s incoming checks) are better at
detecting coding errors.  If can be well worth checking your code with
@command{clang}/@command{clang++}: @R{} itself is checked with
@command{clang 4.x}.

Recent compilers default to 64-bit, but some older ones (supplied at the
time of Leopard) default to 32-bit.  It is safest to explicitly specify
the architecture by e.g.@:

@example
CC='gcc-4.2 -arch x86_64'
CXX='g++-4.2 -arch x86_64'
F77='gfortran-4.2 -arch x86_64'
FC='gfortran-4.2 -arch x86_64'
OBJC='gcc-4.2 -arch x86_64'
@end example
in @file{config.site} or on the @command{configure} command line.

To produce a 32-bit build, use @samp{i386} instead of @samp{x86_64}.

@menu
* Snow Leopard::                
* Lion::                        
* Mountain Lion::               
* Tcl/Tk headers and libraries::  
* Frameworks::                  
* Building R.app::              
@end menu

@node Snow Leopard, Lion, Mac OS X, Mac OS X
@subsection Snow Leopard

The versions of Xcode (3.2.x) supplied for Snow Leopard contained usable
C and C++ compilers.  A matching @command{gfortran} can be installed
from @uref{http://r.research.att.com/tools/} (it needs to match the
version of Xcode in use).

A quirk on Snow Leopard is that the X11 libraries are not in the default
linking path, so something like @samp{LIBS=-L/usr/X11/lib} may be
required in @file{config.site} (or you can use the @command{configure}
options @option{--x-includes=/usr/X11/include
--x-libraries=/usr/X11/lib.}).

@node Lion, Mountain Lion, Snow Leopard, Mac OS X
@subsection Lion

With Xcode 4.2 and later you need to install a package named like
@uref{http://r.research.att.com/@/tools/@/gcc-42-5666.3-darwin11.pkg} to
provide compilers named @command{gcc-4.2}, @command{g++-4.2} and
@command{gfortran-4.2}.  These default to 64-bit, so for a 64-bit build
@file{config.site} in the top-level build directory could contain

@example
CC=gcc-4.2
CXX=g++-4.2
F77=gfortran-4.2
FC=gfortran-4.2
OBJC=gcc-4.2
@end example

It is also possible to build @R{} using Apple's C/C++ compilers supplied
with Xcode, but these do need to be supplemented by a Fortran compiler
(such as @code{gfortran-4.2}).  @command{/usr/bin/gcc} is a link to
@command{llvm-gcc}, an LLVM-based compiler with a @command{gcc 4.2.1}
front end, and @command{clang} can also be used (and @command{clang++}
for C++: @command{cc} is a link to @command{clang}).  However, the best
performance was obtained from the compilers at
@uref{http://r.research.att.com}.

The @command{configure} script assumes the Apple Java SDK, which can be
specified explicitly by something like
@smallexample
JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home
JAVA_CPPFLAGS="-I$@{JAVA_HOME@}/include"
JAVA_LD_LIBRARY_PATH=
JAVA_LIBS="-framework JavaVM"
@end smallexample
However, the Oracle Java SDK (which is 64-bit only) has a later version
of Java and is often preferred.  This needs something like
@smallexample
JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_13.jdk/Contents/Home
JAVA_CPPFLAGS="-I/$@{JAVA_HOME@}/include -I/$@{JAVA_HOME@}/include/darwin"
JAVA_LD_LIBRARY_PATH="$@{JAVA_HOME@}/jre/lib/server"
JAVA_LIBS="-L/$@{JAVA_HOME@}/jre/lib/server -ljvm" 
@end smallexample
in @file{config.site}.  (Do not include @file{$@{JAVA_HOME@}/jre/lib} in
@env{JAVA_LD_LIBRARY_PATH}: it contains libraries which conflict with
system libraries.)


Note that it is necessary to set the environment variable @env{NOAWT}
e.g.@: to @code{1} to install some Java-using packages such as
@CRANpkg{iplots}.


@node Mountain Lion, Tcl/Tk headers and libraries, Lion, Mac OS X
@subsection Mountain Lion

See the notes on Lion: currently Xcode (4.6) is the same for the two
OS versions.

The X11 system used with Mountain Lion will be XQuartz.  To build the
graphics devices depending on cairographics the XQuartz path for
@command{pkg-config} files (default @file{/usr/X11/lib/pkgconfig}) needs
to be known to @command{pkg-config} when @command{configure} is run:
this usually means adding it to the @env{PKG_CONFIG_PATH} environment
variable.

Mountain Lion does not come with a Java runtime (JRE) installed, and an
upgrade to Mountain Lion removes one if already installed.  It is
intended to be installed at first use.  Check a JRE is installed by
running

@example
java -version
@end example

@noindent
in a @command{Terminal} window.  If Java is not installed this should
prompt you to install it.
@c http://osxdaily.com/2012/08/01/install-java-in-os-x-mountain-lion/
However, for security reasons you may want/need to install the latest
JRE or JDK from Oracle (currently from
@uref{http://www.oracle.com/technetwork/java/javase/downloads/index.html}).

@node Tcl/Tk headers and libraries, Frameworks, Mountain Lion, Mac OS X
@subsection Tcl/Tk headers and libraries

If you plan to use the @code{tcltk} package for @R{}, you need to
install a distribution of Tcl/Tk.  There are two alternatives.  If you
use @Rapp{} you will want to install
@uref{http://cran.r-project.org/bin/macosx/tools/tcltk-8.5.5-x11.dmg}
which is a binary package for the X11-based Tcl/Tk (as used on other
Unix-alikes).

There is also a native (`Aqua') version of Tcl/Tk which produces widgets
in the native OS X style: this will not work with @Rapp{} because of
conflicting event loops, but for those only command-line @R{} this
provides a much more intuitive interface to Tk for experienced Mac
users. Some versions of OS X came with Aqua Tcl/Tk libraries, but these
are not current versions of Tcl/Tk (8.5.9 in Mountain Lion).  It is
better to install Tcl/Tk 8.6.x or 8.5.x from the sources or the binary
distribution at @uref{http://www.activestate.com/activetcl/downloads}.
Configure @R{} with
@example
--with-tcl-config=/Library/Frameworks/Tcl.framework/tclConfig.sh 
--with-tk-config=/Library/Frameworks/Tk.framework/tkConfig.sh
@end example
(for the versions bundled with OS X, use paths starting with
@file{/System/Library}).

@node Frameworks, Building R.app, Tcl/Tk headers and libraries, Mac OS X
@subsection Frameworks

The @acronym{CRAN} build of @R{} is installed as a framework, which is
selected by the default option

@example
./configure --enable-R-framework
@end example

This is only needed if you want to build @R{} for use with the
@Rapp{} console, and implies @option{--enable-R-shlib} to build
@R{} as a dynamic library.  This option configures @R{} to be built and
installed as a framework called @file{R.framework}.  The default
installation path for @file{R.framework} is @file{/Library/Frameworks}
but this can be changed at configure time by specifying the flag
@option{--enable-R-framework[=@var{DIR}]} or at install time as

@example
make prefix=/where/you/want/R.framework/to/go install
@end example

@node Building R.app,  , Frameworks, Mac OS X
@subsection Building R.app

Note that building the @Rapp{} GUI console is a separate project, using
Xcode.  Before compiling @Rapp{} make sure @R{} is installed in
@file{/Library/Frameworks/R.framework} and working at the command-line
(this can be binary install: it needs to contain the architecture for
which @Rapp{} is to be built, here @cputype{x86_64}).

The current sources can be checked out by
@example
svn co https://svn.r-project.org/R-packages/trunk/Mac-GUI
@end example
This can be built by loading @code{R.xcodeproj} project (select
the @code{R} target and the @code{Lion64} configuration), or from the
command-line by
@example
xcodebuild -target R -configuration Lion64
@end example
See also the @file{INSTALL} file in the checkout or directly at @uref{https://svn.r-project.org/R-packages/trunk/Mac-GUI/INSTALL}.

@Rapp{} does not need to be installed in any specific way. Building
@Rapp{} results in the @Rapp{} bundle which appears as one R icon. This
application bundle can be run anywhere and it is customary to place it
in the @emph{Applications} folder.


@node Solaris, AIX, Mac OS X, Platform notes
@section Solaris
@cindex Solaris

@R{} has been built successfully on Solaris 10 (both Sparc and
@cputype{x86}) using the (zero cost) Oracle Solaris Studio compilers:
there has been some success with
@command{gcc}@tie{}4/@command{gfortran}.  (Recent Sun machines are AMD
Opterons or Intel Xeons (@cputype{amd64}) rather than @cputype{x86}, but
32-bit @cputype{x86} executables are the default.)

There have been few reports on Solaris 11, with no known extra issues.
Solaris 9 and earlier are now so old that it is unlikely that @R{} is
still used with them, and they will not be considered here.

The Solaris versions of several of the tools needed to build @R{}
(e.g.@: @command{make}, @command{ar} and @command{ld}) are in
@file{/usr/ccs/bin}, so if using those tools ensure this is in your
path.  A version of the preferred @acronym{GNU} @command{tar} is (if
installed) in @file{/usr/sfw/bin}, as sometimes are tools like
@command{makeinfo}.  It may be necessary to avoid the tools in
@file{/usr/ucb}: POSIX-compliant versions of some tools can be found in
@file{/usr/xpg4/bin} and @file{/usr/xpg6/bin}.

A large selection of Open Source software can be installed from
@uref{http://www.opencsw.org}, by default installed under
@file{/opt/csw}.

You will need @acronym{GNU} @code{libiconv} and @code{readline}: the
Solaris version of @code{iconv} is not sufficiently powerful.

The native @command{make} suffices to build @R{} but a small number of
packages require @acronym{GNU} @command{make} (some without good reason
and without declaring it as @samp{SystemRequirements} in the
@file{DESCRIPTION} file).

Some people have reported that the Solaris @code{libintl} needs to be
avoided, for example by using @option{--disable-nls} or
@option{--with-included-gettext} or using @code{libintl} from OpenCSW.

The support for the C99 @code{long double} type on Sparc hardware uses
quad-precision arithmetic, and this is usually slow because it is done
by software emulation.  On such systems @command{configure} option
@option{--disable-long-double} can be used for faster but less accurate
computations.


When using the Oracle compilers@footnote{including @command{gcc} for
Sparc from Oracle.} do @emph{not} specify @option{-fast}, as this
disables @acronym{IEEE} arithmetic and @command{make check} will fail.

For the Solaris Studio compilers a little juggling of paths was needed
to ensure @acronym{GNU} @code{libiconv} (in @file{/usr/local}) was used
rather than the Solaris @code{iconv}:

@example
CC="cc -xc99"
CFLAGS="-O -xlibmieee"
F77=f95
FFLAGS=-O
CXX="CC -library=stlport4"
CXXFLAGS=-O
FC=f95
FCFLAGS=$FFLAGS
FCLIBS="-lfai -lfsu"
R_LD_LIBRARY_PATH="/usr/local/lib:/opt/csw/gcc4/lib:/opt/csw/lib"
@end example

@noindent
For a 64-bit target add @option{-m64} to the compiler macros
and use something like @code{LDFLAGS=-L/usr/local/lib/sparcv9} or
@code{LDFLAGS=-L/usr/local/lib/amd64} as appropriate.
It will also be necessary to point @command{pkg-config} at the 64-bit
directories, e.g.@: one of

@example
PKG_CONFIG_PATH=/opt/csw/lib/amd64/pkgconfig:/usr/lib/amd64/pkgconfig
PKG_CONFIG_PATH=/opt/csw/lib/sparcv9/pkgconfig:/usr/lib/sparcv9/pkgconfig
@end example

@noindent
and to specify a 64-bit Java VM by e.g.@:

@example
JAVA_LD_LIBRARY_PATH = $(JAVA_HOME)/lib/amd64/server
JAVA_LIBS = -L$(JAVA_HOME)/lib/amd64/server \
  -R$(JAVA_HOME)/lib/amd64/server -ljvm
@end example

With Solaris Studio 12.[23] on Sparc, @code{FCLIBS} needs to be

@example
FCLIBS="-lfai -lfai2 -lfsu"
@end example

@noindent
(and possibly other Fortran libraries, but this suffices for the
packages currently on CRAN).

Currently @cputype{amd64} and @cputype{sparcv9} builds work
out-of-the-box with Sun Studio 12u1 but not Solaris Studio 12.2 and
later: @file{libRblas.so} and @file{lapack.so} are generated with code
that causes relocation errors (which is being linked in from the Fortran
libraries).  This means that building @R{} as a shared library may be
impossible with Solaris Studio >= 12.2.  For a standard build the trick
seems to be to manually set @code{FLIBS} to avoid the troublesome
libraries.  For example, on @cputype{amd64} set in @file{config.site}
something like

@example
FLIBS_IN_SO="-R/opt/solarisstudio12.3/lib/amd64
  /opt/solarisstudio12.3/lib/amd64/libfui.so
  /opt/solarisstudio12.3/lib/amd64/libfsu.so"
@end example

For 64-bit Sparc, set in @file{config.site} something like
@example
FLIBS="-R/opt/solarisstudio12.3/prod/lib/sparc/64
 -lifai -lsunimath -lfai -lfai2 -lfsumai -lfprodai -lfminlai -lfmaxlai
 -lfminvai -lfmaxvai -lfui -lsunmath -lmtsk
 /opt/solarisstudio12.3/prod/lib/sparc/64/libfsu.so.1"
@end example

By default the Solaris Studio compilers do not by default conform to the C99
standard (appendix F 8.9) on the return values of functions such as
@code{log}: use @option{-xlibmieee} to ensure this.

You can target specific Sparc architectures for (slightly) higher
performance: @option{-xtarget=native} (in @code{CFLAGS} etc) tunes the
compilation to the current machine.

Using @code{-xlibmil} in @code{CFLAGS} and @code{-xlibmil} in
@code{FFLAGS} allows more system mathematical functions to be inlined.


On @cputype{x86} you will get marginally higher performance @emph{via}

@example
CFLAGS="-xO5 -xc99 -xlibmieee -xlibmil -nofstore -xtarget=native"
FFLAGS="-O5 -libmil -nofstore -xtarget=native"
CXXFLAGS="-xO5 -xlibmil -nofstore -xtarget=native"
SAFE_FFLAGS="-libmil -fstore -xtarget=native"
@end example

@noindent
but the use of @code{-nofstore} can be less numerically stable, and some
packages (notably @CRANpkg{mgcv} on @cputype{x86}) failed to compile at
higher optimization levels with version 12.3.

The Solaris Studio compilers provide several implementations of the C++
standard which select both the set of headers and a C++ runtime library.
These are selected by the @option{-library} flag, which as it is needed
for both compiling and linking is best specified as part of the
compiler.  The examples above use @samp{stlport4}, currently the most
modern of the options: the default (but still needed to be specified as
it is needed for linking) is @samp{Cstd}: see
@uref{http://developers.sun.com/@/solaris/@/articles/@/cmp_stlport_libCstd.html}.
Note though that most external Solaris C++ libraries will have been
built with @samp{Cstd} and so an @R{} package using such libraries also
needs to be.  Occasionally the flag @option{-library=stlport4,Crun} has
been needed.

Several CRAN packages using C++ need the more liberal interpretation
given by adding

@example
CXXFLAGS="-features=tmplrefstatic"
@end example


@cindex BLAS library
@cindex LAPACK library

The performance library @code{sunperf} is available for use with the
Solaris Studio compilers.  If selected as a @acronym{BLAS}, it must also
be selected as LAPACK @emph{via} (for Solaris Studio 12.2)

@example
./configure --with-blas='-library=sunperf' --with-lapack
@end example

@noindent
This has often given test failures in the past, in several different
places.  At the time of writing it fails in @file{tests/reg-BLAS.R}, and on
some builds, including for @cputype{amd64}, it fails in
@code{example(eigen)}.


@menu
* Using gcc::                   
@end menu

@node Using gcc,  , Solaris, Solaris
@subsection Using gcc

If using @command{gcc}, ensure that the compiler was compiled for the
version of Solaris in use.  (This can be ascertained from @command{gcc
-v}.)  @command{gcc} makes modified versions of some header files, and
several reports of problems were due to using @command{gcc} compiled on
one version of Solaris on a later version.  

The notes here are for @command{gcc} set up to use the Solaris linker:
it can also be set up to use GNU @command{ld}, but that has not been
tested.

Compilation for a 32-bit Sparc target with @command{gcc}@tie{}4.7.2
needed

@example
CPPFLAGS=-I/opt/csw/include
LDFLAGS="-L/opt/csw/gcc4/lib -L/opt/csw/lib"
@end example

@noindent
and for a 64-bit Sparc target
@example
CC="gcc -m64"
F77="gfortran -m64"
CXX="g++ -m64"
FC=$F77
CPPFLAGS=-I/opt/csw/include
LDFLAGS="-L/opt/csw/gcc4/lib/sparcv9 -L/opt/csw/lib/sparcv9"
@end example

@noindent
Note that paths such as @file{/opt/csw/gcc4/lib/sparcv9} may need to
be in the
@enindex LD_LIBRARY_PATH
@env{LD_LIBRARY_PATH} during configuration.

The compilation can be tuned to a particular cpu: the CRAN check system
uses @code{-mtune=niagara2}.

Compilation for an @cputype{x86} target with @command{gcc}@tie{}4.7.2
needed

@example
CC="/opt/csw/gcc4/bin/gcc -m32"
CPPFLAGS="-I/opt/csw/include -I/usr/local/include"
F77="/opt/csw/gcc4/bin/gfortran -m32"
CXX="/opt/csw/gcc4/bin/g++ -m32"
FC="/opt/csw/gcc4/bin/gfortran -m32"
LDFLAGS="-L/opt/csw/gcc4/lib -L/opt/csw/lib -L/usr/local/lib"
@end example

(@code{-L/opt/csw/lib} is needed since TexLive 2011 was built using
32-bit @code{gcc}, and we need @file{/opt/csw/lib} in
@code{R_LD_LIBRARY_PATH}.)

For an @cputype{amd64} target with @command{gcc}@tie{}4.7.2
we used 

@example
CC="/opt/csw/gcc4/bin/gcc -m64"
CPPFLAGS="-I/opt/csw/include -I/usr/local/include"
F77="/opt/csw/gcc4/bin/gfortran -m64"
FPICFLAGS=-fPIC
CXX="/opt/csw/gcc4/bin/g++ -m64"
FC=$F77
FCPICFLAGS=$FPICFLAGS
LDFLAGS="-L/opt/csw/gcc4/lib/amd64 -L/opt/csw/lib/amd64"
@end example

@node AIX, Cygwin, Solaris, Platform notes
@section AIX
@cindex AIX

We no longer support AIX prior to 4.2, and @command{configure} will
throw an error on such systems.

Ei-ji Nakama was able to build under AIX 5.2 on @cputype{powerpc} with
GCC 4.0.3 in several configurations.  32-bit versions could be
configured with @option{--without-iconv} as well as
@option{--enable-R-shlib}.  For 64-bit versions he used

@example
OBJECT_MODE=64
CC="gcc -maix64"
CXX="g++ -maix64"
F77="gfortran -maix64"
FC="gfortran -maix64"
@end example

@noindent
and was also able to build with the IBM @code{xlc} and Hitachi
@code{f90} compilers by

@example
OBJECT_MODE=64
CC="xlc -q64"
CXX="g++ -maix64"
F77="f90 -cpu=pwr4 -hf77 -parallel=0 -i,L -O3 -64"
FC="f90 -cpu=pwr4 -hf77 -parallel=0 -i,L -O3 -64"
FLIBS="-L/opt/ofort90/lib -lhf90vecmath -lhf90math -lf90"
@end example

Some systems have @command{f95} as an IBM compiler that does not by
default accept FORTRAN 77.  It needs the flag @option{-qfixed=72}, or to
be invoked as @command{xlf_r}.
@c http://publib.boulder.ibm.com/infocenter/comphelp/v7v91/index.jsp?topic=/com.ibm.xlf91a.doc/xlfug/hu00465.htm

The AIX native @code{iconv} does not support encodings @samp{latin1} nor
@samp{""} and so cannot be used.  (As far as we know @acronym{GNU}
@code{libiconv} could be installed.)

Fan Long reports success on AIX 5.3 using
@c https://stat.ethz.ch/pipermail/r-devel/2008-August/050318.html

@example
OBJECT_MODE=64
LIBICONV=@var{/where/libiconv/installed}
CC="xlc_r -q64" 
CFLAGS="-O -qstrict"
CXX="xlC_r -q64"
CXXFLAGS="-O -qstrict"
F77="xlf_r -q64"
AR="ar -X64"
CPPFLAGS="-I$LIBICONV/include -I/usr/lpp/X11/include/X11"
LDFLAGS="-L$LIBICONV/lib -L/usr/lib -L/usr/X11R6/lib"
@end example

@enindex R_SHELL
On one AIX 6.x system it was necessary to use @env{R_SHELL} to set the
default shell to be Bash rather than Zsh.

Kurt Hornik and Stefan Theussl at WU (Wirtschaftsuniversit@"at Wien)
successfully built R on a @cputype{powerpc} (8-@acronym{CPU} Power6
system) running AIX 6.1, configuring with or without
@option{--enable-R-shlib} (Ei-ji Nakama's support is gratefully
acknowledged).

It helps to describe the WU build environment first.  A small part of
the software needed to build R and/or install packages is available
directly from the AIX Installation DVDs, e.g., Java 6, X11, and Perl.
Additional open source software (OSS) is packaged for AIX in @file{.rpm}
files and available from both IBM's ``AIX Toolbox for Linux
Applications''
(@uref{http://www-03.ibm.com/@/systems/@/power/@/software/@/aix/@/linux/}) and
@uref{http://www.oss4aix.org/@/download/}.  The latter website typically
offers more recent versions of the available OSS.  All tools needed and
libraries downloaded from these repositories (e.g., GCC, Make,
@code{libreadline}, etc.) are typically installed to
@file{/opt/freeware}, hence corresponding executables are found in
@enindex PATH
@file{/opt/freeware/bin} which thus needs to be in @env{PATH} for using
these tools.  As on other Unix systems one needs @acronym{GNU}
@code{libiconv} as the AIX version of iconv is not sufficiently
powerful.  Additionally, for proper Unicode compatibility one should
install the corresponding package from the ICU project
(@uref{http://www.icu-project.org/@/download/}), which offers pre-compiled
binaries for various platforms which in case of AIX can be installed via
unpacking the tarball to the root file system.  For full @LaTeX{}
support one can install the @TeX{} Live DVD distribution
(@uref{http://www.tug.org/@/texlive/}): it is recommended to update the
distribution using the @code{tlmgr} update manager.  For 64-bit R builds
supporting Tcl/Tk this needs to installed from the sources as available
pre-compiled binaries supply only 32-bit shared objects.

The recent WU testing was done using compilers from both the
@acronym{GNU} Compiler Collection (version 4.2.4) which is available
from one of the above OSS repositories, and the IBM C/C++ (XL C/C++
10.01) as well as FORTRAN (XL Fortran 12.01) compilers
(@uref{http://www14.software.ibm.com/@/webapp/@/download/@/byproduct.jsp#X}).

To compile for a 64-bit @cputype{powerpc} (Power6 @acronym{CPU}) target
one can use

@example
CC ="gcc -maix64 -pthread"
CXX="g++ -maix64 -pthread"
FC="gfortran -maix64 -pthread"
F77="gfortran -maix64 -pthread"
CFLAGS="-O2 -g -mcpu=power6"
FFLAGS="-O2 -g -mcpu=power6"
FCFLAGS="-O2 -g -mcpu=power6"
@end example

@noindent
for the GCC and

@example
CC=xlc
CXX=xlc++
FC=xlf
F77=xlf
CFLAGS="-qarch=auto -qcache=auto -qtune=auto -O3 -qstrict -ma"
FFLAGS="-qarch=auto -qcache=auto -qtune=auto -O3 -qstrict"
FCFLAGS="-qarch=auto -qcache=auto -qtune=auto -O3 -qstrict"
CXXFLAGS="-qarch=auto -qcache=auto -qtune=auto -O3 -qstrict"
@end example

@noindent
for the IBM XL compilers.  For the latter, it is important to note that
the decision for generating 32-bit or 64-bit code is done by setting the
@enindex OBJECT_MODE
@env{OBJECT_MODE} environment variable appropriately (recommended) or
using an additional compiler flag (@option{-q32} or @option{-q64}).  By
default the IBM XL compilers produce 32 bit code.  Thus, to build R with
64-bit support one needs to either export @env{OBJECT_MODE=64} in the
environment or, alternatively, use the @option{-q64} compiler options.

It is strongly recommended to install Bash and use it as the configure
shell, e.g., via setting @code{CONFIG_SHELL=/usr/bin/bash} in the
environment, and to use @acronym{GNU} Make (e.g., via
(@code{MAKE=/opt/freeware/bin/make}).

Further installation instructions to set up a proper R development
environment can be found in the ``R on AIX'' project on R-Forge
(@uref{http://R-Forge.R-project.org/@/projects/@/aix/}).

@node Cygwin, New platforms, AIX, Platform notes
@section Cygwin

The Cygwin emulation layer on Windows can be treated as a Unix-alike OS.
This is unsupported, but experiments have been conducted and a few
workarounds added.  @R{} requires C99 complex type support, which is
available as from Cygwin 1.7.8 (March 2011).  However, the (new)
implementation of @code{cacos} gives incorrect results, so we undefine
@code{HAVE_CACOS} in @file{src/main/complex.c} on that platform.

Many versions of Cygwin during 2011 were unable to build @R{}: 1.7.9-1
with @acronym{GCC} 4.5.3-3 in November 2011 was able to do so.

Only building as a shared library can possibly work,@footnote{Windows
DLLs need to have all links resolved at build time and so cannot resolve
against @file{R.bin}.} so use e.g@:

@example
./configure --disable-nls --enable-R-shlib FLIBS=-lgfortran
make
@end example

@noindent
Enabling NLS does work if required, although adding
@option{--with-included-gettext} is preferable.  You will see many
warnings about the use of auto-import.  Setting @samp{FLIBS} explicitly
seems needed currently as the auto-detection gives an incorrect values.

You will need the @pkg{tetex-extra} Cygwin package to build
@file{NEWS.pdf} and the vignettes.

Note that this gives you a command-line application using @code{readline}
for command editing.  The @samp{X11} graphics device will work if a
suitable X server is running, and the standard Unix-alike ways of
installing source packages work.  There was a bug in the
@file{/usr/lib/tkConfig.sh} script in the version we looked at, which
needs to have

@example
TK_LIB_SPEC='-ltk84'
@end example

The overhead of using shell scripts makes this noticeably slower than a
native build of @R{} on Windows.

Even when @R{} can be built, not all the tests passed: there were
incorrect results from wide-character regular expressions code and from
sourcing CR-delimited files.

Do not use Cygwin's BLAS library: it is known to give incorrect results.

@node New platforms,  , Cygwin, Platform notes
@section New platforms

There are a number of sources of problems when installing @R {} on a new
hardware/OS platform.  These include

@strong{Floating Point Arithmetic}: @R{} requires arithmetic compliant
with @acronym{IEC}@tie{}60559, also known as @acronym{IEEE}@tie{}754.
This mandates the use of plus and minus infinity and @code{NaN} (not a
number) as well as specific details of rounding.  Although almost all
current FPUs can support this, selecting such support can be a pain.
The problem is that there is no agreement on how to set the signalling
behaviour; Sun/Sparc, SGI/IRIX and @cputype{ix86} Linux require no
special action, FreeBSD requires a call to (the macro)
@code{fpsetmask(0)} and OSF1 requires that computation be done with a
@option{-ieee_with_inexact} flag etc.  On a new platform you must find
out the magic recipe and add some code to make it work.  This can often
be done via the file @file{config.site} which resides in the top level
directory.

Beware of using high levels of optimization, at least initially.  On
many compilers these reduce the degree of compliance to the
@acronym{IEEE} model.  For example, using @option{-fast} on the Solaris
Studio compilers has caused @R{}'s @code{NaN} to be set incorrectly.

@strong{Shared Objects}: There seems to be very little agreement
across platforms on what needs to be done to build shared objects.
there are many different combinations of flags for the compilers and
loaders.  @acronym{GNU} libtool cannot be used (yet), as it currently
does not fully support FORTRAN: one would need a shell wrapper for
this).  The technique we use is to first interrogate the X window system
about what it does (using @command{xmkmf}), and then override this in
situations where we know better (for tools from the @acronym{GNU}
Compiler Collection and/or platforms we know about).  This typically
works, but you may have to manually override the results.  Scanning the
manual entries for @command{cc} and @command{ld} usually reveals the
correct incantation.  Once you know the recipe you can modify the file
@file{config.site} (following the instructions therein) so that the
build will use these options.

It seems that @command{gcc}@tie{}3.4.x and later on @cputype{ix86} Linux
defeat attempts by the LAPACK code to avoid computations entirely in
extended-precision registers, so file @file{src/modules/lapack/dlamc.f}
may need to be compiled without optimization.  Set the configure
variable @env{SAFE_FFLAGS} to the flags to be used for this file.  If
configure detects @acronym{GNU} FORTRAN it adds flag
@option{-ffloat-store} to @env{FFLAGS}.  (Other settings are needed when
using @command{icc} on @cputype{ix86} Linux, for example.  Using
@option{-mpc64} is preferable on more recent GCC compilers.)

If you do manage to get @R{} running on a new platform please let us
know about it so we can modify the configuration procedures to include
that platform.

If you are having trouble getting @R{} to work on your platform please
feel free to use the @samp{R-devel} mailing list to ask questions.  We
have had a fair amount of practice at porting @R{} to new platforms
@enddots{}


@node The Windows toolset, Function and variable index, Platform notes, Top
@appendix The Windows toolset

If you want to build @R{} or add-on packages from source in Windows, you
will need to collect, install and test an extensive set of tools.  See
@uref{http://CRAN.R-project.org/@/bin/@/windows/@/Rtools/} for the current
locations and other updates to these instructions.  (Most Windows users
will not need to build add-on packages from source; see @ref{Add-on
packages} for details.)

We have found that the build process for @R{} is quite sensitive to
the choice of tools: please follow our instructions @strong{exactly},
even to the choice of particular versions of the tools.@footnote{For
example, the Cygwin version of @code{make 3.81} fails to work
correctly.}  The build process for add-on packages is somewhat more
forgiving, but we recommend using the exact toolset at first, and only
substituting other tools once you are familiar with the process.

@emph{This appendix contains a lot of prescriptive comments.  They are
here as a result of bitter experience.  Please do not report problems to
the @R{} mailing lists unless you have followed all the prescriptions.}

We have collected most of the necessary tools (unfortunately not all,
due to license or size limitations) into an executable installer
named@footnote{for @R{} 2.14.2 and later.}  @file{Rtools30.exe},
available from @uref{http://CRAN.R-project.org/@/bin/@/windows/@/Rtools/}. You
should download and run it, choosing the default ``Package authoring
installation'' to build add-on packages, or the ``full installation'' if
you intend to build @R{}.

You will need the following items to build @R{} and packages.
See the subsections below for detailed descriptions.
@itemize
@item
The command line tools (in @file{Rtools*.exe})
@item
The MinGW-w64 32/64-bit toolchain to compile C, Fortran and C++.
@end itemize
For installing simple source packages containing data or @R{} source but
no compiled code, none of these are needed.  Perl is no longer needed to
build @R{} nor to install nor develop source packages.

A complete build of @R{} including PDF manuals, and producing the
installer will also need the following:
@itemize
@item
@LaTeX{}
@item
The Inno Setup installer
@item
(optional) @code{qpdf}
@end itemize

@enindex PATH
It is important to set your @env{PATH} properly.  The installer
@file{Rtools*.exe} optionally sets the path to components that it
installs.

Your @env{PATH} may include @file{.} first, then the @file{bin}
directories of the tools, the compiler toolchain and @LaTeX{}.  Do not
use filepaths containing spaces: you can always use the short forms
(found by @code{dir /x} at the Windows command line).  Network shares
(with paths starting @code{\\}) are not supported.

For example for a 32-bit build, all on one line,

@smallexample
PATH=c:\Rtools\bin;c:\Rtools\gcc-4.6.3\bin;c:\MiKTeX\miktex\bin;
     c:\R\R-2.15\bin\i386;c:\windows;c:\windows\system32
@end smallexample

It is essential that the directory containing the command line tools
comes first or second in the path: there are typically like-named
tools@footnote{such as @command{sort}, @command{find} and perhaps
@command{make}.} in other directories, and they will @strong{not}
work. The ordering of the other directories is less important, but if in
doubt, use the order above.

Our toolset contains copies of Cygwin DLLs that may conflict with other
ones on your system if both are in the path at once.  The normal
recommendation is to delete the older ones; however, at one time we
found our tools did not work with a newer version of the Cygwin DLLs, so
it may be safest not to have any other version of the Cygwin DLLs in your
path.

@menu
* LaTeX::                       
* The Inno Setup installer::    
* The command line tools::      
* The MinGW-w64 toolchain::     
* Useful additional programs::  
@end menu

@node LaTeX, The Inno Setup installer, The Windows toolset, The Windows toolset
@section @LaTeX{}

The @samp{MiKTeX} (@uref{http://www.miktex.org/}) distribution of
@LaTeX{} includes a suitable port of @code{pdftex}.  The `basic' version
of @samp{MiKTeX} almost suffices (the @pkg{grid} vignettes need
@file{fancyvrb.sty}), but it will install the 15Mb @samp{lm} package if
allowed to (although that is not actually used).  The @file{Rtools*.exe}
installer does @emph{not} include any version of @LaTeX{}.

It is also possible to use the TeXLive distribution from
@uref{http://www.tug.org/texlive/}.

@enindex R_RD4PDF
Please read @ref{Making the manuals} about how to make @file{fullrefman.pdf}
and set the environment variable @env{R_RD4PDF} suitably; ensure you
have the required fonts installed or that @samp{MiKTeX} is set up to
install @LaTeX{} on first use.

@node The Inno Setup installer, The command line tools, LaTeX, The Windows toolset
@section The Inno Setup installer

To make the installer package (@file{@value{RWVERSION}-win.exe}) we
currently require the Unicode version of Inno Setup 5.3.7 or later
(including 5.4.x and 5.5.x) from @uref{http://jrsoftware.org/}. This is
@emph{not} included in @file{Rtools*.exe}.

Copy file @file{src/gnuwin32/MkRules.dist} to
@file{src/gnuwin32/MkRules.local} and edit it to set @code{ISDIR} to the
location where Inno Setup was installed.

@node The command line tools, The MinGW-w64 toolchain, The Inno Setup installer, The Windows toolset
@section The command line tools

This item is installed by the @file{Rtools*.exe} installer.

@c INSTALL may use sh make zip (and tar if R_INSTALL_TAR is used)
@c build may use make and sh.
@c Rdiff.sh USED to use diff echo grep sed tr: grep and tr are no longer used.

@c basename is used in src/library/Recommended/Makefile.win
@c comm, sort, uniq are used in producing .def files
@c cmp is used in src/include/Makefile.win, tools/{copy,move}-if-change
@c cp is used as $(CP) in numerous Makefiles
@c cut is used to make RVER
@c date is used when building base and tools
@c diff is used by tools::Rdiff and tests/Makefile.common
@c du is used by R CMD check
@c expr is used in tools/GETVERSION
@c find is used in installer/Makefile
@c expr is used in tools/GETCONFIG
@c gzip is used in src/library/Makefile.win, R CMD build
@c ls is used in src/library/*/Makefile.win
@c mkdir is used in numerous Makefiles
@c rsync is only needed if building from svn
@c sed is used in tools/GETVERSION, many Makefiles
@c touch is used in Makefiles
@c unzip is used in making R, e.g. for zoneinfo.zip
@c AFAICS [g]awk, egrep, grep, head, rmdir, tail, tr, wc are no longer used
If you choose to install these yourself, you will need suitable versions
of at least @code{basename}, @code{cat}, @code{cmp}, @code{comm},
@code{cp}, @code{cut}, @code{date}, @code{diff}, @code{du}, @code{echo},
@code{expr}, @code{gzip}, @code{ls}, @code{make}, @code{makeinfo},
@code{mkdir}, @code{mv}, @code{rm}, @code{rsync}, @code{sed}, @code{sh},
@code{sort}, @code{tar}, @code{texindex}, @code{touch} and @code{uniq};
we use those from the Cygwin distribution
(@uref{http://www.cygwin.com/}) or compiled from the sources.  You will
also need @code{zip} and @code{unzip} from the Info-ZIP project
(@uref{http://www.info-zip.org/}).  All of these tools are in
@file{Rtools*.exe}.

@c So needed for end users:
@c comm cp diff echo gzip make mkdir rm sh sort tar uniq zip

@strong{Beware}: `Native' ports of make are @strong{not} suitable
(including those called `MinGW make' at the MinGW SourceForge site and
@command{mingw32-make} in some MinGW-w64 distributions).  There were
also problems with other versions of the Cygwin tools and DLLs.  To
avoid frustration, please use our tool set, and make sure it is at the
front of your path (including before the Windows system directories).
If you are using a Windows shell, type @code{PATH} at the prompt to find
out.

@enindex CYGWIN
You may need to set the environment variable @env{CYGWIN} to a value
including @samp{nodosfilewarning} to suppress messages about
Windows-style paths.

@node The MinGW-w64 toolchain, Useful additional programs, The command line tools, The Windows toolset
@section The MinGW-w64 toolchain

Technically you need more than just a compiler so the set of tools is
referred to as a `toolchain'.

The preferred toolchain since @R{} 2.14.2 is part of
@code{Rtools30.exe}: this uses a beta version of @command{gcc 4.6.3}
and version 2.0.1 of the MinGW-w64 project's runtime.

This toolchain uses @emph{multilib}: that is there is a single front-end
such as @command{gcc.exe} for each of the compilers and 32-bit (the
default) and 64-bit compilation are selected by the flags@footnote{these
flags apply to the compilers: some of the tools use different flags.
32-bit builds are the default.}  @option{-m32} and @option{-m64}
respectively.  The tools are all 32-bit Windows executables and should
be able to run on any current version of Windows---however you do need a
64-bit version of Windows to build 64-bit @R{} as the build process runs
@R{}.

To select a 32-bit or 64-bit build of @R{}, set the options in
@file{MkRules.local} appropriately (following the comments in the file).

Some external software libraries will need to be re-compiled under the
new toolchain: especially those providing a C++ interface.  Many of
those used by @acronym{CRAN} packages are available from
@uref{http://www.stats.ox.ac.uk/@/pub/@/Rtools/@/multilib/}.  Users
developing packages with @CRANpkg{Rcpp} need to ensure that they use a
version built with exactly the same toolchain as their package: the
recommendation is to build @CRANpkg{Rcpp} from its sources yourself.

There is support for OpenMP and pthreads in this toolchain.  As the
performance of OpenMP on Windows is poor for small tasks, it is not used
for @R{} itself.

@node Useful additional programs,  , The MinGW-w64 toolchain, The Windows toolset
@section Useful additional programs

The process of making the installer will make use of @code{qpdf} to
compact some of the package vignettes, if it is available.  Windows
binaries of @code{qpdf} are available from
@uref{http://sourceforge.net/@/projects/@/qpdf/@/files/}.  Set the path
to the @code{qpdf} installation in file @file{MkRules.local}.

Developers of packages will find some of the `goodies' at
@uref{http://www.stats.ox.ac.uk/@/pub/@/Rtools/@/goodies} useful.  

There is a version of the @command{file} command that identifies the
type of files, and is used by @command{Rcmd check} if available.  The
binary distribution is included in @file{Rtools30.exe}.

The file @file{xzutils.zip} contains the program @command{xz} which can
be used to (de)compress files with that form of compression.

@node Function and variable index, Concept index, The Windows toolset, Top
@unnumbered Function and variable index

@printindex vr

@node Concept index, Environment variable index, Function and variable index, Top
@unnumbered Concept index

@printindex cp

@node Environment variable index,  , Concept index, Top
@unnumbered Environment variable index

@printindex en


@bye

@c Local Variables: ***
@c mode: TeXinfo ***
@c End: ***
