# Modified on 2013-JUL-02 by Chel Hee Lee 
# Modified on 2013-JUL-04 by Eugene Jung 
#
# Notes: 파일명에 띄어쓰기 하는 것은 좋지 않습니다.
# 파일명을 CRAN Repository Policy.txt 를 CRAN_repository_policy 로 변경합니다.
# txt 파일일 경우 확장자를 붙이지 않기를 권장합니다.
# 문서의 생성날짜/변경날짜/목적을 꼭 써주세요.


Packages will not normally be removed from CRAN: however, they may be archived, including at the maintainer's request.
Packages for which R CMD check gives an ¡®ERROR¡¯ when a new R x.y.0 version is released will be archived (or in exceptional circumstances updated by the CRAN team) unless the maintainer has set a firm deadline for an upcoming update (and keeps to it).

유지보자자의 요청에 포함하여 패키지는 일반적으로 CRAN에서 제거되지 않고 보관될 것입니다.
유지보수자가 확정된 업데이트 일정을 가지지 않는한 새로운 R xy.y.0 버전이 공개되었을 때(또는 CRAN 팀에 의해 업데이트된 별도의 환경에서) R CMD 체크가 ¡®ERROR¡¯를 주는 패키지가 보관될 것입니다.

Maintainers will be asked to update packages which show any warnings or significant notes, especially at around the time of a new x.y.0 release. Packages which are not updated are liable to be archived.

유지보수자는 어떤 경고나 중요한 노트를 보일 패키지 업데이트를 요청 받을 것입니다. 특히 새로운 x.y.0 버전이 공개될 즈음에 그러합니다. 갱신되지 않은 패키지가 저장될 책임이 있습니다.

Packages should be of the minimum necessary size. Reasonable compression should be used for data (not just .rda files) and PDF documentation: CRAN will if necessary pass the latter through qpdf.
As a general rule, neither data nor documentation should exceed 5MB (which covers several books). A CRAN package is not an appropriate way to distribute course notes, and authors will be asked to trim their documentation to a maximum of 5MB.

패키지는 최소 요구 크기가 있습니다. 데이터(단지 .rda 파일이 아닌)와 PDF 문서를 위한 합리적이 압축이 사용되어야 합니다. CRAN은 만약 필요하다면 gpdf를 통해 후자의 것을 통과시킬 것입니다. 일반규칙 상으로 데이터와 문서(여러 책들을 포함하는)는 모두 5MB를 초과할 수 없습니다. 특정 CRAN 패키지는 과정안내를 배보하기 위한 적절한 방법이 아니며 저자는 그들의 문서가 최대 5MB이내로 조절될 것을 요구받을 것입니다.

Where a large amount of data is required (even after compression), consideration should be given to a separate data-only package which can be updated only rarely (since older versions of packages are archived in perpetuity).

데이터의 양이 많은 곳에는 (압축후에라도) 드물게 업데이트 될 (옛 버전의 패키지가 영구적으로 저장될 것이기 때문에) 별도의 데이터만으로 구성된 패키지를 구성하도록 하는 고려가 요구됩니다.

Similar considerations apply to other forms of ¡°data¡±, e.g., jar files.

유사한 고려가 다른 ¡°data¡± 의 (jar 파일과 같은) 형태에도 적용됩니다.

Checking the package should take as little CPU time as possible, as the CRAN check farm is a very limited resource and there are thousands of packages. Long-running tests and vignette code can be made optional for checking, but do ensure that the checks that are left do exercise all the features of the package.
If running a package uses multiple threads/cores it must never use more than two simultaneously: the check farm is a shared resource and will typically be running many checks simultaneously.

CRAN 체크 농장(farm ?)은 매우 제한된 자원이며 수천가지의 패키지가 있기 때문에 패키지 검토는 가능한한 CPU 시간을 거의 소비하지 않도록 되어야 합니다. 긴 시간을 요구하는 테스트와 비네트(vignette) 코드는 체크하는데 옵션으로 만들어 질 수 있으나 패키지의 모든 성능을 실행하도록 남겨진 

Examples should run for no more than a few seconds each: they are intended to exemplify to the would-be user how to use the functions in the package.

The code and examples provided in a package should never do anything which might be regarded as malicious or anti-social. The following are illustrative examples from past experience.
Compiled code should never terminate the R process within which it is running. Thus C/C++ calls to assert/abort/exit, Fortran calls to STOP and so on must be avoided. Nor may R code call q().
A package must not tamper with the code already loaded into R: any attempt to change code in the standard and recommended packages which ship with R is prohibited. Altering the namespace of another package should only be done with the agreement of the maintainer of that package.
Packages should not write in the users' home filespace, nor anywhere else on the file system apart from the R session's temporary directory (or during installation in the location pointed to by TMPDIR: and such usage should be cleaned up). Installing into the system's R installation (e.g., scripts to its bin directory) is not allowed.
Limited exceptions may be allowed in interactive sessions if the package obtains confirmation from the user.

Packages should not modify the global environment (user's workspace).
Packages should not start external software (such as PDF viewers or browsers) during examples or tests unless that specific instance of the software is explicitly closed afterwards.
Packages should not send information about the R session to the maintainer's or third-party sites without obtaining confirmation from the user.
Packages must not disable the stack-checking mechanism in the R process into which they are loaded.
CRAN packages should use only the public API. Hence they should not use entry points not declared as API in installed headers nor .Internal() nor .Call() etc calls to base packages. Such usages can cause packages to break at any time, even in patched versions of R.

Binary packages

Policies for when a (Windows or OS X) binary package will be distributed:

all its package dependencies on CRAN are available for that platform. Dependencies from other repositories will be installed at CRAN's discretion.
any external software needed can easily be installed on the build machine for all the sub-architectures: here ¡°easily¡± includes not depending on specific versions, nor should the installed binary depend on specific versions.
it passes R CMD check without error for all the available sub-architectures, or at CRAN's discretion, for the most important sub-architecture(s).
Binary packages are not accepted from maintainers: CRAN will only host binary packages prepared by those responsible for the binary areas. Their packages are made automatically by batch jobs and can take a day or two to appear on the CRAN master site (maybe longer to reach CRAN mirrors).


Submission

When submitting a package to CRAN you should either

use the submission form at http://CRAN.R-project.org/submit.html, or
upload by anonymous ftp to ftp://CRAN.R-project.org/incoming/ and send a (plain text ASCII) email at the same time, with subject line as specified below.
In more detail:

Uploads must be source tarballs as created by R CMD build and follow the PACKAGE_VERSION.tar.gz naming scheme.
Please ensure that R CMD check --as-cran has been run on the tarball to be uploaded before submission. This should be done with the current release of R or (preferably) R-devel or R-patched. As ¡°Writing R Extensions¡± used to say
Please ensure that you can run through the complete procedure with only warnings that you understand and have reasons not to eliminate. In principle, packages must pass R CMD check without warnings or significant notes to be admitted to the main CRAN package area. If there are warnings or notes you cannot eliminate (for example because you believe them to be spurious) send an explanatory note as part of your covering email.
For a package update, please check that any packages depending on this one still pass R CMD check: it is especially expected that you will have checked your own packages. A listing of the reverse dependencies of the current version can be found on the CRAN web page for the package.
A submission upload should be accompanied by an email to CRAN@R-project.org sent from the maintainer address listed in the package, and using the subject line `CRAN submission PACKAGE VERSION', where PACKAGE and VERSION are the package name and version, respectively. Plain text ASCII emails should be used if at all possible.
If for some reason the submission has to be made by someone else (for example, a co-author) this needs to be explained, and the designated maintainer will need to confirm the submission. Explain any change in the maintainer's email address.

For a new submission, confirm in your email that you have read and agree to these policies. (This includes new versions of previously archived packages, and the first submission as the new maintainer for a package.)

If the package needs special treatment (for example if vignettes can only be run or re-built on the maintainer's machine or take a very long time), say so in the submission email.

Do not email the package itself.

Once uploaded, no further submissions of that package should be made whilst the uploaded version is pending processing (which may take a few days) and you have not received a reply from a CRAN maintainer.
Part of the processing is that uploads may be renamed by adding one of the extensions .save, .pending or .noemail: the presence of such a file is a sign that the submission process is not finished yet and CRAN maintainers are waiting for response or resubmission from the package maintainer (and such a file name should never be uploaded).
Submitting updates should be done responsibly and with respect for the volunteers' time. Once a package is established (which may take several rounds), ¡°no more than every 1?2 months¡± seems appropriate.
Authors can avoid a lot of the all too frequent rounds of updates by checking carefully for themselves. It should be normal for those without Windows machines of their own to use the winbuilder service to check a package before submission. There is a lot of helpful advice on writing portable packages in ¡°Writing R Extensions¡±.

If an update will change the package's API and hence affect packages depending on it, it is expected that you will contact the maintainers of affected packages and suggest changes, and give them time to prepare updates before submitting your updated package. Do mention in the submission email which packages are affected and that their maintainers have been informed. In order to derive the reverse dependencies of a package including the addresses of maintainers who have to be notified upon changes, the function reverse_dependencies_with_maintainers is available from the developer website.


